{"sourceRoot":"","names":[],"mappings":"QAKA;;AC6BA;AAAA;;;;;CAIC,gBAA+B,GAA/B;EAAA,YACQ,EADR;EAAA;;;;;;;;;;;CAYA,qBACC;EAAA,AAAO,gBAAO,AAAC,KAAK,AAAe,gBAAO;;;;;;;;;;;CAW3C,qBACC;EAAA,SAAQ,KAAK,AAAe;;;;;;;;;;;CAW7B,uBACC;EAAA,SAAQ,KAAa,CAAC,KAAK,AAAe;;;;;;;CAO3C,gBACC,CAAO;EAAA,SAAiB;EAAA;GAAA;IAAjB;EAAA;EAAA;;;;;;;CAOR,oBACC;EAAA,AAAO","version":3,"file":"EnumFlags.js.map","sources":["../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../haxe/versions/4.1.0/std/haxe/EnumFlags.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\n/**\n\tA typed interface for bit flags. This is not a real object, only a typed\n\tinterface for an actual Int. Each flag can be tested/set with the\n\tcorresponding enum instance. Up to 32 flags can be stored that way.\n\n\tEnum constructor indices are preserved from Haxe syntax, so the first\n\tdeclared is index 0, the next index 1 etc. The methods are optimized if the\n\tenum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise\n\t`Type.enumIndex()` reflection is used.\n**/\nabstract EnumFlags<T:EnumValue>(Int) {\n\t/**\n\t\tInitializes the bitflags to `i`.\n\t**/\n\tpublic inline function new(i = 0) {\n\t\tthis = i;\n\t}\n\n\t/**\n\t\tChecks if the index of enum instance `v` is set.\n\n\t\tThis method is optimized if `v` is an enum instance expression such as\n\t\t`SomeEnum.SomeCtor`.\n\n\t\tIf `v` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function has(v:T):Bool {\n\t\treturn this & (1 << Type.enumIndex(v)) != 0;\n\t}\n\n\t/**\n\t\tSets the index of enum instance `v`.\n\n\t\tThis method is optimized if `v` is an enum instance expression such as\n\t\t`SomeEnum.SomeCtor`.\n\n\t\tIf `v` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function set(v:T):Void {\n\t\tthis |= 1 << Type.enumIndex(v);\n\t}\n\n\t/**\n\t\tUnsets the index of enum instance `v`.\n\n\t\tThis method is optimized if `v` is an enum instance expression such as\n\t\t`SomeEnum.SomeCtor`.\n\n\t\tIf `v` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function unset(v:T):Void {\n\t\tthis &= 0xFFFFFFFF - (1 << Type.enumIndex(v));\n\t}\n\n\t/**\n\t\tConvert a integer bitflag into a typed one (this is a no-op, it does not\n\t\thave any impact on speed).\n\t**/\n\tpublic inline static function ofInt<T:EnumValue>(i:Int):EnumFlags<T> {\n\t\treturn new EnumFlags<T>(i);\n\t}\n\n\t/**\n\t\tConvert the typed bitflag into the corresponding int value (this is a\n\t\tno-op, it doesn't have any impact on speed).\n\t**/\n\tpublic inline function toInt():Int {\n\t\treturn this;\n\t}\n}\n"]}