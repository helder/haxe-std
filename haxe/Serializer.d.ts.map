{"sourceRoot":"","names":[],"mappings":"QAmBA;QCWA;;;;;;;;;;;;;;;;;;;;ACcA;CA0DuB;CAnBtB;;;;;;WCUmC;CDHnC;;;;;;eCGmC;;;;;;;;CDwBnC,YEhGgB;;;;;;;;;;;;CF+MhB,mBCrMU;CD+gBV,4BC/gBU;CDyBV;;;;;;;;;;;;mBCqCmC;CDzBnC;;;;;;;;;;;wBCyBmC;;;;;;;;;QDwenC,aEhjBgB","version":3,"file":"Serializer.d.ts.map","sources":["../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/haxe/ds/StringMap.hx","../../../../../../haxe/versions/4.2.0/std/StringBuf.hx","../../../../../../haxe/versions/4.2.0/std/haxe/Serializer.hx","../../../../../../haxe/versions/4.2.0/std/StdTypes.hx","../../../../../../haxe/versions/4.2.0/std/js/_std/String.hx"],"sourcesContent":["package haxe.ds;\n\n#if !js\nextern class StringMap<T> implements haxe.Constraints.IMap<String, T> {\n  public function new(): Void;\n  public function set(key: String, value: T): Void;\n  public function get(key: String): Null<T>;\n  public function exists(key: String): Bool;\n  public function remove(key: String): Bool;\n  public function keys(): Iterator<String>;\n  public function iterator(): Iterator<T>;\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<String,\n    T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n  public function copy(): StringMap<T>;\n  public function toString(): String;\n  public function clear(): Void;\n}\n#else\nclass StringMap<T> extends genes.util.EsMap<String, T> implements haxe.Constraints.IMap<String, T> {\n  public inline function copy(): StringMap<T> {\n    var copied = new genes.util.EsMap();\n    copied.inst = new js.lib.Map(inst);\n    return cast copied;\n  }\n\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<String,\n    T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n}\n#end\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues.\n**/\nclass StringBuf {\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get, never):Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length():Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>(x:T):Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar(c:Int):Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub(s:String, pos:Int, ?len:Int):Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString():String {\n\t\treturn b;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\nimport haxe.ds.List;\n\n/**\n\tThe Serializer class can be used to encode values and objects into a `String`,\n\tfrom which the `Unserializer` class can recreate the original representation.\n\n\tThis class can be used in two ways:\n\n\t- create a `new Serializer()` instance, call its `serialize()` method with\n\t\tany argument and finally retrieve the String representation from\n\t\t`toString()`\n\t- call `Serializer.run()` to obtain the serialized representation of a\n\t\tsingle argument\n\n\tSerialization is guaranteed to work for all haxe-defined classes, but may\n\tor may not work for instances of external/native classes.\n\n\tThe specification of the serialization format can be found here:\n\t<https://haxe.org/manual/std-serialization-format.html>\n**/\nclass Serializer {\n\t/**\n\t\tIf the values you are serializing can contain circular references or\n\t\tobjects repetitions, you should set `USE_CACHE` to true to prevent\n\t\tinfinite loops.\n\n\t\tThis may also reduce the size of serialization Strings at the expense of\n\t\tperformance.\n\n\t\tThis value can be changed for individual instances of `Serializer` by\n\t\tsetting their `useCache` field.\n\t**/\n\tpublic static var USE_CACHE = false;\n\n\t/**\n\t\tUse constructor indexes for enums instead of names.\n\n\t\tThis may reduce the size of serialization Strings, but makes them less\n\t\tsuited for long-term storage: If constructors are removed or added from\n\t\tthe enum, the indices may no longer match.\n\n\t\tThis value can be changed for individual instances of `Serializer` by\n\t\tsetting their `useEnumIndex` field.\n\t**/\n\tpublic static var USE_ENUM_INDEX = false;\n\n\tstatic var BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\n\tstatic var BASE64_CODES = null;\n\n\tvar buf:StringBuf;\n\tvar cache:Array<Dynamic>;\n\tvar shash:haxe.ds.StringMap<Int>;\n\tvar scount:Int;\n\n\t/**\n\t\tThe individual cache setting for `this` Serializer instance.\n\n\t\tSee `USE_CACHE` for a complete description.\n\t**/\n\tpublic var useCache:Bool;\n\n\t/**\n\t\tThe individual enum index setting for `this` Serializer instance.\n\n\t\tSee `USE_ENUM_INDEX` for a complete description.\n\t**/\n\tpublic var useEnumIndex:Bool;\n\n\t/**\n\t\tCreates a new Serializer instance.\n\n\t\tSubsequent calls to `this.serialize` will append values to the\n\t\tinternal buffer of this String. Once complete, the contents can be\n\t\tretrieved through a call to `this.toString`.\n\n\t\tEach `Serializer` instance maintains its own cache if `this.useCache` is\n\t\t`true`.\n\t**/\n\tpublic function new() {\n\t\tbuf = new StringBuf();\n\t\tcache = new Array();\n\t\tuseCache = USE_CACHE;\n\t\tuseEnumIndex = USE_ENUM_INDEX;\n\t\tshash = new haxe.ds.StringMap();\n\t\tscount = 0;\n\t}\n\n\t/**\n\t\tReturn the String representation of `this` Serializer.\n\n\t\tThe exact format specification can be found here:\n\t\thttps://haxe.org/manual/serialization/format\n\t**/\n\tpublic function toString() {\n\t\treturn buf.toString();\n\t}\n\n\t/* prefixes :\n\t\ta : array\n\t\tb : hash\n\t\tc : class\n\t\td : Float\n\t\te : reserved (float exp)\n\t\tf : false\n\t\tg : object end\n\t\th : array/list/hash end\n\t\ti : Int\n\t\tj : enum (by index)\n\t\tk : NaN\n\t\tl : list\n\t\tm : -Inf\n\t\tn : null\n\t\to : object\n\t\tp : +Inf\n\t\tq : haxe.ds.IntMap\n\t\tr : reference\n\t\ts : bytes (base64)\n\t\tt : true\n\t\tu : array nulls\n\t\tv : date\n\t\tw : enum\n\t\tx : exception\n\t\ty : urlencoded string\n\t\tz : zero\n\t\tA : Class<Dynamic>\n\t\tB : Enum<Dynamic>\n\t\tM : haxe.ds.ObjectMap\n\t\tC : custom\n\t */\n\tfunction serializeString(s:String) {\n\t\tvar x = shash.get(s);\n\t\tif (x != null) {\n\t\t\tbuf.add(\"R\");\n\t\t\tbuf.add(x);\n\t\t\treturn;\n\t\t}\n\t\tshash.set(s, scount++);\n\t\t#if old_serialize\n\t\t// no more support for -D old_serialize due to 'j' reuse\n\t\t#if error\n\t\t#end\n\t\t#end\n\t\tbuf.add(\"y\");\n\t\ts = StringTools.urlEncode(s);\n\t\tbuf.add(s.length);\n\t\tbuf.add(\":\");\n\t\tbuf.add(s);\n\t}\n\n\tfunction serializeRef(v:Dynamic) {\n\t\t#if js\n\t\tvar vt = js.Syntax.typeof(v);\n\t\t#end\n\t\tfor (i in 0...cache.length) {\n\t\t\t#if js\n\t\t\tvar ci = cache[i];\n\t\t\tif (js.Syntax.typeof(ci) == vt && ci == v) {\n\t\t\t#else\n\t\t\tif (cache[i] == v) {\n\t\t\t#end\n\t\t\t\tbuf.add(\"r\");\n\t\t\t\tbuf.add(i);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tcache.push(v);\n\t\treturn false;\n\t}\n\n\t#if flash\n\t// only the instance variables\n\n\tfunction serializeClassFields(v:Dynamic, c:Dynamic) {\n\t\tvar xml:flash.xml.XML = untyped __global__[\"flash.utils.describeType\"](c);\n\t\tvar vars = xml.factory[0].child(\"variable\");\n\t\tfor (i in 0...vars.length()) {\n\t\t\tvar f = vars[i].attribute(\"name\").toString();\n\t\t\tif (!v.hasOwnProperty(f))\n\t\t\t\tcontinue;\n\t\t\tserializeString(f);\n\t\t\tserialize(Reflect.field(v, f));\n\t\t}\n\t\tbuf.add(\"g\");\n\t}\n\t#end\n\n\tfunction serializeFields(v:{}) {\n\t\tfor (f in Reflect.fields(v)) {\n\t\t\tserializeString(f);\n\t\t\tserialize(Reflect.field(v, f));\n\t\t}\n\t\tbuf.add(\"g\");\n\t}\n\n\t/**\n\tSerializes `v`.\n\n\tAll haxe-defined values and objects with the exception of functions can\n\tbe serialized. Serialization of external/native objects is not\n\tguaranteed to work.\n\n\tThe values of `this.useCache` and `this.useEnumIndex` may affect\n\tserialization output.\n**/\n\tpublic function serialize(v:Dynamic) {\n\t\tswitch (Type.typeof(v)) {\n\t\t\tcase TNull:\n\t\t\t\tbuf.add(\"n\");\n\t\t\tcase TInt:\n\t\t\t\tvar v:Int = v;\n\t\t\t\tif (v == 0) {\n\t\t\t\t\tbuf.add(\"z\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbuf.add(\"i\");\n\t\t\t\tbuf.add(v);\n\t\t\tcase TFloat:\n\t\t\t\tvar v:Float = v;\n\t\t\t\tif (Math.isNaN(v))\n\t\t\t\t\tbuf.add(\"k\");\n\t\t\t\telse if (!Math.isFinite(v))\n\t\t\t\t\tbuf.add(if (v < 0) \"m\" else \"p\");\n\t\t\t\telse {\n\t\t\t\t\tbuf.add(\"d\");\n\t\t\t\t\tbuf.add(v);\n\t\t\t\t}\n\t\t\tcase TBool:\n\t\t\t\tbuf.add(if (v) \"t\" else \"f\");\n\t\t\tcase TClass(c):\n\t\t\t\tif (#if neko untyped c.__is_String #else c == String #end) {\n\t\t\t\t\tserializeString(v);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (useCache && serializeRef(v))\n\t\t\t\t\treturn;\n\t\t\t\tswitch (#if (neko || cs || python) Type.getClassName(c) #else c #end) {\n\t\t\t\t\tcase #if (neko || cs || python) \"Array\" #else cast Array #end:\n\t\t\t\t\t\tvar ucount = 0;\n\t\t\t\t\t\tbuf.add(\"a\");\n\t\t\t\t\t\t#if (flash || python || hl)\n\t\t\t\t\t\tvar v:Array<Dynamic> = v;\n\t\t\t\t\t\t#end\n\t\t\t\t\t\tvar l = #if (neko || flash || php || cs || java || python || hl || lua || eval) v.length #elseif cpp v.__length() #else __getField(v,\n\t\t\t\t\t\t\t\"length\") #end;\n\t\t\t\t\t\tfor (i in 0...l) {\n\t\t\t\t\t\t\tif (v[i] == null)\n\t\t\t\t\t\t\t\tucount++;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (ucount > 0) {\n\t\t\t\t\t\t\t\t\tif (ucount == 1)\n\t\t\t\t\t\t\t\t\t\tbuf.add(\"n\");\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tbuf.add(\"u\");\n\t\t\t\t\t\t\t\t\t\tbuf.add(ucount);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tucount = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tserialize(v[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ucount > 0) {\n\t\t\t\t\t\t\tif (ucount == 1)\n\t\t\t\t\t\t\t\tbuf.add(\"n\");\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tbuf.add(\"u\");\n\t\t\t\t\t\t\t\tbuf.add(ucount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuf.add(\"h\");\n\t\t\t\t\tcase #if (neko || cs || python) \"haxe.ds.List\" #else cast List #end:\n\t\t\t\t\t\tbuf.add(\"l\");\n\t\t\t\t\t\tvar v:List<Dynamic> = v;\n\t\t\t\t\t\tfor (i in v)\n\t\t\t\t\t\t\tserialize(i);\n\t\t\t\t\t\tbuf.add(\"h\");\n\t\t\t\t\tcase #if (neko || cs || python) \"Date\" #else cast Date #end:\n\t\t\t\t\t\tvar d:Date = v;\n\t\t\t\t\t\tbuf.add(\"v\");\n\t\t\t\t\t\tbuf.add(d.getTime());\n\t\t\t\t\tcase #if (neko || cs || python) \"haxe.ds.StringMap\" #else cast haxe.ds.StringMap #end:\n\t\t\t\t\t\tbuf.add(\"b\");\n\t\t\t\t\t\tvar v:haxe.ds.StringMap<Dynamic> = v;\n\t\t\t\t\t\tfor (k in v.keys()) {\n\t\t\t\t\t\t\tserializeString(k);\n\t\t\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuf.add(\"h\");\n\t\t\t\t\tcase #if (neko || cs || python) \"haxe.ds.IntMap\" #else cast haxe.ds.IntMap #end:\n\t\t\t\t\t\tbuf.add(\"q\");\n\t\t\t\t\t\tvar v:haxe.ds.IntMap<Dynamic> = v;\n\t\t\t\t\t\tfor (k in v.keys()) {\n\t\t\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\t\t\tbuf.add(k);\n\t\t\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuf.add(\"h\");\n\t\t\t\t\tcase #if (neko || cs || python) \"haxe.ds.ObjectMap\" #else cast haxe.ds.ObjectMap #end:\n\t\t\t\t\t\tbuf.add(\"M\");\n\t\t\t\t\t\tvar v:haxe.ds.ObjectMap<Dynamic, Dynamic> = v;\n\t\t\t\t\t\tfor (k in v.keys()) {\n\t\t\t\t\t\t\t#if (js || neko)\n\t\t\t\t\t\t\tvar id = Reflect.field(k, \"__id__\");\n\t\t\t\t\t\t\tReflect.deleteField(k, \"__id__\");\n\t\t\t\t\t\t\tserialize(k);\n\t\t\t\t\t\t\tReflect.setField(k, \"__id__\", id);\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tserialize(k);\n\t\t\t\t\t\t\t#end\n\t\t\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuf.add(\"h\");\n\t\t\t\t\tcase #if (neko || cs || python) \"haxe.io.Bytes\" #else cast haxe.io.Bytes #end:\n\t\t\t\t\t\tvar v:haxe.io.Bytes = v;\n\t\t\t\t\t\t#if neko\n\t\t\t\t\t\tvar chars = new String(base_encode(v.getData(), untyped BASE64.__s));\n\t\t\t\t\t\tbuf.add(\"s\");\n\t\t\t\t\t\tbuf.add(chars.length);\n\t\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\t\tbuf.add(chars);\n\t\t\t\t\t\t#elseif php\n\t\t\t\t\t\tvar chars = new String(php.Global.base64_encode(v.getData()));\n\t\t\t\t\t\tchars = php.Global.strtr(chars, '+/', '%:');\n\t\t\t\t\t\tbuf.add(\"s\");\n\t\t\t\t\t\tbuf.add(chars.length);\n\t\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\t\tbuf.add(chars);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\tbuf.add(\"s\");\n\t\t\t\t\t\tbuf.add(Math.ceil((v.length * 8) / 6));\n\t\t\t\t\t\tbuf.add(\":\");\n\n\t\t\t\t\t\tvar i = 0;\n\t\t\t\t\t\tvar max = v.length - 2;\n\t\t\t\t\t\tvar b64 = BASE64_CODES;\n\t\t\t\t\t\tif (b64 == null) {\n\t\t\t\t\t\t\tb64 = new haxe.ds.Vector(BASE64.length);\n\t\t\t\t\t\t\tfor (i in 0...BASE64.length)\n\t\t\t\t\t\t\t\tb64[i] = BASE64.charCodeAt(i);\n\t\t\t\t\t\t\tBASE64_CODES = b64;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\t\t\tvar b2 = v.get(i++);\n\t\t\t\t\t\t\tvar b3 = v.get(i++);\n\n\t\t\t\t\t\t\tbuf.addChar(b64[b1 >> 2]);\n\t\t\t\t\t\t\tbuf.addChar(b64[((b1 << 4) | (b2 >> 4)) & 63]);\n\t\t\t\t\t\t\tbuf.addChar(b64[((b2 << 2) | (b3 >> 6)) & 63]);\n\t\t\t\t\t\t\tbuf.addChar(b64[b3 & 63]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i == max) {\n\t\t\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\t\t\tvar b2 = v.get(i++);\n\t\t\t\t\t\t\tbuf.addChar(b64[b1 >> 2]);\n\t\t\t\t\t\t\tbuf.addChar(b64[((b1 << 4) | (b2 >> 4)) & 63]);\n\t\t\t\t\t\t\tbuf.addChar(b64[(b2 << 2) & 63]);\n\t\t\t\t\t\t} else if (i == max + 1) {\n\t\t\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\t\t\tbuf.addChar(b64[b1 >> 2]);\n\t\t\t\t\t\t\tbuf.addChar(b64[(b1 << 4) & 63]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#end\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (useCache) cache.pop();\n\t\t\t\t\t\tif (#if flash try\n\t\t\t\t\t\t\tv.hxSerialize != null\n\t\t\t\t\t\tcatch (e:Dynamic)\n\t\t\t\t\t\t\tfalse #elseif (cs || java || python) Reflect.hasField(v,\n\t\t\t\t\t\t\t\t\"hxSerialize\") #elseif php php.Global.method_exists(v, 'hxSerialize') #else v.hxSerialize != null #end) {\n\t\t\t\t\t\t\tbuf.add(\"C\");\n\t\t\t\t\t\t\tserializeString(Type.getClassName(c));\n\t\t\t\t\t\t\tif (useCache)\n\t\t\t\t\t\t\t\tcache.push(v);\n\t\t\t\t\t\t\tv.hxSerialize(this);\n\t\t\t\t\t\t\tbuf.add(\"g\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuf.add(\"c\");\n\t\t\t\t\t\t\tserializeString(Type.getClassName(c));\n\t\t\t\t\t\t\tif (useCache)\n\t\t\t\t\t\t\t\tcache.push(v);\n\t\t\t\t\t\t\t#if flash\n\t\t\t\t\t\t\tserializeClassFields(v, c);\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tserializeFields(v);\n\t\t\t\t\t\t\t#end\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase TObject:\n\t\t\t\tif (Std.isOfType(v, Class)) {\n\t\t\t\t\tvar className = Type.getClassName(v);\n\t\t\t\t\t#if (flash || cpp)\n\t\t\t\t\t// Currently, Enum and Class are the same for flash and cpp.\n\t\t\t\t\t//  use resolveEnum to test if it is actually an enum\n\t\t\t\t\tif (Type.resolveEnum(className) != null)\n\t\t\t\t\t\tbuf.add(\"B\")\n\t\t\t\t\telse\n\t\t\t\t\t#end\n\t\t\t\t\tbuf.add(\"A\");\n\t\t\t\t\tserializeString(className);\n\t\t\t\t} else if (Std.isOfType(v, Enum)) {\n\t\t\t\t\tbuf.add(\"B\");\n\t\t\t\t\tserializeString(Type.getEnumName(v));\n\t\t\t\t} else {\n\t\t\t\t\tif (useCache && serializeRef(v))\n\t\t\t\t\t\treturn;\n\t\t\t\t\tbuf.add(\"o\");\n\t\t\t\t\tserializeFields(v);\n\t\t\t\t}\n\t\t\tcase TEnum(e):\n\t\t\t\tif (useCache) {\n\t\t\t\t\tif (serializeRef(v))\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcache.pop();\n\t\t\t\t}\n\t\t\t\tbuf.add(useEnumIndex ? \"j\" : \"w\");\n\t\t\t\tserializeString(Type.getEnumName(e));\n\t\t\t\t#if neko\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(v.index);\n\t\t\t\t} else\n\t\t\t\t\tserializeString(new String(v.tag));\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tif (v.args == null)\n\t\t\t\t\tbuf.add(0);\n\t\t\t\telse {\n\t\t\t\t\tvar l:Int = untyped __dollar__asize(v.args);\n\t\t\t\t\tbuf.add(l);\n\t\t\t\t\tfor (i in 0...l)\n\t\t\t\t\t\tserialize(v.args[i]);\n\t\t\t\t}\n\t\t\t\t#elseif flash\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tvar i:Int = v.index;\n\t\t\t\t\tbuf.add(i);\n\t\t\t\t} else\n\t\t\t\t\tserializeString(v.tag);\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar pl:Array<Dynamic> = v.params;\n\t\t\t\tif (pl == null)\n\t\t\t\t\tbuf.add(0);\n\t\t\t\telse {\n\t\t\t\t\tbuf.add(pl.length);\n\t\t\t\t\tfor (p in pl)\n\t\t\t\t\t\tserialize(p);\n\t\t\t\t}\n\t\t\t\t#elseif cpp\n\t\t\t\tvar enumBase:cpp.EnumBase = v;\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(enumBase.getIndex());\n\t\t\t\t} else\n\t\t\t\t\tserializeString(enumBase.getTag());\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar len = enumBase.getParamCount();\n\t\t\t\tbuf.add(len);\n\t\t\t\tfor (p in 0...len)\n\t\t\t\t\tserialize(enumBase.getParamI(p));\n\t\t\t\t#elseif php\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(v.index);\n\t\t\t\t} else\n\t\t\t\t\tserializeString(v.tag);\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar l:Int = php.Syntax.code(\"count({0})\", v.params);\n\t\t\t\tif (l == 0 || v.params == null)\n\t\t\t\t\tbuf.add(0);\n\t\t\t\telse {\n\t\t\t\t\tbuf.add(l);\n\t\t\t\t\tfor (i in 0...l) {\n\t\t\t\t\t\t#if php\n\t\t\t\t\t\tserialize(v.params[i]);\n\t\t\t\t\t\t#end\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#elseif (java || cs || python || hl || eval)\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(Type.enumIndex(v));\n\t\t\t\t} else\n\t\t\t\t\tserializeString(Type.enumConstructor(v));\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar arr:Array<Dynamic> = Type.enumParameters(v);\n\t\t\t\tif (arr != null) {\n\t\t\t\t\tbuf.add(arr.length);\n\t\t\t\t\tfor (v in arr)\n\t\t\t\t\t\tserialize(v);\n\t\t\t\t} else {\n\t\t\t\t\tbuf.add(\"0\");\n\t\t\t\t}\n\t\t\t\t#elseif (js && !js_enums_as_arrays)\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(v._hx_index);\n\t\t\t\t} else\n\t\t\t\t\tserializeString(Type.enumConstructor(v));\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar params = Type.enumParameters(v);\n\t\t\t\tbuf.add(params.length);\n\t\t\t\tfor (p in params)\n\t\t\t\t\tserialize(p);\n\t\t\t\t#else\n\t\t\t\tif (useEnumIndex) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(v[1]);\n\t\t\t\t} else\n\t\t\t\t\tserializeString(v[0]);\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar l = __getField(v, \"length\");\n\t\t\t\tbuf.add(l - 2);\n\t\t\t\tfor (i in 2...l)\n\t\t\t\t\tserialize(v[i]);\n\t\t\t\t#end\n\t\t\t\tif (useCache)\n\t\t\t\t\tcache.push(v);\n\t\t\tcase TFunction:\n\t\t\t\tthrow \"Cannot serialize function\";\n\t\t\tdefault:\n\t\t\t\t#if neko\n\t\t\t\tif (untyped (__i32__kind != null && __dollar__iskind(v, __i32__kind))) {\n\t\t\t\t\tbuf.add(\"i\");\n\t\t\t\t\tbuf.add(v);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t#end\n\t\t\t\tthrow \"Cannot serialize \" + Std.string(v);\n\t\t}\n\t}\n\n\textern inline function __getField(o:Dynamic, f:String):Dynamic\n\t\treturn o[cast f];\n\n\tpublic function serializeException(e:Dynamic) {\n\t\tbuf.add(\"x\");\n\t\t#if flash\n\t\tif (untyped __is__(e, __global__[\"Error\"])) {\n\t\t\tvar e:flash.errors.Error = e;\n\t\t\tvar s = e.getStackTrace();\n\t\t\tif (s == null)\n\t\t\t\tserialize(e.message);\n\t\t\telse\n\t\t\t\tserialize(s);\n\t\t\treturn;\n\t\t}\n\t\t#end\n\t\tserialize(e);\n\t}\n\n\t/**\n\tSerializes `v` and returns the String representation.\n\n\tThis is a convenience function for creating a new instance of\n\tSerializer, serialize `v` into it and obtain the result through a call\n\tto `toString()`.\n**/\n\tpublic static function run(v:Dynamic) {\n\t\tvar s = new Serializer();\n\t\ts.serialize(v);\n\t\treturn s.toString();\n\t}\n\n\t#if neko\n\tstatic var base_encode = neko.Lib.load(\"std\", \"base_encode\", 2);\n\t#end\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}