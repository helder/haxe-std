{"sourceRoot":"","names":[],"mappings":"QA4BA;;ACDA,mBDCA","version":3,"file":"Http.d.ts.map","sources":["../../../../../../haxe/versions/4.1.5/std/haxe/http/HttpNodeJs.hx","../../../../../../haxe/versions/4.1.5/std/haxe/Http.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.http;\n\n#if nodejs\nimport js.node.Buffer;\nimport haxe.io.Bytes;\n\nclass HttpNodeJs extends haxe.http.HttpBase {\n\tvar req:js.node.http.ClientRequest;\n\n\tpublic function new(url:String) {\n\t\tsuper(url);\n\t}\n\n\t/**\n\t\tCancels `this` Http request if `request` has been called and a response\n\t\thas not yet been received.\n\t**/\n\tpublic function cancel() {\n\t\tif (req == null)\n\t\t\treturn;\n\t\treq.abort();\n\t\treq = null;\n\t}\n\n\tpublic override function request(?post:Bool) {\n\t\tresponseAsString = null;\n\t\tresponseBytes = null;\n\t\tvar parsedUrl = js.node.Url.parse(url);\n\t\tvar secure = (parsedUrl.protocol == \"https:\");\n\t\tvar host = parsedUrl.hostname;\n\t\tvar path = parsedUrl.path;\n\t\tvar port = if (parsedUrl.port != null) Std.parseInt(parsedUrl.port) else (secure ? 443 : 80);\n\t\tvar h:Dynamic = {};\n\t\tfor (i in headers) {\n\t\t\tvar arr = Reflect.field(h, i.name);\n\t\t\tif (arr == null) {\n\t\t\t\tarr = new Array<String>();\n\t\t\t\tReflect.setField(h, i.name, arr);\n\t\t\t}\n\n\t\t\tarr.push(i.value);\n\t\t}\n\t\tif (postData != null || postBytes != null)\n\t\t\tpost = true;\n\t\tvar uri = null;\n\t\tfor (p in params) {\n\t\t\tif (uri == null)\n\t\t\t\turi = \"\";\n\t\t\telse\n\t\t\t\turi += \"&\";\n\t\t\turi += StringTools.urlEncode(p.name) + \"=\" + StringTools.urlEncode(p.value);\n\t\t}\n\t\tvar question = path.split(\"?\").length <= 1;\n\t\tif (uri != null)\n\t\t\tpath += (if (question) \"?\" else \"&\") + uri;\n\n\t\tvar opts = {\n\t\t\tprotocol: parsedUrl.protocol,\n\t\t\thostname: host,\n\t\t\tport: port,\n\t\t\tmethod: post ? 'POST' : 'GET',\n\t\t\tpath: path,\n\t\t\theaders: h\n\t\t};\n\t\tfunction httpResponse(res) {\n\t\t\tres.setEncoding('binary');\n\t\t\tvar s = res.statusCode;\n\t\t\tif (s != null)\n\t\t\t\tonStatus(s);\n\t\t\tvar data = [];\n\t\t\tres.on('data', function(chunk:String) {\n\t\t\t\tdata.push(Buffer.from(chunk, 'binary'));\n\t\t\t});\n\t\t\tres.on('end', function(_) {\n\t\t\t\tvar buf = (data.length == 1 ? data[0] : Buffer.concat(data));\n\t\t\t\tresponseBytes = Bytes.ofData(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength));\n\t\t\t\treq = null;\n\t\t\t\tif (s != null && s >= 200 && s < 400) {\n\t\t\t\t\tsuccess(responseBytes);\n\t\t\t\t} else {\n\t\t\t\t\tonError(\"Http Error #\" + s);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treq = secure ? js.node.Https.request(untyped opts, httpResponse) : js.node.Http.request(untyped opts, httpResponse);\n\t\tif (post)\n\t\t\tif (postData != null) {\n\t\t\t\treq.write(postData);\n\t\t\t} else if(postBytes != null) {\n\t\t\t\treq.setHeader(\"Content-Length\", '${postBytes.length}');\n\t\t\t\treq.write(Buffer.from(postBytes.getData()));\n\t\t\t}\n\n\t\treq.end();\n\t}\n}\n#end\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\n#if sys\ntypedef Http = sys.Http;\n#elseif nodejs\ntypedef Http = haxe.http.HttpNodeJs;\n#elseif js\ntypedef Http = haxe.http.HttpJs;\n#else\ntypedef Http = haxe.http.HttpBase;\n#end\n"]}