{"sourceRoot":"","names":[],"mappings":"QA2BA;QCAA;QCtBA;QCgBU;;;;ACcV;AAAA;;;;;CAIC;EAAA,YACQ,GADR;EAAA;;;;;;;;;;CAWA,uBAEC;EAAA,AAAe,aAAK;;;;;;;;;;;;CAgBrB,8BAEC;EAAA,AAAe,aAAK,OAAO;;;;;;;;CAY5B,0BACC;EAAA,AAAO,4CAAiB,OAAM;;;;;;;;;;CAS/B,0BACC;EAAA,AAAO,8BAAoB,OAAM;;;;;;CAKlC,mBACC;EAAA,AAAO,yBAAe;;;;;;CAKvB,mBACC;EAAA,AAAO,uBAAa;;;;;;;;CAOrB,uBACC;EAAA,AAAO,iCAA0B;;;;;;;;CAQlC,+BACC;EAAA,AAAO,yCAAkC","version":3,"file":"DynamicAccess.js.map","sources":["../../../../../../haxe/versions/4.2.3/std/haxe/iterators/DynamicAccessKeyValueIterator.hx","../../../../../../haxe/versions/4.2.3/std/haxe/iterators/DynamicAccessIterator.hx","../../../../../../haxe/haxe_libraries/genes/0.4.1/github/179cb495c2d785321879e8afe765aa04d639783d/src/genes/Register.hx","../../../../../../haxe/versions/4.2.3/std/js/_std/Reflect.hx","../../../../../../haxe/versions/4.2.3/std/haxe/DynamicAccess.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.iterators;\n\n/**\n\tThis Key/Value iterator can be used to iterate over `haxe.DynamicAccess`.\n**/\nclass DynamicAccessKeyValueIterator<T> {\n\tfinal access:DynamicAccess<T>;\n\tfinal keys:Array<String>;\n\tvar index:Int;\n\n\tpublic inline function new(access:DynamicAccess<T>) {\n\t\tthis.access = access;\n\t\tthis.keys = access.keys();\n\t\tindex = 0;\n\t}\n\n\t/**\n\t\tSee `Iterator.hasNext`\n\t**/\n\tpublic inline function hasNext():Bool {\n\t\treturn index < keys.length;\n\t}\n\n\t/**\n\t\tSee `Iterator.next`\n\t**/\n\tpublic inline function next():{key:String, value:T} {\n\t\tvar key = keys[index++];\n\t\treturn {value: (access[key] : T), key: key};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.iterators;\n\n/**\n\tThis iterator can be used to iterate over the values of `haxe.DynamicAccess`.\n**/\nclass DynamicAccessIterator<T> {\n\tfinal access:DynamicAccess<T>;\n\tfinal keys:Array<String>;\n\tvar index:Int;\n\n\tpublic inline function new(access:DynamicAccess<T>) {\n\t\tthis.access = access;\n\t\tthis.keys = access.keys();\n\t\tindex = 0;\n\t}\n\n\t/**\n\t\tSee `Iterator.hasNext`\n\t**/\n\tpublic inline function hasNext():Bool {\n\t\treturn index < keys.length;\n\t}\n\n\t/**\n\t\tSee `Iterator.next`\n\t**/\n\tpublic inline function next():T {\n\t\treturn access[keys[index++]];\n\t}\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : undefined');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a)) js.Syntax.code('a.iterator()') else\n      untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\t@:pure\n\tpublic inline static function hasField(o:Dynamic, field:String):Bool {\n\t\treturn js.lib.Object.prototype.hasOwnProperty.call(o, field);\n\t}\n\n\t@:pure\n\tpublic static function field(o:Dynamic, field:String):Dynamic {\n\t\ttry\n\t\t\treturn o[cast field]\n\t\tcatch (e:Dynamic)\n\t\t\treturn null;\n\t}\n\n\tpublic inline static function setField(o:Dynamic, field:String, value:Dynamic):Void {\n\t\to[cast field] = value;\n\t}\n\n\tpublic static function getProperty(o:Dynamic, field:String):Dynamic\n\t\tuntyped {\n\t\t\tvar tmp;\n\t\t\treturn if (o == null) __define_feature__(\"Reflect.getProperty\",\n\t\t\t\tnull) else if (o.__properties__ && (tmp = o.__properties__[\"get_\" + field])) o[tmp]() else o[field];\n\t\t}\n\n\tpublic static function setProperty(o:Dynamic, field:String, value:Dynamic):Void\n\t\tuntyped {\n\t\t\tvar tmp;\n\t\t\tif (o.__properties__ && (tmp = o.__properties__[\"set_\" + field]))\n\t\t\t\to[tmp](value)\n\t\t\telse\n\t\t\t\to[field] = __define_feature__(\"Reflect.setProperty\", value);\n\t\t}\n\n\tpublic inline static function callMethod(o:Dynamic, func:haxe.Constraints.Function, args:Array<Dynamic>):Dynamic {\n\t\treturn (cast func : js.lib.Function).apply(o, args);\n\t}\n\n\tpublic static function fields(o:Dynamic):Array<String> {\n\t\tvar a = [];\n\t\tif (o != null)\n\t\t\tuntyped {\n\t\t\t\tvar hasOwnProperty = js.lib.Object.prototype.hasOwnProperty;\n\t\t\t\tjs.Syntax.code(\"for( var f in o ) {\");\n\t\t\t\tif (f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f))\n\t\t\t\t\ta.push(f);\n\t\t\t\tjs.Syntax.code(\"}\");\n\t\t\t}\n\t\treturn a;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isFunction(f:Dynamic):Bool {\n\t\treturn js.Syntax.typeof(f) == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>(a:T, b:T):Int {\n\t\treturn (a == b) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods(f1:Dynamic, f2:Dynamic):Bool {\n\t\tif (f1 == f2)\n\t\t\treturn true;\n\t\tif (!isFunction(f1) || !isFunction(f2))\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isObject(v:Dynamic):Bool {\n\t\tif (v == null)\n\t\t\treturn false;\n\t\tvar t = js.Syntax.typeof(v);\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null))\n\t\t\t|| (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue(v:Dynamic):Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField(o:Dynamic, field:String):Bool {\n\t\tif (!hasField(o, field))\n\t\t\treturn false;\n\t\tjs.Syntax.delete(o, field);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>(o:Null<T>):Null<T> {\n\t\tif (o == null)\n\t\t\treturn null;\n\t\tvar o2:Dynamic = {};\n\t\tfor (f in Reflect.fields(o))\n\t\t\tReflect.setField(o2, f, Reflect.field(o, f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function(f:Array<Dynamic>->Void):Dynamic {})\n\tpublic static function makeVarArgs(f:Array<Dynamic>->Dynamic):Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(js.Syntax.code(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\nimport haxe.iterators.DynamicAccessIterator;\nimport haxe.iterators.DynamicAccessKeyValueIterator;\n\n/**\n\tDynamicAccess is an abstract type for working with anonymous structures\n\tthat are intended to hold collections of objects by the string key.\n\n\tFor example, these types of structures are often created from JSON.\n\n\tBasically, it wraps `Reflect` calls in a `Map`-like interface.\n**/\nabstract DynamicAccess<T>(Dynamic<T>) from Dynamic<T> to Dynamic<T> {\n\t/**\n\t\tCreates a new structure.\n\t**/\n\tpublic inline function new()\n\t\tthis = {};\n\n\t/**\n\t\tReturns a value by specified `key`.\n\n\t\tIf the structure does not contain the given key, `null` is returned.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\t@:arrayAccess\n\tpublic inline function get(key:String):Null<T> {\n\t\t#if js\n\t\treturn untyped this[key]; // we know it's an object, so we don't need a check\n\t\t#else\n\t\treturn Reflect.field(this, key);\n\t\t#end\n\t}\n\n\t/**\n\t\tSets a `value` for a specified `key`.\n\n\t\tIf the structure contains the given key, its value will be overwritten.\n\n\t\tReturns the given value.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\t@:arrayAccess\n\tpublic inline function set(key:String, value:T):T {\n\t\t#if js\n\t\treturn untyped this[key] = value;\n\t\t#else\n\t\tReflect.setField(this, key, value);\n\t\treturn value;\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the structure contains a specified `key`.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function exists(key:String):Bool\n\t\treturn Reflect.hasField(this, key);\n\n\t/**\n\t\tRemoves a specified `key` from the structure.\n\n\t\tReturns true, if `key` was present in structure, or false otherwise.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function remove(key:String):Bool\n\t\treturn Reflect.deleteField(this, key);\n\n\t/**\n\t\tReturns an array of `keys` in a structure.\n\t**/\n\tpublic inline function keys():Array<String>\n\t\treturn Reflect.fields(this);\n\n\t/**\n\t\tReturns a shallow copy of the structure\n\t**/\n\tpublic inline function copy():DynamicAccess<T>\n\t\treturn Reflect.copy(this);\n\n\t/**\n\t\tReturns an Iterator over the values of this `DynamicAccess`.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function iterator():DynamicAccessIterator<T> {\n\t\treturn new DynamicAccessIterator(this);\n\t}\n\n\t/**\n\t\tReturns an Iterator over the keys and values of this `DynamicAccess`.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function keyValueIterator():DynamicAccessKeyValueIterator<T> {\n\t\treturn new DynamicAccessKeyValueIterator(this);\n\t}\n}\n"]}