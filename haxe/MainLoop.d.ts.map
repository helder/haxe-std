{"sourceRoot":"","names":[],"mappings":";AAQA;WAaC,sBCUU,UA6ByB;CDnDnC,mBCsBU;CDrBV,gBAFD;CAGC,gBAHD;CAQC;;;;aC6EmC;CD3EnC,SC2BmC;CD1BnC,UCyCmC;;;;;;CD7BnC,SCmDD,OArCoC,SAdzB;;;;;CDOV,QCPU;;;;;CDeV,QCfU;;;AD8BX;CAOC,0BA5DD;CA8DC,6BCVmC;kBDYnC,mBCZmC;QDenC,aCkBmC;QDRnC,oBCtDU;QD0DV,0BC1DU;;;;;QDiEV,cCjEU,kBA6ByB,SDpDpC;kBAqGC,4BCjDmC,SA7BzB;kBDiGV,cCjGU;;;;;kBDkKV,QCpJmC","version":3,"file":"MainLoop.d.ts.map","sources":["../../../../../../haxe/versions/4.2.3/std/haxe/MainLoop.hx","../../../../../../haxe/versions/4.2.3/std/StdTypes.hx"],"sourcesContent":["package haxe;\n\nimport haxe.EntryPoint;\n#if (target.threaded && !cppia)\nimport sys.thread.EventLoop;\nimport sys.thread.Thread;\n#end\n\nclass MainEvent {\n\tvar f:Void->Void;\n\tvar prev:MainEvent;\n\tvar next:MainEvent;\n\n\t/**\n\t\tTells if the event can lock the process from exiting (default:true)\n\t**/\n\tpublic var isBlocking:Bool = true;\n\n\tpublic var nextRun(default, null):Float;\n\tpublic var priority(default, null):Int;\n\n\tfunction new(f, p) {\n\t\tthis.f = f;\n\t\tthis.priority = p;\n\t\tnextRun = Math.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t\tDelay the execution of the event for the given time, in seconds.\n\t\tIf t is null, the event will be run at tick() time.\n\t**/\n\tpublic function delay(t:Null<Float>) {\n\t\tnextRun = t == null ? Math.NEGATIVE_INFINITY : haxe.Timer.stamp() + t;\n\t}\n\n\t/**\n\t\tCall the event. Will do nothing if the event has been stopped.\n\t**/\n\tpublic inline function call() {\n\t\tif (f != null)\n\t\t\tf();\n\t}\n\n\t/**\n\t\tStop the event from firing anymore.\n\t**/\n\tpublic function stop() {\n\t\tif (f == null)\n\t\t\treturn;\n\t\tf = null;\n\t\tnextRun = Math.NEGATIVE_INFINITY;\n\t\tif (prev == null)\n\t\t\t@:privateAccess MainLoop.pending = next;\n\t\telse\n\t\t\tprev.next = next;\n\t\tif (next != null)\n\t\t\tnext.prev = prev;\n\t}\n}\n\n@:access(haxe.MainEvent)\nclass MainLoop {\n\t#if (target.threaded && !cppia)\n\tstatic var eventLoopHandler:Null<EventHandler>;\n\tstatic var mutex = new sys.thread.Mutex();\n\tstatic var mainThread = Thread.current();\n\t#end\n\n\tstatic var pending:MainEvent;\n\n\tpublic static var threadCount(get, never):Int;\n\n\tinline static function get_threadCount()\n\t\treturn EntryPoint.threadCount;\n\n\tpublic static function hasEvents() {\n\t\tvar p = pending;\n\t\twhile (p != null) {\n\t\t\tif (p.isBlocking)\n\t\t\t\treturn true;\n\t\t\tp = p.next;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static function addThread(f:Void->Void) {\n\t\tEntryPoint.addThread(f);\n\t}\n\n\tpublic static function runInMainThread(f:Void->Void) {\n\t\tEntryPoint.runInMainThread(f);\n\t}\n\n\t/**\n\t\tAdd a pending event to be run into the main loop.\n\t**/\n\tpublic static function add(f:Void->Void, priority = 0):MainEvent@:privateAccess {\n\t\tif (f == null)\n\t\t\tthrow \"Event function is null\";\n\t\tvar e = new MainEvent(f, priority);\n\t\tvar head = pending;\n\t\tif (head != null)\n\t\t\thead.prev = e;\n\t\te.next = head;\n\t\tpending = e;\n\t\tinjectIntoEventLoop(0);\n\t\treturn e;\n\t}\n\n\tstatic function injectIntoEventLoop(waitMs:Int) {\n\t\t#if (target.threaded && !cppia)\n\t\t\tmutex.acquire();\n\t\t\tif(eventLoopHandler != null) {\n\t\t\t\tmainThread.events.cancel(eventLoopHandler);\n\t\t\t}\n\t\t\teventLoopHandler = mainThread.events.repeat(\n\t\t\t\t() -> {\n\t\t\t\t\tvar wait = tick();\n\t\t\t\t\tif(hasEvents()) {\n\t\t\t\t\t\tinjectIntoEventLoop(Std.int(wait * 1000));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twaitMs\n\t\t\t);\n\t\t\tmutex.release();\n\t\t#end\n\t}\n\n\tstatic function sortEvents() {\n\t\t// pending = haxe.ds.ListSort.sort(pending, function(e1, e2) return e1.nextRun > e2.nextRun ? -1 : 1);\n\t\t// we can't use directly ListSort because it requires prev/next to be public, which we don't want here\n\t\t// we do then a manual inline, this also allow use to do a Float comparison of nextRun\n\t\tvar list = pending;\n\n\t\tif (list == null)\n\t\t\treturn;\n\n\t\tvar insize = 1, nmerges, psize = 0, qsize = 0;\n\t\tvar p, q, e, tail:MainEvent;\n\n\t\twhile (true) {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnmerges = 0;\n\t\t\twhile (p != null) {\n\t\t\t\tnmerges++;\n\t\t\t\tq = p;\n\t\t\t\tpsize = 0;\n\t\t\t\tfor (i in 0...insize) {\n\t\t\t\t\tpsize++;\n\t\t\t\t\tq = q.next;\n\t\t\t\t\tif (q == null)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tqsize = insize;\n\t\t\t\twhile (psize > 0 || (qsize > 0 && q != null)) {\n\t\t\t\t\tif (psize == 0) {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.next;\n\t\t\t\t\t\tqsize--;\n\t\t\t\t\t} else if (qsize == 0\n\t\t\t\t\t\t|| q == null\n\t\t\t\t\t\t|| (p.priority > q.priority || (p.priority == q.priority && p.nextRun <= q.nextRun))) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.next;\n\t\t\t\t\t\tpsize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.next;\n\t\t\t\t\t\tqsize--;\n\t\t\t\t\t}\n\t\t\t\t\tif (tail != null)\n\t\t\t\t\t\ttail.next = e;\n\t\t\t\t\telse\n\t\t\t\t\t\tlist = e;\n\t\t\t\t\te.prev = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\t\t\t\tp = q;\n\t\t\t}\n\t\t\ttail.next = null;\n\t\t\tif (nmerges <= 1)\n\t\t\t\tbreak;\n\t\t\tinsize *= 2;\n\t\t}\n\t\tlist.prev = null; // not cycling\n\t\tpending = list;\n\t}\n\n\t/**\n\t\tRun the pending events. Return the time for next event.\n\t**/\n\tstatic function tick() {\n\t\tsortEvents();\n\t\tvar e = pending;\n\t\tvar now = haxe.Timer.stamp();\n\t\tvar wait = 1e9;\n\t\twhile (e != null) {\n\t\t\tvar next = e.next;\n\t\t\tvar wt = e.nextRun - now;\n\t\t\tif (wt <= 0) {\n\t\t\t\twait = 0;\n\t\t\t\te.call();\n\t\t\t} else if (wait > wt)\n\t\t\t\twait = wt;\n\t\t\te = next;\n\t\t}\n\t\treturn wait;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}