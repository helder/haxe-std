{"sourceRoot":"","names":[],"mappings":"QAwBA;;ACAA;CACC,eCJgB","version":3,"file":"StringInput.d.ts.map","sources":["../../../../../../../haxe/versions/4.1.5/std/haxe/io/BytesInput.hx","../../../../../../../haxe/versions/4.1.5/std/haxe/io/StringInput.hx","../../../../../../../haxe/versions/4.1.5/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\nclass BytesInput extends Input {\n\tvar b:#if js js.lib.Uint8Array #elseif hl hl.Bytes #else BytesData #end;\n\t#if !flash\n\tvar pos:Int;\n\tvar len:Int;\n\tvar totlen:Int;\n\t#end\n\n\t/** The current position in the stream in bytes. */\n\tpublic var position(get, set):Int;\n\n\t/** The length of the stream in bytes. */\n\tpublic var length(get, never):Int;\n\n\tpublic function new(b:Bytes, ?pos:Int, ?len:Int) {\n\t\tif (pos == null)\n\t\t\tpos = 0;\n\t\tif (len == null)\n\t\t\tlen = b.length - pos;\n\t\tif (pos < 0 || len < 0 || pos + len > b.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\t#if flash\n\t\tvar ba = b.getData();\n\t\tba.position = pos;\n\t\tif (len != ba.bytesAvailable) {\n\t\t\t// truncate\n\t\t\tthis.b = new flash.utils.ByteArray();\n\t\t\tba.readBytes(this.b, 0, len);\n\t\t} else\n\t\t\tthis.b = ba;\n\t\tthis.b.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t#else\n\t\tthis.b = #if (js || hl) @:privateAccess b.b #else b.getData() #end;\n\t\tthis.pos = pos;\n\t\tthis.len = len;\n\t\tthis.totlen = len;\n\t\t#end\n\t\t#if python\n\t\tbigEndian = false;\n\t\t#end\n\t}\n\n\tinline function get_position():Int {\n\t\t#if flash\n\t\treturn b.position;\n\t\t#else\n\t\treturn pos;\n\t\t#end\n\t}\n\n\tinline function get_length():Int {\n\t\t#if flash\n\t\treturn b.length;\n\t\t#else\n\t\treturn totlen;\n\t\t#end\n\t}\n\n\tfunction set_position(p:Int):Int {\n\t\tif (p < 0)\n\t\t\tp = 0;\n\t\telse if (p > length)\n\t\t\tp = length;\n\t\t#if flash\n\t\treturn b.position = p;\n\t\t#else\n\t\tlen = totlen - p;\n\t\treturn pos = p;\n\t\t#end\n\t}\n\n\tpublic override function readByte():Int {\n\t\t#if flash\n\t\treturn try b.readUnsignedByte() catch (e:Dynamic) throw new Eof();\n\t\t#else\n\t\tif (this.len == 0)\n\t\t\tthrow new Eof();\n\t\tlen--;\n\t\t#if neko\n\t\treturn untyped __dollar__sget(b, pos++);\n\t\t#elseif cpp\n\t\treturn untyped b[pos++];\n\t\t#elseif java\n\t\treturn untyped b[pos++] & 0xFF;\n\t\t#elseif python // dodge https://github.com/HaxeFoundation/haxe/issues/5080\n\t\tvar b = b[pos];\n\t\tpos++;\n\t\treturn b;\n\t\t#else\n\t\treturn b[pos++];\n\t\t#end\n\t\t#end\n\t}\n\n\tpublic override function readBytes(buf:Bytes, pos:Int, len:Int):Int {\n\t\t#if !neko\n\t\tif (pos < 0 || len < 0 || pos + len > buf.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\t#end\n\t\t#if flash\n\t\tvar avail:Int = b.bytesAvailable;\n\t\tif (len > avail && avail > 0)\n\t\t\tlen = avail;\n\t\ttry\n\t\t\tb.readBytes(buf.getData(), pos, len)\n\t\tcatch (e:Dynamic)\n\t\t\tthrow new Eof();\n\t\t#elseif java\n\t\tvar avail:Int = this.len;\n\t\tif (len > avail)\n\t\t\tlen = avail;\n\t\tif (len == 0)\n\t\t\tthrow new Eof();\n\t\tjava.lang.System.arraycopy(this.b, this.pos, buf.getData(), pos, len);\n\t\tthis.pos += len;\n\t\tthis.len -= len;\n\t\t#elseif cs\n\t\tvar avail:Int = this.len;\n\t\tif (len > avail)\n\t\t\tlen = avail;\n\t\tif (len == 0)\n\t\t\tthrow new Eof();\n\t\tcs.system.Array.Copy(this.b, this.pos, buf.getData(), pos, len);\n\t\tthis.pos += len;\n\t\tthis.len -= len;\n\t\t#else\n\t\tif (this.len == 0 && len > 0)\n\t\t\tthrow new Eof();\n\t\tif (this.len < len)\n\t\t\tlen = this.len;\n\t\t#if neko\n\t\ttry\n\t\t\tuntyped __dollar__sblit(buf.getData(), pos, b, this.pos, len)\n\t\tcatch (e:Dynamic)\n\t\t\tthrow Error.OutsideBounds;\n\t\t#elseif hl\n\t\t@:privateAccess buf.b.blit(pos, b, this.pos, len);\n\t\t#else\n\t\tvar b1 = b;\n\t\tvar b2 = #if js @:privateAccess buf.b #else buf.getData() #end;\n\t\tfor (i in 0...len)\n\t\t\tb2[pos + i] = b1[this.pos + i];\n\t\t#end\n\t\tthis.pos += len;\n\t\tthis.len -= len;\n\t\t#end\n\t\treturn len;\n\t}\n\n\t#if flash\n\t@:dox(hide)\n\toverride function set_bigEndian(e) {\n\t\tbigEndian = e;\n\t\tb.endian = e ? flash.utils.Endian.BIG_ENDIAN : flash.utils.Endian.LITTLE_ENDIAN;\n\t\treturn e;\n\t}\n\n\t@:dox(hide)\n\toverride function readFloat() {\n\t\treturn try b.readFloat() catch (e:Dynamic) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readDouble() {\n\t\treturn try b.readDouble() catch (e:Dynamic) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt8() {\n\t\treturn try b.readByte() catch (e:Dynamic) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt16() {\n\t\treturn try b.readShort() catch (e:Dynamic) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readUInt16():Int {\n\t\treturn try b.readUnsignedShort() catch (e:Dynamic) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt32():Int {\n\t\treturn try b.readInt() catch (e:Dynamic) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readString(len:Int, ?encoding:Encoding) {\n\t\treturn try encoding == RawNative ? b.readMultiByte(len, \"unicode\") : b.readUTFBytes(len) catch (e:Dynamic) throw new Eof();\n\t}\n\t#end\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\nclass StringInput extends BytesInput {\n\tpublic function new(s:String) {\n\t\tsuper(haxe.io.Bytes.ofString(s));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}