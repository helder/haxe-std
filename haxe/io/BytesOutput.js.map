{"sourceRoot":"","names":[],"mappings":"QA8BA;QCLA;QCpBA;;ACmBA;AAAA;CAUC,MAKC;EAAA,SAAI;;CAPL;;;CAcA,aACC;EAAA,AAAO;;CAGR,aAIC;EAAA,eAAU;;CAIX,0BAAsD,CAMrD;EAAA,gBAAW,KAAK,KAAK,KAErB;EAAA,AAAO;;;;;;;;;CAsER,WAMC;EAAA,AAAO","version":3,"file":"BytesOutput.js.map","sources":["../../../../../../../haxe/versions/4.1.3/std/haxe/io/Output.hx","../../../../../../../haxe/versions/4.1.3/std/js/_std/haxe/io/BytesBuffer.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.1.3/std/haxe/io/BytesOutput.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\n/**\n\tAn Output is an abstract write. A specific output implementation will only\n\thave to override the `writeByte` and maybe the `write`, `flush` and `close`\n\tmethods. See `File.write` and `String.write` for two ways of creating an\n\tOutput.\n**/\nclass Output {\n\t/**\n\t\tEndianness (word byte order) used when writing numbers.\n\n\t\tIf `true`, big-endian is used, otherwise `little-endian` is used.\n\t**/\n\tpublic var bigEndian(default, set):Bool;\n\n\t#if java\n\tprivate var helper:java.nio.ByteBuffer;\n\t#end\n\n\t/**\n\t\tWrite one byte.\n\t**/\n\tpublic function writeByte(c:Int):Void {\n\t\tthrow \"Not implemented\";\n\t}\n\n\t/**\n\t\tWrite `len` bytes from `s` starting by position specified by `pos`.\n\n\t\tReturns the actual length of written data that can differ from `len`.\n\n\t\tSee `writeFullBytes` that tries to write the exact amount of specified bytes.\n\t**/\n\tpublic function writeBytes(s:Bytes, pos:Int, len:Int):Int {\n\t\t#if !neko\n\t\tif (pos < 0 || len < 0 || pos + len > s.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\t#end\n\t\tvar b = #if js @:privateAccess s.b #else s.getData() #end;\n\t\tvar k = len;\n\t\twhile (k > 0) {\n\t\t\t#if neko\n\t\t\twriteByte(untyped __dollar__sget(b, pos));\n\t\t\t#elseif php\n\t\t\twriteByte(b.get(pos));\n\t\t\t#elseif cpp\n\t\t\twriteByte(untyped b[pos]);\n\t\t\t#elseif hl\n\t\t\twriteByte(b[pos]);\n\t\t\t#else\n\t\t\twriteByte(untyped b[pos]);\n\t\t\t#end\n\t\t\tpos++;\n\t\t\tk--;\n\t\t}\n\t\treturn len;\n\t}\n\n\t/**\n\t\tFlush any buffered data.\n\t**/\n\tpublic function flush() {}\n\n\t/**\n\t\tClose the output.\n\n\t\tBehaviour while writing after calling this method is unspecified.\n\t**/\n\tpublic function close() {}\n\n\tfunction set_bigEndian(b) {\n\t\tbigEndian = b;\n\t\treturn b;\n\t}\n\n\t/* ------------------ API ------------------ */\n\t/**\n\t\tWrite all bytes stored in `s`.\n\t**/\n\tpublic function write(s:Bytes):Void {\n\t\tvar l = s.length;\n\t\tvar p = 0;\n\t\twhile (l > 0) {\n\t\t\tvar k = writeBytes(s, p, l);\n\t\t\tif (k == 0)\n\t\t\t\tthrow Error.Blocked;\n\t\t\tp += k;\n\t\t\tl -= k;\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `len` bytes from `s` starting by position specified by `pos`.\n\n\t\tUnlike `writeBytes`, this method tries to write the exact `len` amount of bytes.\n\t**/\n\tpublic function writeFullBytes(s:Bytes, pos:Int, len:Int) {\n\t\twhile (len > 0) {\n\t\t\tvar k = writeBytes(s, pos, len);\n\t\t\tpos += k;\n\t\t\tlen -= k;\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 32-bit floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeFloat(x:Float) {\n\t\twriteInt32(FPHelper.floatToI32(x));\n\t}\n\n\t/**\n\t\tWrite `x` as 64-bit double-precision floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeDouble(x:Float) {\n\t\tvar i64 = FPHelper.doubleToI64(x);\n\t\tif (bigEndian) {\n\t\t\twriteInt32(i64.high);\n\t\t\twriteInt32(i64.low);\n\t\t} else {\n\t\t\twriteInt32(i64.low);\n\t\t\twriteInt32(i64.high);\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 8-bit signed integer.\n\t**/\n\tpublic function writeInt8(x:Int) {\n\t\tif (x < -0x80 || x >= 0x80)\n\t\t\tthrow Error.Overflow;\n\t\twriteByte(x & 0xFF);\n\t}\n\n\t/**\n\t\tWrite `x` as 16-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeInt16(x:Int) {\n\t\tif (x < -0x8000 || x >= 0x8000)\n\t\t\tthrow Error.Overflow;\n\t\twriteUInt16(x & 0xFFFF);\n\t}\n\n\t/**\n\t\tWrite `x` as 16-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeUInt16(x:Int) {\n\t\tif (x < 0 || x >= 0x10000)\n\t\t\tthrow Error.Overflow;\n\t\tif (bigEndian) {\n\t\t\twriteByte(x >> 8);\n\t\t\twriteByte(x & 0xFF);\n\t\t} else {\n\t\t\twriteByte(x & 0xFF);\n\t\t\twriteByte(x >> 8);\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 24-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeInt24(x:Int) {\n\t\tif (x < -0x800000 || x >= 0x800000)\n\t\t\tthrow Error.Overflow;\n\t\twriteUInt24(x & 0xFFFFFF);\n\t}\n\n\t/**\n\t\tWrite `x` as 24-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeUInt24(x:Int) {\n\t\tif (x < 0 || x >= 0x1000000)\n\t\t\tthrow Error.Overflow;\n\t\tif (bigEndian) {\n\t\t\twriteByte(x >> 16);\n\t\t\twriteByte((x >> 8) & 0xFF);\n\t\t\twriteByte(x & 0xFF);\n\t\t} else {\n\t\t\twriteByte(x & 0xFF);\n\t\t\twriteByte((x >> 8) & 0xFF);\n\t\t\twriteByte(x >> 16);\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 32-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeInt32(x:Int) {\n\t\tif (bigEndian) {\n\t\t\twriteByte(x >>> 24);\n\t\t\twriteByte((x >> 16) & 0xFF);\n\t\t\twriteByte((x >> 8) & 0xFF);\n\t\t\twriteByte(x & 0xFF);\n\t\t} else {\n\t\t\twriteByte(x & 0xFF);\n\t\t\twriteByte((x >> 8) & 0xFF);\n\t\t\twriteByte((x >> 16) & 0xFF);\n\t\t\twriteByte(x >>> 24);\n\t\t}\n\t}\n\n\t/**\n\t\tInform that we are about to write at least `nbytes` bytes.\n\n\t\tThe underlying implementation can allocate proper working space depending\n\t\ton this information, or simply ignore it. This is not a mandatory call\n\t\tbut a tip and is only used in some specific cases.\n\t**/\n\tpublic function prepare(nbytes:Int) {}\n\n\t/**\n\t\tRead all available data from `i` and write it.\n\n\t\tThe `bufsize` optional argument specifies the size of chunks by\n\t\twhich data is read and written. Its default value is 4096.\n\t**/\n\tpublic function writeInput(i:Input, ?bufsize:Int) {\n\t\tif (bufsize == null)\n\t\t\tbufsize = 4096;\n\t\tvar buf = Bytes.alloc(bufsize);\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tvar len = i.readBytes(buf, 0, bufsize);\n\t\t\t\tif (len == 0)\n\t\t\t\t\tthrow Error.Blocked;\n\t\t\t\tvar p = 0;\n\t\t\t\twhile (len > 0) {\n\t\t\t\t\tvar k = writeBytes(buf, p, len);\n\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\tthrow Error.Blocked;\n\t\t\t\t\tp += k;\n\t\t\t\t\tlen -= k;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e:Eof) {}\n\t}\n\n\t/**\n\t\tWrite `s` string.\n\t**/\n\tpublic function writeString(s:String, ?encoding:Encoding) {\n\t\t#if neko\n\t\tvar b = untyped new Bytes(s.length, s.__s);\n\t\t#else\n\t\tvar b = Bytes.ofString(s, encoding);\n\t\t#end\n\t\twriteFullBytes(b, 0, b.length);\n\t}\n\n\t#if neko\n\tstatic function __init__()\n\t\tuntyped {\n\t\t\tOutput.prototype.bigEndian = false;\n\t\t}\n\t#end\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\n@:coreApi\nclass BytesBuffer {\n\tvar buffer:js.lib.ArrayBuffer;\n\tvar view:js.lib.DataView;\n\tvar u8:js.lib.Uint8Array;\n\tvar pos:Int;\n\tvar size:Int;\n\n\tpublic var length(get, never):Int;\n\n\tpublic function new() {\n\t\tpos = 0;\n\t\tsize = 0;\n\t}\n\n\tinline function get_length():Int {\n\t\treturn pos;\n\t}\n\n\tpublic function addByte(byte:Int):Void {\n\t\tif (pos == size)\n\t\t\tgrow(1);\n\t\tview.setUint8(pos++, byte);\n\t}\n\n\tpublic function add(src:Bytes):Void {\n\t\tif (pos + src.length > size)\n\t\t\tgrow(src.length);\n\t\tif (size == 0)\n\t\t\treturn;\n\t\tvar sub = new js.lib.Uint8Array(@:privateAccess src.b.buffer, @:privateAccess src.b.byteOffset, src.length);\n\t\tu8.set(sub, pos);\n\t\tpos += src.length;\n\t}\n\n\tpublic function addString(v:String, ?encoding:Encoding):Void {\n\t\tadd(Bytes.ofString(v, encoding));\n\t}\n\n\tpublic function addInt32(v:Int):Void {\n\t\tif (pos + 4 > size)\n\t\t\tgrow(4);\n\t\tview.setInt32(pos, v, true);\n\t\tpos += 4;\n\t}\n\n\tpublic function addInt64(v:haxe.Int64):Void {\n\t\tif (pos + 8 > size)\n\t\t\tgrow(8);\n\t\tview.setInt32(pos, v.low, true);\n\t\tview.setInt32(pos + 4, v.high, true);\n\t\tpos += 8;\n\t}\n\n\tpublic function addFloat(v:Float):Void {\n\t\tif (pos + 4 > size)\n\t\t\tgrow(4);\n\t\tview.setFloat32(pos, v, true);\n\t\tpos += 4;\n\t}\n\n\tpublic function addDouble(v:Float):Void {\n\t\tif (pos + 8 > size)\n\t\t\tgrow(8);\n\t\tview.setFloat64(pos, v, true);\n\t\tpos += 8;\n\t}\n\n\tpublic function addBytes(src:Bytes, pos:Int, len:Int):Void {\n\t\tif (pos < 0 || len < 0 || pos + len > src.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (this.pos + len > size)\n\t\t\tgrow(len);\n\t\tif (size == 0)\n\t\t\treturn;\n\t\tvar sub = new js.lib.Uint8Array(@:privateAccess src.b.buffer, @:privateAccess src.b.byteOffset + pos, len);\n\t\tu8.set(sub, this.pos);\n\t\tthis.pos += len;\n\t}\n\n\tfunction grow(delta:Int):Void {\n\t\tvar req = pos + delta;\n\t\tvar nsize = size == 0 ? 16 : size;\n\t\twhile (nsize < req)\n\t\t\tnsize = (nsize * 3) >> 1;\n\t\tvar nbuf = new js.lib.ArrayBuffer(nsize);\n\t\tvar nu8 = new js.lib.Uint8Array(nbuf);\n\t\tif (size > 0)\n\t\t\tnu8.set(u8);\n\t\tsize = nsize;\n\t\tbuffer = nbuf;\n\t\tu8 = nu8;\n\t\tview = new js.lib.DataView(buffer);\n\t}\n\n\tpublic function getBytes():Bytes@:privateAccess {\n\t\tif (size == 0)\n\t\t\treturn haxe.io.Bytes.alloc(0);\n\t\tvar b = new Bytes(buffer);\n\t\tb.length = pos;\n\t\treturn b;\n\t}\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\nclass BytesOutput extends Output {\n\t#if flash\n\tvar b:flash.utils.ByteArray;\n\t#else\n\tvar b:BytesBuffer;\n\t#end\n\n\t/** The length of the stream in bytes. **/\n\tpublic var length(get, never):Int;\n\n\tpublic function new() {\n\t\t#if flash\n\t\tb = new flash.utils.ByteArray();\n\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t#else\n\t\tb = new BytesBuffer();\n\t\t#end\n\t\t#if python\n\t\tbigEndian = false;\n\t\t#end\n\t}\n\n\tinline function get_length():Int {\n\t\treturn b.length;\n\t}\n\n\toverride function writeByte(c) {\n\t\t#if flash\n\t\tb.writeByte(c);\n\t\t#else\n\t\tb.addByte(c);\n\t\t#end\n\t}\n\n\toverride function writeBytes(buf:Bytes, pos, len):Int {\n\t\t#if flash\n\t\tif (pos < 0 || len < 0 || pos + len > buf.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tb.writeBytes(buf.getData(), pos, len);\n\t\t#else\n\t\tb.addBytes(buf, pos, len);\n\t\t#end\n\t\treturn len;\n\t}\n\n\t#if flash\n\t// optimized operations\n\n\t@:dox(hide)\n\toverride function set_bigEndian(e) {\n\t\tbigEndian = e;\n\t\tb.endian = e ? flash.utils.Endian.BIG_ENDIAN : flash.utils.Endian.LITTLE_ENDIAN;\n\t\treturn e;\n\t}\n\n\t@:dox(hide)\n\toverride function writeFloat(f:Float) {\n\t\tb.writeFloat(f);\n\t}\n\n\t@:dox(hide)\n\toverride function writeDouble(f:Float) {\n\t\tb.writeDouble(f);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt8(x:Int) {\n\t\tif (x < -0x80 || x >= 0x80)\n\t\t\tthrow Error.Overflow;\n\t\tb.writeByte(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt16(x:Int) {\n\t\tif (x < -0x8000 || x >= 0x8000)\n\t\t\tthrow Error.Overflow;\n\t\tb.writeShort(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeUInt16(x:Int) {\n\t\tif (x < 0 || x >= 0x10000)\n\t\t\tthrow Error.Overflow;\n\t\tb.writeShort(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt32(x:Int) {\n\t\tb.writeInt(x);\n\t}\n\n\t@:dox(hide)\n\toverride function prepare(size:Int) {\n\t\tif (size > 0)\n\t\t\tb[size - 1] = b[size - 1];\n\t}\n\n\t@:dox(hide)\n\toverride function writeString(s:String, ?encoding:Encoding) {\n\t\tif (encoding == RawNative)\n\t\t\tb.writeMultiByte(s, \"unicode\");\n\t\telse\n\t\t\tb.writeUTFBytes(s);\n\t}\n\t#end\n\n\t/**\n\t\tReturns the `Bytes` of this output.\n\n\t\tThis function should not be called more than once on a given\n\t\t`BytesOutput` instance.\n\t**/\n\tpublic function getBytes():Bytes {\n\t\t#if flash\n\t\tvar bytes = b;\n\t\tb = null;\n\t\treturn untyped new Bytes(bytes.length, bytes);\n\t\t#else\n\t\treturn b.getBytes();\n\t\t#end\n\t}\n}\n"]}