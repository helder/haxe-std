{"sourceRoot":"","names":[],"mappings":"QAyBA;;ACDA,8BCWO;;ADRP;CACC,0BEgCmC;CF9BnC,wBE8BmC;CF7BnC,sBGAM;QHEN,eE2BmC,SDzB7B;QDMN,gBCNM,cEJA;QHcQ,WCVR,oBCyB6B;QFXrB,WCdR,oBCyB6B;QFPnC,WClBM,oBCyB6B,iBAsBpC,OAtBoC,SDzB7B;QDsBN,gBCtBM,qBC+CP,OAtBoC,cAsBpC,OAtBoC,SDzB7B;QD0BN,eC1BM;QD8BN,YC9BM;QDkCN,aI5CM,AFmC6B,iCAsBpC,OAtBoC,SDzB7B;QD+CN,iBDzDD,iBGmCoC,iBAsBpC,OAtBoC,SDzB7B","version":3,"file":"UInt32Array.d.ts.map","sources":["../../../../../../../haxe/versions/4.1.1/std/js/_std/haxe/io/Bytes.hx","../../../../../../../haxe/versions/4.1.1/std/js/_std/haxe/io/UInt32Array.hx","../../../../../../../haxe/versions/4.1.1/std/js/lib/Uint32Array.hx","../../../../../../../haxe/versions/4.1.1/std/StdTypes.hx","../../../../../../../haxe/versions/4.1.1/std/js/lib/ArrayBufferView.hx","../../../../../../../haxe/versions/4.1.1/std/js/_std/Array.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\n@:coreApi\nclass Bytes {\n\tpublic var length(default, null):Int;\n\n\tvar b:js.lib.Uint8Array;\n\tvar data:js.lib.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.lib.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get(pos:Int):Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set(pos:Int, v:Int):Void {\n\t\tb[pos] = v;\n\t}\n\n\tpublic function blit(pos:Int, src:Bytes, srcpos:Int, len:Int):Void {\n\t\tif (pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (srcpos == 0 && len == src.b.byteLength)\n\t\t\tb.set(src.b, pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos, srcpos + len), pos);\n\t}\n\n\tpublic function fill(pos:Int, len:Int, value:Int):Void {\n\t\tfor (i in 0...len)\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub(pos:Int, len:Int):Bytes {\n\t\tif (pos < 0 || len < 0 || pos + len > length)\n\t\t\tthrow Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos + b.byteOffset, pos + b.byteOffset + len));\n\t}\n\n\tpublic function compare(other:Bytes):Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor (i in 0...len)\n\t\t\tif (b1[i] != b2[i])\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData():Void {\n\t\tif (data == null)\n\t\t\tdata = new js.lib.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble(pos:Int):Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat(pos:Int):Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble(pos:Int, v:Float):Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat(pos:Int, v:Float):Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16(pos:Int):Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16(pos:Int, v:Int):Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32(pos:Int):Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32(pos:Int, v:Int):Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64(pos:Int):haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4), getInt32(pos));\n\t}\n\n\tpublic function setInt64(pos:Int, v:haxe.Int64):Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString(pos:Int, len:Int, ?encoding:Encoding):String {\n\t\tif (pos < 0 || len < 0 || pos + len > length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (encoding == null)\n\t\t\tencoding = UTF8;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar i = pos;\n\t\tvar max = pos + len;\n\t\tswitch (encoding) {\n\t\t\tcase UTF8:\n\t\t\t\tvar debug = pos > 0;\n\t\t\t\t// utf8-decode and utf16-encode\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c = b[i++];\n\t\t\t\t\tif (c < 0x80) {\n\t\t\t\t\t\tif (c == 0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t\t} else if (c < 0xE0)\n\t\t\t\t\t\ts += String.fromCharCode(((c & 0x3F) << 6) | (b[i++] & 0x7F));\n\t\t\t\t\telse if (c < 0xF0) {\n\t\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\t\ts += String.fromCharCode(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\t\tvar c3 = b[i++];\n\t\t\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t\t\ts += String.fromCharCode(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase RawNative:\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c = b[i++] | (b[i++] << 8);\n\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString():String {\n\t\treturn getString(0, length);\n\t}\n\n\tpublic function toHex():String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor (i in 0...str.length)\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor (i in 0...length) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData():BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static inline function alloc(length:Int):Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString(s:String, ?encoding:Encoding):Bytes {\n\t\tif (encoding == RawNative) {\n\t\t\tvar buf = new js.lib.Uint8Array(s.length << 1);\n\t\t\tfor (i in 0...s.length) {\n\t\t\t\tvar c:Int = StringTools.fastCodeAt(s, i);\n\t\t\t\tbuf[i << 1] = c & 0xFF;\n\t\t\t\tbuf[(i << 1) | 1] = c >> 8;\n\t\t\t}\n\t\t\treturn new Bytes(buf.buffer);\n\t\t}\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile (i < s.length) {\n\t\t\tvar c:Int = StringTools.fastCodeAt(s, i++);\n\t\t\t// surrogate pair\n\t\t\tif (0xD800 <= c && c <= 0xDBFF)\n\t\t\t\tc = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s, i++) & 0x3FF);\n\t\t\tif (c <= 0x7F)\n\t\t\t\ta.push(c);\n\t\t\telse if (c <= 0x7FF) {\n\t\t\t\ta.push(0xC0 | (c >> 6));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t} else if (c <= 0xFFFF) {\n\t\t\t\ta.push(0xE0 | (c >> 12));\n\t\t\t\ta.push(0x80 | ((c >> 6) & 63));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t} else {\n\t\t\t\ta.push(0xF0 | (c >> 18));\n\t\t\t\ta.push(0x80 | ((c >> 12) & 63));\n\t\t\t\ta.push(0x80 | ((c >> 6) & 63));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData(b:BytesData):Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif (hb != null)\n\t\t\treturn hb;\n\t\treturn new Bytes(b);\n\t}\n\n\tpublic static function ofHex(s:String):Bytes {\n\t\tif ((s.length & 1) != 0)\n\t\t\tthrow \"Not a hex string (odd number of digits)\";\n\t\tvar a = new Array();\n\t\tvar i = 0;\n\t\tvar len = s.length >> 1;\n\t\twhile (i < len) {\n\t\t\tvar high = StringTools.fastCodeAt(s, i * 2);\n\t\t\tvar low = StringTools.fastCodeAt(s, i * 2 + 1);\n\t\t\thigh = (high & 0xF) + ((high & 0x40) >> 6) * 9;\n\t\t\tlow = (low & 0xF) + ((low & 0x40) >> 6) * 9;\n\t\t\ta.push(((high << 4) | low) & 0xFF);\n\t\t\ti++;\n\t\t}\n\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic inline static function fastGet(b:BytesData, pos:Int):Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\ntypedef UInt32ArrayData = js.lib.Uint32Array;\n\n@:coreApi\nabstract UInt32Array(UInt32ArrayData) {\n\tpublic static inline var BYTES_PER_ELEMENT = 4;\n\n\tpublic var length(get, never):Int;\n\tpublic var view(get, never):ArrayBufferView;\n\n\tpublic inline function new(elements:Int) {\n\t\tthis = new UInt32ArrayData(elements);\n\t}\n\n\tinline function get_length():Int {\n\t\treturn this.length;\n\t}\n\n\tpublic inline function get_view():ArrayBufferView {\n\t\treturn ArrayBufferView.fromData(this);\n\t}\n\n\t@:arrayAccess public inline function get(index:Int):UInt {\n\t\treturn this[index];\n\t}\n\n\t@:arrayAccess public inline function set(index:Int, value:UInt):UInt {\n\t\treturn this[index] = value;\n\t}\n\n\tpublic inline function sub(begin:Int, ?length:Int):UInt32Array {\n\t\treturn fromData(this.subarray(begin, length == null ? this.length : begin + length));\n\t}\n\n\tpublic inline function subarray(?begin:Int, ?end:Int):UInt32Array {\n\t\treturn fromData(this.subarray(begin, end));\n\t}\n\n\tpublic inline function getData():UInt32ArrayData {\n\t\treturn this;\n\t}\n\n\tpublic static inline function fromData(d:UInt32ArrayData):UInt32Array {\n\t\treturn cast d;\n\t}\n\n\tpublic static function fromArray(a:Array<UInt>, pos:Int = 0, ?length:Int):UInt32Array {\n\t\tif (length == null)\n\t\t\tlength = a.length - pos;\n\t\tif (pos < 0 || length < 0 || pos + length > a.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (pos == 0 && length == a.length)\n\t\t\treturn fromData(new UInt32ArrayData(a));\n\t\tvar i = new UInt32Array(a.length);\n\t\tfor (idx in 0...length)\n\t\t\ti[idx] = a[idx + pos];\n\t\treturn i;\n\t}\n\n\tpublic static function fromBytes(bytes:haxe.io.Bytes, bytePos:Int = 0, ?length:Int):UInt32Array {\n\t\tif (length == null)\n\t\t\tlength = (bytes.length - bytePos) >> 2;\n\t\treturn fromData(new UInt32ArrayData(bytes.getData(), bytePos, length));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\nimport js.lib.intl.NumberFormat.NumberFormatOptions;\n\n/**\n\tThe `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform\n\tbyte order. If control over byte order is needed, use `DataView` instead. The contents are\n\tinitialized to `0`. Once established, you can reference elements in the array using the object's\n\tmethods, or using standard array index syntax (that is, using bracket notation).\n\n\tDocumentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Uint32Array\")\nextern class Uint32Array implements ArrayBufferView implements ArrayAccess<Int> {\n\t/**\n\t\tReturns a number value of the element size. 4 in the case of an `Uint32Array`.\n\t */\n\tstatic final BYTES_PER_ELEMENT:Int;\n\n\t/**\n\t\tCreates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\t */\n\t@:overload(function(source:{}, ?mapFn:(value:Int) -> Int, ?thisArg:Any):Uint32Array {})\n\t@:pure static function from(source:{}, ?mapFn:(value:Int, index:Int) -> Int, ?thisArg:Any):Uint32Array;\n\n\t/**\n\t\tCreates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).\n\t */\n\t@:pure static function of(elements:haxe.extern.Rest<Dynamic>):Uint32Array;\n\n\t/**\n\t\tReturns a number value of the element size.\n\t */\n\t@:native(\"BYTES_PER_ELEMENT\")\n\tfinal BYTES_PER_ELEMENT_:Int;\n\n\t/**\n\t\tReturns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.\n\t */\n\tfinal buffer:ArrayBuffer;\n\n\t/**\n\t\tReturns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.\n\t */\n\tfinal byteLength:Int;\n\n\t/**\n\t\tReturns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.\n\t */\n\tfinal byteOffset:Int;\n\n\t/**\n\t\tReturns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.\n\t */\n\tfinal length:Int;\n\n\t/** @throws DOMError */\n\t@:overload(function(length:Int):Void {})\n\t@:overload(function(object:{}):Void {})\n\t@:pure function new(buffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Void;\n\n\t/**\n\t\tCopies a sequence of array elements within the array.\n\t\tSee also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).\n\t */\n\tfunction copyWithin(target:Int, start:Int, ?end:Int):Uint32Array;\n\n\t/**\n\t\tReturns a new Array Iterator object that contains the key/value pairs for each index in the array.\n\t\tSee also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).\n\t */\n\t@:pure function entries():js.lib.Iterator<KeyValue<Int, Int>>;\n\n\t/**\n\t\tTests whether all elements in the array pass the test provided by a function.\n\t\tSee also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\t */\n\t@:overload(function(callback:(currentValue:Int) -> Bool, ?thisArg:Any):Bool {})\n\t@:overload(function(callback:(currentValue:Int, index:Int) -> Bool, ?thisArg:Any):Bool {})\n\tfunction every(callback:(currentValue:Int, index:Int, array:Uint32Array) -> Bool, ?thisArg:Any):Bool;\n\n\t/**\n\t\tFills all the elements of an array from a start index to an end index with a static value.\n\t\tSee also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).\n\t */\n\tfunction fill(value:Int, ?start:Int, ?end:Int):Uint32Array;\n\n\t/**\n\t\tCreates a new array with all of the elements of this array for which the provided filtering function returns true.\n\t\tSee also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\t */\n\t@:overload(function(callback:(element:Int) -> Bool, ?thisArg:Any):Uint32Array {})\n\t@:overload(function(callback:(element:Int, index:Int) -> Bool, ?thisArg:Any):Uint32Array {})\n\tfunction filter(callback:(element:Int, index:Int, array:Uint32Array) -> Bool, ?thisArg:Any):Uint32Array;\n\n\t/**\n\t\tReturns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.\n\t\tSee also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\t */\n\t@:overload(function(callback:(element:Int) -> Bool, ?thisArg:Any):Null<Int> {})\n\t@:overload(function(callback:(element:Int, index:Int) -> Bool, ?thisArg:Any):Null<Int> {})\n\tfunction find(callback:(element:Int, index:Int, array:Uint32Array) -> Bool, ?thisArg:Any):Null<Int>;\n\n\t/**\n\t\tReturns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.\n\t\tSee also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).\n\t */\n\t@:overload(function(callback:(element:Int) -> Bool, ?thisArg:Any):Int {})\n\t@:overload(function(callback:(element:Int, index:Int) -> Bool, ?thisArg:Any):Int {})\n\tfunction findIndex(callback:(element:Int, index:Int, array:Uint32Array) -> Bool, ?thisArg:Any):Int;\n\n\t/**\n\t\tCalls a function for each element in the array.\n\t\tSee also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n\t */\n\t@:overload(function(callback:(element:Int) -> Void, ?thisArg:Any):Void {})\n\t@:overload(function(callback:(element:Int, index:Int) -> Void, ?thisArg:Any):Void {})\n\tfunction forEach(callback:(element:Int, index:Int, array:Uint32Array) -> Void, ?thisArg:Any):Void;\n\n\t/**\n\t\tDetermines whether a typed array includes a certain element, returning true or false as appropriate.\n\t\tSee also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).\n\t */\n\t@:pure function includes(searchElement:Int, ?fromIndex:Int):Bool;\n\n\t/**\n\t\tReturns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\n\t\tSee also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).\n\t */\n\t@:pure function indexOf(searchElement:Int, ?fromIndex:Int):Int;\n\n\t/**\n\t\tJoins all elements of an array into a string.\n\t\tSee also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).\n\t */\n\t@:pure function join(?separator:String):String;\n\n\t/**\n\t\tReturns a new Array Iterator that contains the keys for each index in the array.\n\t\tSee also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).\n\t */\n\t@:pure function keys():js.lib.Iterator<Int>;\n\n\t/**\n\t\tReturns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\t\tSee also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).\n\t */\n\t@:pure function lastIndexOf(searchElement:Int, ?fromIndex:Int):Int;\n\n\t/**\n\t\tCreates a new array with the results of calling a provided function on every element in this array.\n\t\tSee also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t */\n\t@:overload(function(callback:(element:Int) -> Int, ?thisArg:Any):Uint32Array {})\n\t@:overload(function(callback:(element:Int, index:Int) -> Int, ?thisArg:Any):Uint32Array {})\n\tfunction map(callback:(element:Int, index:Int, array:Uint32Array) -> Int, ?thisArg:Any):Uint32Array;\n\n\t/**\n\t\tApply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.\n\t\tSee also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\t */\n\t@:overload(function<T>(callback:(previousValue:T, currentValue:Int) -> T, initialValue:T):T {})\n\t@:overload(function<T>(callback:(previousValue:T, currentValue:Int, index:Int) -> T, initialValue:T):T {})\n\t@:overload(function(callbackfn:(previousValue:Int, currentValue:Int) -> Int):Int {})\n\t@:overload(function(callbackfn:(previousValue:Int, currentValue:Int, index:Int) -> Int):Int {})\n\t@:overload(function(callbackfn:(previousValue:Int, currentValue:Int, index:Int, array:Uint32Array) -> Int):Int {})\n\tfunction reduce<T>(callback:(previousValue:T, currentValue:Int, index:Int, array:Uint32Array) -> T, initialValue:T):T;\n\n\t/**\n\t\tApply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.\n\t\tSee also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).\n\t */\n\t@:overload(function<T>(callback:(previousValue:T, currentValue:Int) -> T, initialValue:T):T {})\n\t@:overload(function<T>(callback:(previousValue:T, currentValue:Int, index:Int) -> T, initialValue:T):T {})\n\t@:overload(function(callbackfn:(previousValue:Int, currentValue:Int) -> Int):Int {})\n\t@:overload(function(callbackfn:(previousValue:Int, currentValue:Int, index:Int) -> Int):Int {})\n\t@:overload(function(callbackfn:(previousValue:Int, currentValue:Int, index:Int, array:Uint32Array) -> Int):Int {})\n\tfunction reduceRight<T>(callback:(previousValue:T, currentValue:Int, index:Int, array:Uint32Array) -> T, initialValue:T):T;\n\n\t/**\n\t\tReverses the order of the elements of an array — the first becomes the last, and the last becomes the first.\n\t\tSee also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).\n\t */\n\tfunction reverse():Uint32Array;\n\n\t/**\n\t\tStores multiple values in the typed array, reading input values from a specified array.\n\t */\n\t@:overload(function(array:Int8Array, ?offset:Int):Void {})\n\t@:overload(function(array:Uint8Array, ?offset:Int):Void {})\n\t@:overload(function(array:Uint8ClampedArray, ?offset:Int):Void {})\n\t@:overload(function(array:Int16Array, ?offset:Int):Void {})\n\t@:overload(function(array:Uint16Array, ?offset:Int):Void {})\n\t@:overload(function(array:Int32Array, ?offset:Int):Void {})\n\t@:overload(function(array:Uint32Array, ?offset:Int):Void {})\n\t@:overload(function(array:Float32Array, ?offset:Int):Void {})\n\t@:overload(function(array:Float64Array, ?offset:Int):Void {})\n\tfunction set(array:Array<Int>, ?offset:Int):Void;\n\n\t/**\n\t\tExtracts a section of an array and returns a new array.\n\t\tSee also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\t */\n\t@:pure function slice(?start:Int, ?end:Int):Uint32Array;\n\n\t/**\n\t\tReturns true if at least one element in this array satisfies the provided testing function.\n\t\tSee also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\t */\n\t@:overload(function(callback:(element:Int) -> Bool, ?thisArg:Any):Bool {})\n\t@:overload(function(callback:(element:Int, index:Int) -> Bool, ?thisArg:Any):Bool {})\n\tfunction some(callback:(element:Int, index:Int, array:Uint32Array) -> Bool, ?thisArg:Any):Bool;\n\n\t/**\n\t\tSorts the elements of an array in place and returns the array.\n\t\tSee also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\t */\n\tfunction sort(?compareFn:(x:Int, y:Int) -> Int):Uint32Array;\n\n\t/**\n\t\tReturns a new TypedArray from the given start and end element index.\n\t */\n\t@:pure function subarray(?begin:Int, ?end:Int):Uint32Array;\n\n\t/**\n\t\tReturns a new Array Iterator object that contains the values for each index in the array.\n\t\tSee also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).\n\t */\n\t@:pure function values():js.lib.Iterator<Int>;\n\n\t/**\n\t\tReturns a string representing the array and its elements.\n\t\tSee also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).\n\t */\n\t@:pure function toLocaleString(?locales:String, ?options:NumberFormatOptions):String;\n\n\t/**\n\t\tReturns a string representing the array and its elements.\n\t\tSee also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).\n\t */\n\t@:pure function toString():String;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n/**\n\t`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:\n\n\tDocumentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>\n**/\nextern interface ArrayBufferView {\n\tfinal buffer:ArrayBuffer;\n\tfinal byteOffset:Int;\n\tfinal byteLength:Int;\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n"]}