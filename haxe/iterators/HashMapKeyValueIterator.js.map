{"sourceRoot":"","names":[],"mappings":"QAIA;QCCA;;ACDA;AAAA;CAIC,SAA8C,CAC7C;EAAA,WAAW,IACX;EAAA,YAAY;;;;;;CAMb,UACC;EAAA,AAAO;;;;;;CAMR,OAA+C,CAC9C;EAAA,UAAU,iBACK;EAAA;EAAA,WAAQ,eAAvB;EAAA,AAAO,QAAQ,+BAAmB","version":3,"file":"HashMapKeyValueIterator.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/util/EsMap.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.1.4/std/haxe/iterators/HashMapKeyValueIterator.hx"],"sourcesContent":["package genes.util;\n\nimport js.lib.Map;\n\nclass EsMap<K, V> {\n  var inst: Map<K, V>;\n\n  public inline function new()\n    inst = new Map();\n\n  public inline function set(key: K, value: V): Void\n    inst.set(key, value);\n\n  public inline function get(key: K): Null<V>\n    return inst.get(key);\n\n  public inline function remove(key: K): Bool\n    return inst.delete(key);\n\n  public inline function exists(key: K): Bool\n    return inst.has(key);\n\n  public inline function keys(): Iterator<K>\n    return adaptIterator(inst.keys());\n\n  public inline function iterator(): Iterator<V>\n    return adaptIterator(inst.values());\n\n  public inline function toString(): String {\n    return \"{\" + [for (key in keys()) '$key => ${get(key)}'].join(', ') + \"}\";\n  }\n\n  static function adaptIterator<T>(from: js.lib.Iterator<T>): Iterator<T> {\n    var value: T;\n    var done: Bool;\n    function queue() {\n      var data = from.next();\n      value = data.value;\n      done = data.done;\n    }\n    return {\n      hasNext: () -> {\n        if (done == null)\n          queue();\n        return !done;\n      },\n      next: () -> {\n        if (done == null)\n          queue();\n        var pending = value;\n        queue();\n        return pending;\n      }\n    }\n  }\n\n  public function clear() {\n    inst.clear();\n  }\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","package haxe.iterators;\n\nimport haxe.ds.HashMap;\n\nclass HashMapKeyValueIterator<K:{function hashCode():Int;}, V> {\n\tfinal map:HashMap<K, V>;\n\tfinal keys:Iterator<K>;\n\n\tpublic inline function new(map:HashMap<K, V>) {\n\t\tthis.map = map;\n\t\tthis.keys = map.keys();\n\t}\n\n\t/**\n\t\tSee `Iterator.hasNext`\n\t**/\n\tpublic inline function hasNext():Bool {\n\t\treturn keys.hasNext();\n\t}\n\n\t/**\n\t\tSee `Iterator.next`\n\t**/\n\tpublic inline function next():{key:K, value:V} {\n\t\tvar key = keys.next();\n\t\treturn {value: map.get(key), key: key};\n\t}\n}\n"]}