{"sourceRoot":"","names":[],"mappings":"QA2BA;QCIA;QCDA;QCTU;;yBCOF;aACP,0BCRgB;oCDOT;aAIP,4BCXgB;sCDOT;aAOP,+BCdgB,gBJUjB,KGHQ;8BCPS,gBJUjB,KGHQ;aAGP,8CAHO;;aAMP,oDANO;;aAEP;6CAFO;aAKP,4BHFD,KGHQ;2BHGR,KGHQ;;;;gBACP;gBAGA;gBAGA;gBAJA;gBAGA;gBAJA;gBAGA;;YAKO,SAGP,GEhBM,ADJU,UDmBhB,GCnBgB,QDkBhB,GGsDmC;;YHjD5B,aAEP,GCzBgB,QDwBhB,GGgDmC;;AHrCpC;;;;;;;;CAgCC,iBCnEgB;;;;;;;;;;;;;;;;;;CD0FhB,+BG7BD,aF7DiB;CD8ChB","version":3,"file":"Template.d.ts.map","sources":["../../../../../../haxe/versions/4.1.3/std/haxe/iterators/ArrayIterator.hx","../../../../../../haxe/versions/4.1.3/std/haxe/ds/List.hx","../../../../../../haxe/versions/4.1.3/std/StringBuf.hx","../../../../../../haxe/versions/4.1.3/std/js/_std/EReg.hx","../../../../../../haxe/versions/4.1.3/std/haxe/Template.hx","../../../../../../haxe/versions/4.1.3/std/js/_std/String.hx","../../../../../../haxe/versions/4.1.3/std/js/_std/Array.hx","../../../../../../haxe/versions/4.1.3/std/StdTypes.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2018 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.iterators;\n\n/**\n\tThis iterator is used only when `Array<T>` is passed to `Iterable<T>`\n**/\nclass ArrayIterator<T> {\n\tfinal array:Array<T>;\n\tvar current:Int = 0;\n\n\t/**\n\t\tCreate a new `ArrayIterator`.\n\t**/\n\t#if !hl inline #end\n\tpublic function new(array:Array<T>) {\n\t\tthis.array = array;\n\t}\n\n\t/**\n\t\tSee `Iterator.hasNext`\n\t**/\n\t#if !hl inline #end\n\tpublic function hasNext() {\n\t\treturn current < array.length;\n\t}\n\n\t/**\n\t\tSee `Iterator.next`\n\t**/\n\t#if !hl inline #end\n\tpublic function next() {\n\t\treturn array[current++];\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tA linked-list of elements. The list is composed of element container objects\n\tthat are chained together. It is optimized so that adding or removing an\n\telement does not imply copying the whole list content every time.\n\n\t@see https://haxe.org/manual/std-List.html\n**/\nclass List<T> {\n\tprivate var h:ListNode<T>;\n\tprivate var q:ListNode<T>;\n\n\t/**\n\t\tThe length of `this` List.\n\t**/\n\tpublic var length(default, null):Int;\n\n\t/**\n\t\tCreates a new empty list.\n\t**/\n\tpublic function new() {\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tAdds element `item` at the end of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function add(item:T) {\n\t\tvar x = ListNode.create(item, null);\n\t\tif (h == null)\n\t\t\th = x;\n\t\telse\n\t\t\tq.next = x;\n\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tAdds element `item` at the beginning of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function push(item:T) {\n\t\tvar x = ListNode.create(item, h);\n\t\th = x;\n\t\tif (q == null)\n\t\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function first():Null<T> {\n\t\treturn if (h == null) null else h.item;\n\t}\n\n\t/**\n\t\tReturns the last element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function last():Null<T> {\n\t\treturn if (q == null) null else q.item;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThe element is removed from `this` List.\n\t**/\n\tpublic function pop():Null<T> {\n\t\tif (h == null)\n\t\t\treturn null;\n\t\tvar x = h.item;\n\t\th = h.next;\n\t\tif (h == null)\n\t\t\tq = null;\n\t\tlength--;\n\t\treturn x;\n\t}\n\n\t/**\n\t\tTells if `this` List is empty.\n\t**/\n\tpublic function isEmpty():Bool {\n\t\treturn (h == null);\n\t}\n\n\t/**\n\t\tEmpties `this` List.\n\n\t\tThis function does not traverse the elements, but simply sets the\n\t\tinternal references to null and `this.length` to 0.\n\t**/\n\tpublic function clear():Void {\n\t\th = null;\n\t\tq = null;\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tRemoves the first occurrence of `v` in `this` List.\n\n\t\tIf `v` is found by checking standard equality, it is removed from `this`\n\t\tList and the function returns true.\n\n\t\tOtherwise, false is returned.\n\t**/\n\tpublic function remove(v:T):Bool {\n\t\tvar prev:ListNode<T> = null;\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tif (l.item == v) {\n\t\t\t\tif (prev == null)\n\t\t\t\t\th = l.next;\n\t\t\t\telse\n\t\t\t\t\tprev.next = l.next;\n\t\t\t\tif (q == l)\n\t\t\t\t\tq = prev;\n\t\t\t\tlength--;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l.next;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tReturns an iterator on the elements of the list.\n\t**/\n\tpublic inline function iterator():ListIterator<T> {\n\t\treturn new ListIterator<T>(h);\n\t}\n\n\t/**\n\t\tReturns an iterator of the List indices and values.\n\t**/\n\t@:pure @:runtime public inline function keyValueIterator():ListKeyValueIterator<T> {\n\t\treturn new ListKeyValueIterator(h);\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List.\n\n\t\tThe result is enclosed in { } with the individual elements being\n\t\tseparated by a comma.\n\t**/\n\tpublic function toString() {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\ts.add(\"{\");\n\t\twhile (l != null) {\n\t\t\tif (first)\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(\", \");\n\t\t\ts.add(Std.string(l.item));\n\t\t\tl = l.next;\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List, with `sep` separating\n\t\teach element.\n\t**/\n\tpublic function join(sep:String) {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tif (first)\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(sep);\n\t\t\ts.add(l.item);\n\t\t\tl = l.next;\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a list filtered with `f`. The returned list will contain all\n\t\telements for which `f(x) == true`.\n\t**/\n\tpublic function filter(f:T->Bool) {\n\t\tvar l2 = new List();\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tif (f(v))\n\t\t\t\tl2.add(v);\n\t\t}\n\t\treturn l2;\n\t}\n\n\t/**\n\t\tReturns a new list where all elements have been converted by the\n\t\tfunction `f`.\n\t**/\n\tpublic function map<X>(f:T->X):List<X> {\n\t\tvar b = new List();\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tb.add(f(v));\n\t\t}\n\t\treturn b;\n\t}\n}\n\n#if neko\nprivate extern class ListNode<T> extends neko.NativeArray<Dynamic> {\n\tvar item(get, set):T;\n\tvar next(get, set):ListNode<T>;\n\tprivate inline function get_item():T\n\t\treturn this[0];\n\tprivate inline function set_item(v:T):T\n\t\treturn this[0] = v;\n\tprivate inline function get_next():ListNode<T>\n\t\treturn this[1];\n\tprivate inline function set_next(v:ListNode<T>):ListNode<T>\n\t\treturn this[1] = v;\n\tinline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn untyped __dollar__array(item, next);\n\t}\n}\n#else\nprivate class ListNode<T> {\n\tpublic var item:T;\n\tpublic var next:ListNode<T>;\n\n\tpublic function new(item:T, next:ListNode<T>) {\n\t\tthis.item = item;\n\t\tthis.next = next;\n\t}\n\n\textern public inline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn new ListNode(item, next);\n\t}\n}\n#end\n\nprivate class ListIterator<T> {\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():T {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn val;\n\t}\n}\n\nprivate class ListKeyValueIterator<T> {\n\tvar idx:Int;\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t\tthis.idx = 0;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():{key:Int, value:T} {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn {value: val, key: idx++};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues.\n**/\nclass StringBuf {\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get, never):Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length():Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>(x:T):Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar(c:Int):Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub(s:String, pos:Int, ?len:Int):Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString():String {\n\t\treturn b;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class EReg {\n\tvar r:HaxeRegExp;\n\n\tpublic inline function new(r:String, opt:String):Void {\n\t\tthis.r = new HaxeRegExp(r, opt.split(\"u\").join(\"\")); // 'u' (utf8) depends on page encoding\n\t}\n\n\tpublic function match(s:String):Bool {\n\t\tif (r.global)\n\t\t\tr.lastIndex = 0;\n\t\tr.m = r.exec(s);\n\t\tr.s = s;\n\t\treturn (r.m != null);\n\t}\n\n\tpublic function matched(n:Int):String {\n\t\treturn if (r.m != null && n >= 0 && n < r.m.length) r.m[n] else throw \"EReg::matched\";\n\t}\n\n\tpublic function matchedLeft():String {\n\t\tif (r.m == null)\n\t\t\tthrow \"No string matched\";\n\t\treturn r.s.substr(0, r.m.index);\n\t}\n\n\tpublic function matchedRight():String {\n\t\tif (r.m == null)\n\t\t\tthrow \"No string matched\";\n\t\tvar sz = r.m.index + r.m[0].length;\n\t\treturn r.s.substr(sz, r.s.length - sz);\n\t}\n\n\tpublic function matchedPos():{pos:Int, len:Int} {\n\t\tif (r.m == null)\n\t\t\tthrow \"No string matched\";\n\t\treturn {pos: r.m.index, len: r.m[0].length};\n\t}\n\n\tpublic function matchSub(s:String, pos:Int, len:Int = -1):Bool {\n\t\treturn if (r.global) {\n\t\t\tr.lastIndex = pos;\n\t\t\tr.m = r.exec(len < 0 ? s : s.substr(0, pos + len));\n\t\t\tvar b = r.m != null;\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t}\n\t\t\tb;\n\t\t} else {\n\t\t\t// TODO: check some ^/$ related corner cases\n\t\t\tvar b = match(len < 0 ? s.substr(pos) : s.substr(pos, len));\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t\tr.m.index += pos;\n\t\t\t}\n\t\t\tb;\n\t\t}\n\t}\n\n\tpublic function split(s:String):Array<String> {\n\t\t// we can't use directly s.split because it's ignoring the 'g' flag\n\t\tvar d = \"#__delim__#\";\n\t\treturn replace(s, d).split(d);\n\t}\n\n\tpublic inline function replace(s:String, by:String):String {\n\t\treturn (cast s).replace(r, by);\n\t}\n\n\tpublic function map(s:String, f:EReg->String):String {\n\t\tvar offset = 0;\n\t\tvar buf = new StringBuf();\n\t\tdo {\n\t\t\tif (offset >= s.length)\n\t\t\t\tbreak;\n\t\t\telse if (!matchSub(s, offset)) {\n\t\t\t\tbuf.add(s.substr(offset));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar p = matchedPos();\n\t\t\tbuf.add(s.substr(offset, p.pos - offset));\n\t\t\tbuf.add(f(this));\n\t\t\tif (p.len == 0) {\n\t\t\t\tbuf.add(s.substr(p.pos, 1));\n\t\t\t\toffset = p.pos + 1;\n\t\t\t} else\n\t\t\t\toffset = p.pos + p.len;\n\t\t} while (r.global);\n\t\tif (!r.global && offset > 0 && offset < s.length)\n\t\t\tbuf.add(s.substr(offset));\n\t\treturn buf.toString();\n\t}\n\n\tpublic static inline function escape(s:String):String {\n\t\treturn (cast s).replace(escapeRe, \"\\\\$&\");\n\t}\n\n\tstatic var escapeRe = new js.lib.RegExp(\"[.*+?^${}()|[\\\\]\\\\\\\\]\", \"g\");\n}\n\n@:native(\"RegExp\")\nprivate extern class HaxeRegExp extends js.lib.RegExp {\n\tvar m:js.lib.RegExp.RegExpMatch;\n\tvar s:String;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\nimport haxe.ds.List;\n\nusing StringTools;\n\nprivate enum TemplateExpr {\n\tOpVar(v:String);\n\tOpExpr(expr:Void->Dynamic);\n\tOpIf(expr:Void->Dynamic, eif:TemplateExpr, eelse:TemplateExpr);\n\tOpStr(str:String);\n\tOpBlock(l:List<TemplateExpr>);\n\tOpForeach(expr:Void->Dynamic, loop:TemplateExpr);\n\tOpMacro(name:String, params:List<TemplateExpr>);\n}\n\nprivate typedef Token = {\n\tvar s:Bool;\n\tvar p:String;\n\tvar l:Array<String>;\n}\n\nprivate typedef ExprToken = {\n\tvar s:Bool;\n\tvar p:String;\n}\n\n/**\n\t`Template` provides a basic templating mechanism to replace values in a source\n\tString, and to have some basic logic.\n\n\tA complete documentation of the supported syntax is available at:\n\t<https://haxe.org/manual/std-template.html>\n**/\nclass Template {\n\tstatic var splitter = ~/(::[A-Za-z0-9_ ()&|!+=\\/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()/;\n\tstatic var expr_splitter = ~/(\\(|\\)|[ \\r\\n\\t]*\"[^\"]*\"[ \\r\\n\\t]*|[!+=\\/><*.&|-]+)/;\n\tstatic var expr_trim = ~/^[ ]*([^ ]+)[ ]*$/;\n\tstatic var expr_int = ~/^[0-9]+$/;\n\tstatic var expr_float = ~/^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$/;\n\n\t/**\n\t\tGlobal replacements which are used across all `Template` instances. This\n\t\thas lower priority than the context argument of `execute()`.\n\t**/\n\tpublic static var globals:Dynamic = {};\n\n\t// To avoid issues with DCE, keep the array iterator.\n\t@:ifFeature(\"haxe.Template.run\") static var hxKeepArrayIterator = [].iterator();\n\n\tvar expr:TemplateExpr;\n\tvar context:Dynamic;\n\tvar macros:Dynamic;\n\tvar stack:List<Dynamic>;\n\tvar buf:StringBuf;\n\n\t/**\n\t\tCreates a new `Template` instance from `str`.\n\n\t\t`str` is parsed into tokens, which are stored for internal use. This\n\t\tmeans that multiple `execute()` operations on a single `Template` instance\n\t\tare more efficient than one `execute()` operations on multiple `Template`\n\t\tinstances.\n\n\t\tIf `str` is `null`, the result is unspecified.\n\t**/\n\tpublic function new(str:String) {\n\t\tvar tokens = parseTokens(str);\n\t\texpr = parseBlock(tokens);\n\t\tif (!tokens.isEmpty())\n\t\t\tthrow \"Unexpected '\" + tokens.first().s + \"'\";\n\t}\n\n\t/**\n\t\tExecutes `this` `Template`, taking into account `context` for\n\t\treplacements and `macros` for callback functions.\n\n\t\tIf `context` has a field `name`, its value replaces all occurrences of\n\t\t`::name::` in the `Template`. Otherwise `Template.globals` is checked instead,\n\t\tIf `name` is not a field of that either, `::name::` is replaced with `null`.\n\n\t\tIf `macros` has a field `name`, all occurrences of `$$name(args)` are\n\t\treplaced with the result of calling that field. The first argument is\n\t\talways the `resolve()` method, followed by the given arguments.\n\t\tIf `macros` has no such field, the result is unspecified.\n\n\t\tIf `context` is `null`, the result is unspecified. If `macros` is `null`,\n\t\tno macros are used.\n\t**/\n\tpublic function execute(context:Dynamic, ?macros:Dynamic):String {\n\t\tthis.macros = if (macros == null) {} else macros;\n\t\tthis.context = context;\n\t\tstack = new List();\n\t\tbuf = new StringBuf();\n\t\trun(expr);\n\t\treturn buf.toString();\n\t}\n\n\tfunction resolve(v:String):Dynamic {\n\t\tif (v == \"__current__\")\n\t\t\treturn context;\n\t\tvar value = Reflect.getProperty(context, v);\n\t\tif (value != null || Reflect.hasField(context, v))\n\t\t\treturn value;\n\t\tfor (ctx in stack) {\n\t\t\tvalue = Reflect.getProperty(ctx, v);\n\t\t\tif (value != null || Reflect.hasField(ctx, v))\n\t\t\t\treturn value;\n\t\t}\n\t\treturn Reflect.field(globals, v);\n\t}\n\n\tfunction parseTokens(data:String) {\n\t\tvar tokens = new List<Token>();\n\t\twhile (splitter.match(data)) {\n\t\t\tvar p = splitter.matchedPos();\n\t\t\tif (p.pos > 0)\n\t\t\t\ttokens.add({p: data.substr(0, p.pos), s: true, l: null});\n\n\t\t\t// : ?\n\t\t\tif (data.charCodeAt(p.pos) == 58) {\n\t\t\t\ttokens.add({p: data.substr(p.pos + 2, p.len - 4), s: false, l: null});\n\t\t\t\tdata = splitter.matchedRight();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// macro parse\n\t\t\tvar parp = p.pos + p.len;\n\t\t\tvar npar = 1;\n\t\t\tvar params = [];\n\t\t\tvar part = \"\";\n\t\t\twhile (true) {\n\t\t\t\tvar c = data.charCodeAt(parp);\n\t\t\t\tparp++;\n\t\t\t\tif (c == 40) {\n\t\t\t\t\tnpar++;\n\t\t\t\t} else if (c == 41) {\n\t\t\t\t\tnpar--;\n\t\t\t\t\tif (npar <= 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t} else if (c == null) {\n\t\t\t\t\tthrow \"Unclosed macro parenthesis\";\n\t\t\t\t}\n\t\t\t\tif (c == 44 && npar == 1) {\n\t\t\t\t\tparams.push(part);\n\t\t\t\t\tpart = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tpart += String.fromCharCode(c);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparams.push(part);\n\t\t\ttokens.add({p: splitter.matched(2), s: false, l: params});\n\t\t\tdata = data.substr(parp, data.length - parp);\n\t\t}\n\t\tif (data.length > 0)\n\t\t\ttokens.add({p: data, s: true, l: null});\n\t\treturn tokens;\n\t}\n\n\tfunction parseBlock(tokens:List<Token>) {\n\t\tvar l = new List();\n\t\twhile (true) {\n\t\t\tvar t = tokens.first();\n\t\t\tif (t == null)\n\t\t\t\tbreak;\n\t\t\tif (!t.s && (t.p == \"end\" || t.p == \"else\" || t.p.substr(0, 7) == \"elseif \"))\n\t\t\t\tbreak;\n\t\t\tl.add(parse(tokens));\n\t\t}\n\t\tif (l.length == 1)\n\t\t\treturn l.first();\n\t\treturn OpBlock(l);\n\t}\n\n\tfunction parse(tokens:List<Token>) {\n\t\tvar t = tokens.pop();\n\t\tvar p = t.p;\n\t\tif (t.s)\n\t\t\treturn OpStr(p);\n\t\t// macro\n\t\tif (t.l != null) {\n\t\t\tvar pe = new List();\n\t\t\tfor (p in t.l)\n\t\t\t\tpe.add(parseBlock(parseTokens(p)));\n\t\t\treturn OpMacro(p, pe);\n\t\t}\n\t\tfunction kwdEnd(kwd:String):Int {\n\t\t\tvar pos = -1;\n\t\t\tvar length = kwd.length;\n\t\t\tif (p.substr(0, length) == kwd) {\n\t\t\t\tpos = length;\n\t\t\t\tfor (c in p.substr(length)) {\n\t\t\t\t\tswitch c {\n\t\t\t\t\t\tcase ' '.code: pos++;\n\t\t\t\t\t\tcase _: break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pos;\n\t\t}\n\t\t// 'end' , 'else', 'elseif' can't be found here\n\t\tvar pos = kwdEnd(\"if\");\n\t\tif (pos > 0) {\n\t\t\tp = p.substr(pos, p.length - pos);\n\t\t\tvar e = parseExpr(p);\n\t\t\tvar eif = parseBlock(tokens);\n\t\t\tvar t = tokens.first();\n\t\t\tvar eelse;\n\t\t\tif (t == null)\n\t\t\t\tthrow \"Unclosed 'if'\";\n\t\t\tif (t.p == \"end\") {\n\t\t\t\ttokens.pop();\n\t\t\t\teelse = null;\n\t\t\t} else if (t.p == \"else\") {\n\t\t\t\ttokens.pop();\n\t\t\t\teelse = parseBlock(tokens);\n\t\t\t\tt = tokens.pop();\n\t\t\t\tif (t == null || t.p != \"end\")\n\t\t\t\t\tthrow \"Unclosed 'else'\";\n\t\t\t} else { // elseif\n\t\t\t\tt.p = t.p.substr(4, t.p.length - 4);\n\t\t\t\teelse = parse(tokens);\n\t\t\t}\n\t\t\treturn OpIf(e, eif, eelse);\n\t\t}\n\t\tvar pos = kwdEnd(\"foreach\");\n\t\tif (pos >= 0) {\n\t\t\tp = p.substr(pos, p.length - pos);\n\t\t\tvar e = parseExpr(p);\n\t\t\tvar efor = parseBlock(tokens);\n\t\t\tvar t = tokens.pop();\n\t\t\tif (t == null || t.p != \"end\")\n\t\t\t\tthrow \"Unclosed 'foreach'\";\n\t\t\treturn OpForeach(e, efor);\n\t\t}\n\t\tif (expr_splitter.match(p))\n\t\t\treturn OpExpr(parseExpr(p));\n\t\treturn OpVar(p);\n\t}\n\n\tfunction parseExpr(data:String) {\n\t\tvar l = new List<ExprToken>();\n\t\tvar expr = data;\n\t\twhile (expr_splitter.match(data)) {\n\t\t\tvar p = expr_splitter.matchedPos();\n\t\t\tvar k = p.pos + p.len;\n\t\t\tif (p.pos != 0)\n\t\t\t\tl.add({p: data.substr(0, p.pos), s: true});\n\t\t\tvar p = expr_splitter.matched(0);\n\t\t\tl.add({p: p, s: p.indexOf('\"') >= 0});\n\t\t\tdata = expr_splitter.matchedRight();\n\t\t}\n\t\tif (data.length != 0) {\n\t\t\tfor (i => c in data) {\n\t\t\t\tswitch c {\n\t\t\t\t\tcase ' '.code:\n\t\t\t\t\tcase _:\n\t\t\t\t\t\tl.add({p: data.substr(i), s: true});\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar e:Void->Dynamic;\n\t\ttry {\n\t\t\te = makeExpr(l);\n\t\t\tif (!l.isEmpty())\n\t\t\t\tthrow l.first().p;\n\t\t} catch (s:String) {\n\t\t\tthrow \"Unexpected '\" + s + \"' in \" + expr;\n\t\t}\n\t\treturn function() {\n\t\t\ttry {\n\t\t\t\treturn e();\n\t\t\t} catch (exc:Dynamic) {\n\t\t\t\tthrow \"Error : \" + Std.string(exc) + \" in \" + expr;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction makeConst(v:String):Void->Dynamic {\n\t\texpr_trim.match(v);\n\t\tv = expr_trim.matched(1);\n\t\tif (v.charCodeAt(0) == 34) {\n\t\t\tvar str = v.substr(1, v.length - 2);\n\t\t\treturn function() return str;\n\t\t}\n\t\tif (expr_int.match(v)) {\n\t\t\tvar i = Std.parseInt(v);\n\t\t\treturn function() {\n\t\t\t\treturn i;\n\t\t\t};\n\t\t}\n\t\tif (expr_float.match(v)) {\n\t\t\tvar f = Std.parseFloat(v);\n\t\t\treturn function() {\n\t\t\t\treturn f;\n\t\t\t};\n\t\t}\n\t\tvar me = this;\n\t\treturn function() {\n\t\t\treturn me.resolve(v);\n\t\t};\n\t}\n\n\tfunction makePath(e:Void->Dynamic, l:List<ExprToken>) {\n\t\tvar p = l.first();\n\t\tif (p == null || p.p != \".\")\n\t\t\treturn e;\n\t\tl.pop();\n\t\tvar field = l.pop();\n\t\tif (field == null || !field.s)\n\t\t\tthrow field.p;\n\t\tvar f = field.p;\n\t\texpr_trim.match(f);\n\t\tf = expr_trim.matched(1);\n\t\treturn makePath(function() {\n\t\t\treturn Reflect.field(e(), f);\n\t\t}, l);\n\t}\n\n\tfunction makeExpr(l) {\n\t\treturn makePath(makeExpr2(l), l);\n\t}\n\n\tfunction skipSpaces(l:List<ExprToken>) {\n\t\tvar p = l.first();\n\t\twhile (p != null) {\n\t\t\tfor (c in p.p) {\n\t\t\t\tif (c != \" \".code) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tl.pop();\n\t\t\tp = l.first();\n\t\t}\n\t}\n\n\tfunction makeExpr2(l:List<ExprToken>):Void->Dynamic {\n\t\tskipSpaces(l);\n\t\tvar p = l.pop();\n\t\tskipSpaces(l);\n\t\tif (p == null)\n\t\t\tthrow \"<eof>\";\n\t\tif (p.s)\n\t\t\treturn makeConst(p.p);\n\t\tswitch (p.p) {\n\t\t\tcase \"(\":\n\t\t\t\tskipSpaces(l);\n\t\t\t\tvar e1:Dynamic = makeExpr(l);\n\t\t\t\tskipSpaces(l);\n\t\t\t\tvar p = l.pop();\n\t\t\t\tif (p == null || p.s)\n\t\t\t\t\tthrow p;\n\t\t\t\tif (p.p == \")\")\n\t\t\t\t\treturn e1;\n\t\t\t\tskipSpaces(l);\n\t\t\t\tvar e2:Dynamic = makeExpr(l);\n\t\t\t\tskipSpaces(l);\n\t\t\t\tvar p2 = l.pop();\n\t\t\t\tskipSpaces(l);\n\t\t\t\tif (p2 == null || p2.p != \")\")\n\t\t\t\t\tthrow p2;\n\t\t\t\treturn switch (p.p) {\n\t\t\t\t\tcase \"+\": function() {\n\t\t\t\t\t\t\treturn cast e1() + e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"-\": function() {\n\t\t\t\t\t\t\treturn cast e1() - e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"*\": function() {\n\t\t\t\t\t\t\treturn cast e1() * e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"/\": function() {\n\t\t\t\t\t\t\treturn cast e1() / e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \">\": function() {\n\t\t\t\t\t\t\treturn cast e1() > e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"<\": function() {\n\t\t\t\t\t\t\treturn cast e1() < e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \">=\": function() {\n\t\t\t\t\t\t\treturn cast e1() >= e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"<=\": function() {\n\t\t\t\t\t\t\treturn cast e1() <= e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"==\": function() {\n\t\t\t\t\t\t\treturn cast e1() == e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"!=\": function() {\n\t\t\t\t\t\t\treturn cast e1() != e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"&&\": function() {\n\t\t\t\t\t\t\treturn cast e1() && e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tcase \"||\": function() {\n\t\t\t\t\t\t\treturn cast e1() || e2();\n\t\t\t\t\t\t};\n\t\t\t\t\tdefault: throw \"Unknown operation \" + p.p;\n\t\t\t\t}\n\t\t\tcase \"!\":\n\t\t\t\tvar e:Void->Dynamic = makeExpr(l);\n\t\t\t\treturn function() {\n\t\t\t\t\tvar v:Dynamic = e();\n\t\t\t\t\treturn (v == null || v == false);\n\t\t\t\t};\n\t\t\tcase \"-\":\n\t\t\t\tvar e = makeExpr(l);\n\t\t\t\treturn function() {\n\t\t\t\t\treturn -e();\n\t\t\t\t};\n\t\t}\n\t\tthrow p.p;\n\t}\n\n\tfunction run(e:TemplateExpr) {\n\t\tswitch (e) {\n\t\t\tcase OpVar(v):\n\t\t\t\tbuf.add(Std.string(resolve(v)));\n\t\t\tcase OpExpr(e):\n\t\t\t\tbuf.add(Std.string(e()));\n\t\t\tcase OpIf(e, eif, eelse):\n\t\t\t\tvar v:Dynamic = e();\n\t\t\t\tif (v == null || v == false) {\n\t\t\t\t\tif (eelse != null)\n\t\t\t\t\t\trun(eelse);\n\t\t\t\t} else\n\t\t\t\t\trun(eif);\n\t\t\tcase OpStr(str):\n\t\t\t\tbuf.add(str);\n\t\t\tcase OpBlock(l):\n\t\t\t\tfor (e in l)\n\t\t\t\t\trun(e);\n\t\t\tcase OpForeach(e, loop):\n\t\t\t\tvar v:Dynamic = e();\n\t\t\t\ttry {\n\t\t\t\t\tvar x:Dynamic = v.iterator();\n\t\t\t\t\tif (x.hasNext == null)\n\t\t\t\t\t\tthrow null;\n\t\t\t\t\tv = x;\n\t\t\t\t} catch (e:Dynamic)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (v.hasNext == null)\n\t\t\t\t\t\t\tthrow null;\n\t\t\t\t\t} catch (e:Dynamic) {\n\t\t\t\t\t\tthrow \"Cannot iter on \" + v;\n\t\t\t\t\t}\n\t\t\t\tstack.push(context);\n\t\t\t\tvar v:Iterator<Dynamic> = v;\n\t\t\t\tfor (ctx in v) {\n\t\t\t\t\tcontext = ctx;\n\t\t\t\t\trun(loop);\n\t\t\t\t}\n\t\t\t\tcontext = stack.pop();\n\t\t\tcase OpMacro(m, params):\n\t\t\t\tvar v:Dynamic = Reflect.field(macros, m);\n\t\t\t\tvar pl = new Array<Dynamic>();\n\t\t\t\tvar old = buf;\n\t\t\t\tpl.push(resolve);\n\t\t\t\tfor (p in params) {\n\t\t\t\t\tswitch (p) {\n\t\t\t\t\t\tcase OpVar(v): pl.push(resolve(v));\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbuf = new StringBuf();\n\t\t\t\t\t\t\trun(p);\n\t\t\t\t\t\t\tpl.push(buf.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuf = old;\n\t\t\t\ttry {\n\t\t\t\t\tbuf.add(Std.string(Reflect.callMethod(macros, v, pl)));\n\t\t\t\t} catch (e:Dynamic) {\n\t\t\t\t\tvar plstr = try pl.join(\",\") catch (e:Dynamic) \"???\";\n\t\t\t\t\tvar msg = \"Macro call \" + m + \"(\" + plstr + \") failed (\" + Std.string(e) + \")\";\n\t\t\t\t\t#if neko\n\t\t\t\t\tneko.Lib.rethrow(msg);\n\t\t\t\t\t#else\n\t\t\t\t\tthrow msg;\n\t\t\t\t\t#end\n\t\t\t\t}\n\t\t}\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}