{"sourceRoot":"","names":[],"mappings":"QAsOA;;ACvMA;;;;;;;;;;;;;;;QASC,cCXyB,MFyM1B;;;;;;;QC1KC,cC/ByB,MCgEU","version":3,"file":"Rtti.d.ts.map","sources":["../../../../../../../haxe/versions/4.1.2/std/haxe/rtti/CType.hx","../../../../../../../haxe/versions/4.1.2/std/haxe/rtti/Rtti.hx","../../../../../../../haxe/versions/4.1.2/std/Class.hx","../../../../../../../haxe/versions/4.1.2/std/StdTypes.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.rtti;\n\n/**\n\tThe (dot-)path of the runtime type.\n**/\ntypedef Path = String;\n\n/**\n\tA list of strings representing the targets where the type is available.\n**/\ntypedef Platforms = Array<String>;\n\n/**\n\tThe function argument runtime type information.\n**/\ntypedef FunctionArgument = {name:String, opt:Bool, t:CType, ?value:String};\n\n/**\n\tThe runtime member types.\n**/\nenum CType {\n\tCUnknown;\n\tCEnum(name:Path, params:Array<CType>);\n\tCClass(name:Path, params:Array<CType>);\n\tCTypedef(name:Path, params:Array<CType>);\n\tCFunction(args:Array<FunctionArgument>, ret:CType);\n\tCAnonymous(fields:Array<ClassField>);\n\tCDynamic(?t:CType);\n\tCAbstract(name:Path, params:Array<CType>);\n}\n\n/**\n\tThe type parameters in the runtime type information.\n**/\ntypedef PathParams = {\n\t/**\n\t\tThe path of the type.\n\t**/\n\tvar path:Path;\n\n\t/**\n\t\tThe array of parameters types.\n\t**/\n\tvar params:Array<CType>;\n};\n\n/**\n\tAn array of strings representing the names of the type parameters the type\n\thas. As of Haxe 3.2.0, this does not include the constraints.\n**/\ntypedef TypeParams = Array<String>; // no constraints\n\n/**\n\tRepresents the runtime rights of a type.\n**/\nenum Rights {\n\tRNormal;\n\tRNo;\n\tRCall(m:String);\n\tRMethod;\n\tRDynamic;\n\tRInline;\n}\n\n/**\n\tThe list of runtime metadata.\n**/\ntypedef MetaData = Array<{name:String, params:Array<String>}>;\n\n/**\n\tThe runtime class field information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>\n**/\ntypedef ClassField = {\n\t/**\n\t\tThe name of the field.\n\t**/\n\tvar name:String;\n\n\t/**\n\t\tThe type of the field.\n\t**/\n\tvar type:CType;\n\n\t/**\n\t\tWhether or not the field is `public`.\n\t**/\n\tvar isPublic:Bool;\n\n\t/**\n\t\tWhether or not the field is `final`.\n\t**/\n\tvar isFinal:Bool;\n\n\t/**\n\t\tWhether or not the field overrides another field.\n\t**/\n\tvar isOverride:Bool;\n\n\t/**\n\t\tThe documentation of the field. This information is only available\n\t\tif the compiler flag `-D use_rtti_doc` was in place. Otherwise, or\n\t\tif the field has no documentation, the value is `null`.\n\t**/\n\tvar doc:Null<String>;\n\n\t/**\n\t\tThe [read access](https://haxe.org/manual/class-field-property.html#define-read-access)\n\t\tbehavior of the field.\n\t**/\n\tvar get:Rights;\n\n\t/**\n\t\tThe [write access](https://haxe.org/manual/class-field-property.html#define-write-access)\n\t\tbehavior of the field.\n\t**/\n\tvar set:Rights;\n\n\t/**\n\t\tAn array of strings representing the names of the type parameters\n\t\tthe field has.\n\t**/\n\tvar params:TypeParams;\n\n\t/**\n\t\tA list of strings representing the targets where the field is available.\n\t**/\n\tvar platforms:Platforms;\n\n\t/**\n\t\tThe meta data the field was annotated with.\n\t**/\n\tvar meta:MetaData;\n\n\t/**\n\t\tThe line number where the field is defined. This information is only\n\t\tavailable if the field has an expression.\n\t\tOtherwise the value is `null`.\n\t**/\n\tvar line:Null<Int>;\n\n\t/**\n\t\tThe list of available overloads for the fields or `null` if no overloads\n\t\texists.\n\t**/\n\tvar overloads:Null<Array<ClassField>>;\n\n\t/**\n\t\tThe actual expression of the field or `null` if there is no expression.\n\t**/\n\tvar expr:Null<String>;\n};\n\n/**\n\tThe general runtime type information.\n**/\ntypedef TypeInfos = {\n\t/**\n\t\tThe type path of the type.\n\t**/\n\tvar path:Path;\n\n\t/**\n\t\tThe type path of the module containing the type.\n\t**/\n\tvar module:Path;\n\n\t/**\n\t\tThe full slash path of the .hx file containing the type.\n\t\tThis might be `null` in case there is no such file, e.g. if the\n\t\ttype is defined through a macro.\n\t**/\n\tvar file:Null<String>;\n\n\t/**\n\t\tAn array of strings representing the names of the type parameters the\n\t\ttype has.\n\t**/\n\tvar params:TypeParams;\n\n\t/**\n\t\tThe documentation of the type. This information is only available\n\t\tif the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if\n\t\tthe constructor has no documentation, the value is `null`.\n\t**/\n\tvar doc:Null<String>;\n\n\t/**\n\t\tWhether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\t**/\n\tvar isPrivate:Bool;\n\n\t/**\n\t\tA list of strings representing the targets where the type is available.\n\t**/\n\tvar platforms:Platforms;\n\n\t/**\n\t\tThe [metadata](https://haxe.org/manual/lf-metadata.html) the type was\n\t\tannotated with.\n\t**/\n\tvar meta:MetaData;\n};\n\n/**\n\tThe runtime class definition information.\n**/\ntypedef Classdef = TypeInfos & {\n\t/**\n\t\tWhether or not the class is [extern](https://haxe.org/manual/lf-externs.html).\n\t**/\n\tvar isExtern:Bool;\n\n\t/**\n\t\tWhether or not the class is `final`.\n\t**/\n\tvar isFinal:Bool;\n\n\t/**\n\t\tWhether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).\n\t**/\n\tvar isInterface:Bool;\n\n\t/**\n\t\tThe class' parent class defined by its type path and list of type\n\t\tparameters.\n\t**/\n\tvar superClass:Null<PathParams>;\n\n\t/**\n\t\tThe list of interfaces defined by their type path and list of type\n\t\tparameters.\n\t**/\n\tvar interfaces:Array<PathParams>;\n\n\t/**\n\t\tThe list of member [class fields](https://haxe.org/manual/class-field.html).\n\t**/\n\tvar fields:Array<ClassField>;\n\n\t/**\n\t\tThe list of static class fields.\n\t**/\n\tvar statics:Array<ClassField>;\n\n\t/**\n\t\tThe type which is dynamically implemented by the class or `null` if no\n\t\tsuch type exists.\n\t**/\n\tvar tdynamic:Null<CType>;\n};\n\n/**\n\tThe runtime enum constructor information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>\n**/\ntypedef EnumField = {\n\t/**\n\t\tThe name of the constructor.\n\t**/\n\tvar name:String;\n\n\t/**\n\t\tThe list of arguments the constructor has or `null` if no arguments are\n\t\tavailable.\n\t**/\n\tvar args:Null<Array<{name:String, opt:Bool, t:CType}>>;\n\n\t/**\n\t\tThe documentation of the constructor. This information is only available\n\t\tif the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if\n\t\tthe constructor has no documentation, the value is `null`.\n\t**/\n\tvar doc:String;\n\n\t/**\n\t\tA list of strings representing the targets where the constructor is\n\t\tavailable.\n\t**/\n\tvar platforms:Platforms;\n\n\t/**\n\t\tThe meta data the constructor was annotated with.\n\t**/\n\tvar meta:MetaData;\n};\n\n/**\n\tThe enum runtime type information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>\n**/\ntypedef Enumdef = TypeInfos & {\n\t/**\n\t\tWhether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).\n\t**/\n\tvar isExtern:Bool;\n\n\t/**\n\t\tThe list of enum constructors.\n\t**/\n\tvar constructors:Array<EnumField>;\n};\n\n/**\n\tThe typedef runtime information.\n**/\ntypedef Typedef = TypeInfos & {\n\t/**\n\t\tThe type of the typedef.\n\t**/\n\tvar type:CType;\n\n\t/**\n\t\tThe types of the typedef, by platform.\n\t**/\n\tvar types:Map<String, CType>; // by platform\n\n};\n\n/**\n\tThe abstract type runtime information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>\n**/\ntypedef Abstractdef = TypeInfos & {\n\tvar to:Array<{t:CType, field:Null<String>}>;\n\tvar from:Array<{t:CType, field:Null<String>}>;\n\tvar impl:Classdef;\n\tvar athis:CType;\n};\n\n/**\n\tThe tree types of the runtime type.\n**/\nenum TypeTree {\n\tTPackage(name:String, full:String, subs:Array<TypeTree>);\n\tTClassdecl(c:Classdef);\n\tTEnumdecl(e:Enumdef);\n\tTTypedecl(t:Typedef);\n\tTAbstractdecl(a:Abstractdef);\n}\n\n/**\n\tArray of `TypeTree`.\n**/\ntypedef TypeRoot = Array<TypeTree>;\n\n/**\n\tContains type and equality checks functionalities for RTTI.\n**/\nclass TypeApi {\n\tpublic static function typeInfos(t:TypeTree):TypeInfos {\n\t\tvar inf:TypeInfos;\n\t\tswitch (t) {\n\t\t\tcase TClassdecl(c):\n\t\t\t\tinf = c;\n\t\t\tcase TEnumdecl(e):\n\t\t\t\tinf = e;\n\t\t\tcase TTypedecl(t):\n\t\t\t\tinf = t;\n\t\t\tcase TAbstractdecl(a):\n\t\t\t\tinf = a;\n\t\t\tcase TPackage(_, _, _):\n\t\t\t\tthrow \"Unexpected Package\";\n\t\t}\n\t\treturn inf;\n\t}\n\n\t/**\n\t\tReturns `true` if the given `CType` is a variable or `false` if it is a\n\t\tfunction.\n\t**/\n\tpublic static function isVar(t:CType) {\n\t\treturn switch (t) {\n\t\t\tcase CFunction(_, _): false;\n\t\t\tdefault: true;\n\t\t}\n\t}\n\n\tstatic function leq<T>(f:T->T->Bool, l1:Array<T>, l2:Array<T>) {\n\t\tvar it = l2.iterator();\n\t\tfor (e1 in l1) {\n\t\t\tif (!it.hasNext())\n\t\t\t\treturn false;\n\t\t\tvar e2 = it.next();\n\t\t\tif (!f(e1, e2))\n\t\t\t\treturn false;\n\t\t}\n\t\tif (it.hasNext())\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tUnlike `r1 == r2`, this function performs a deep equality check on\n\t\tthe given `Rights` instances.\n\n\t\tIf `r1` or `r2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function rightsEq(r1:Rights, r2:Rights) {\n\t\tif (r1 == r2)\n\t\t\treturn true;\n\t\tswitch (r1) {\n\t\t\tcase RCall(m1):\n\t\t\t\tswitch (r2) {\n\t\t\t\t\tcase RCall(m2):\n\t\t\t\t\t\treturn m1 == m2;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tdefault:\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tUnlike `t1 == t2`, this function performs a deep equality check on\n\t\tthe given `CType` instances.\n\n\t\tIf `t1` or `t2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function typeEq(t1:CType, t2:CType) {\n\t\tswitch (t1) {\n\t\t\tcase CUnknown:\n\t\t\t\treturn t2 == CUnknown;\n\t\t\tcase CEnum(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CEnum(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CClass(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CClass(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CAbstract(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CAbstract(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CTypedef(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CTypedef(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CFunction(args, ret):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CFunction(args2, ret2):\n\t\t\t\t\t\treturn leq(function(a:FunctionArgument, b:FunctionArgument) {\n\t\t\t\t\t\t\treturn a.name == b.name && a.opt == b.opt && typeEq(a.t, b.t);\n\t\t\t\t\t\t}, args, args2) && typeEq(ret, ret2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CAnonymous(fields):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CAnonymous(fields2):\n\t\t\t\t\t\treturn leq(function(a, b) return fieldEq(a, b), fields, fields2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CDynamic(t):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CDynamic(t2):\n\t\t\t\t\t\tif ((t == null) != (t2 == null))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn t == null || typeEq(t, t2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tUnlike `f1 == f2`, this function performs a deep equality check on\n\t\tthe given `ClassField` instances.\n\n\t\tIf `f1` or `f2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function fieldEq(f1:ClassField, f2:ClassField) {\n\t\tif (f1.name != f2.name)\n\t\t\treturn false;\n\t\tif (!typeEq(f1.type, f2.type))\n\t\t\treturn false;\n\t\tif (f1.isPublic != f2.isPublic)\n\t\t\treturn false;\n\t\tif (f1.doc != f2.doc)\n\t\t\treturn false;\n\t\tif (!rightsEq(f1.get, f2.get))\n\t\t\treturn false;\n\t\tif (!rightsEq(f1.set, f2.set))\n\t\t\treturn false;\n\t\tif ((f1.params == null) != (f2.params == null))\n\t\t\treturn false;\n\t\tif (f1.params != null && f1.params.join(\":\") != f2.params.join(\":\"))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tUnlike `c1 == c2`, this function performs a deep equality check on\n\t\tthe arguments of the enum constructors, if exists.\n\n\t\tIf `c1` or `c2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function constructorEq(c1:EnumField, c2:EnumField) {\n\t\tif (c1.name != c2.name)\n\t\t\treturn false;\n\t\tif (c1.doc != c2.doc)\n\t\t\treturn false;\n\t\tif ((c1.args == null) != (c2.args == null))\n\t\t\treturn false;\n\t\tif (c1.args != null && !leq(function(a, b) {\n\t\t\treturn a.name == b.name && a.opt == b.opt && typeEq(a.t, b.t);\n\t\t}, c1.args, c2.args))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n\n/**\n\tThe `CTypeTools` class contains some extra functionalities for handling\n\t`CType` instances.\n**/\nclass CTypeTools {\n\t/**\n\t\tGet the string representation of `CType`.\n\t**/\n\tstatic public function toString(t:CType):String {\n\t\treturn switch (t) {\n\t\t\tcase CUnknown:\n\t\t\t\t\"unknown\";\n\t\t\tcase CClass(name, params), CEnum(name, params), CTypedef(name, params), CAbstract(name, params):\n\t\t\t\tnameWithParams(name, params);\n\t\t\tcase CFunction(args, ret):\n\t\t\t\tif (args.length == 0) {\n\t\t\t\t\t\"Void -> \" + toString(ret);\n\t\t\t\t} else {\n\t\t\t\t\targs.map(functionArgumentName).join(\" -> \") + \" -> \" + toString(ret);\n\t\t\t\t}\n\t\t\tcase CDynamic(d):\n\t\t\t\tif (d == null) {\n\t\t\t\t\t\"Dynamic\";\n\t\t\t\t} else {\n\t\t\t\t\t\"Dynamic<\" + toString(d) + \">\";\n\t\t\t\t}\n\t\t\tcase CAnonymous(fields):\n\t\t\t\t\"{ \" + fields.map(classField).join(\", \") + \"}\";\n\t\t}\n\t}\n\n\tstatic function nameWithParams(name:String, params:Array<CType>) {\n\t\tif (params.length == 0) {\n\t\t\treturn name;\n\t\t}\n\t\treturn name + \"<\" + params.map(toString).join(\", \") + \">\";\n\t}\n\n\tstatic function functionArgumentName(arg:FunctionArgument) {\n\t\treturn (arg.opt ? \"?\" : \"\")\n\t\t\t+ (arg.name == \"\" ? \"\" : arg.name + \":\")\n\t\t\t+ toString(arg.t)\n\t\t\t+ (arg.value == null ? \"\" : \" = \" + arg.value);\n\t}\n\n\tstatic function classField(cf:ClassField) {\n\t\treturn cf.name + \":\" + toString(cf.type);\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.rtti;\n\nimport haxe.rtti.CType;\n\n/**\n\tRtti is a helper class which supplements the `@:rtti` metadata.\n\n\t@see <https://haxe.org/manual/cr-rtti.html>\n**/\nclass Rtti {\n\t/**\n\t\tReturns the `haxe.rtti.CType.Classdef` corresponding to class `c`.\n\n\t\tIf `c` has no runtime type information, e.g. because no `@:rtti` was\n\t\tadded, an exception of type `String` is thrown.\n\n\t\tIf `c` is `null`, the result is unspecified.\n\t**/\n\tstatic public function getRtti<T>(c:Class<T>):Classdef {\n\t\tvar rtti = Reflect.field(c, \"__rtti\");\n\t\tif (rtti == null) {\n\t\t\tthrow 'Class ${Type.getClassName(c)} has no RTTI information, consider adding @:rtti';\n\t\t}\n\t\tvar x = Xml.parse(rtti).firstElement();\n\t\tvar infos = new haxe.rtti.XmlParser().processElement(x);\n\t\tswitch (infos) {\n\t\t\tcase TClassdecl(c):\n\t\t\t\treturn c;\n\t\t\tcase var t:\n\t\t\t\tthrow 'Enum mismatch: expected TClassDecl but found $t';\n\t\t}\n\t}\n\n\t/**\n\t\tTells if `c` has runtime type information.\n\n\t\tIf `c` is `null`, the result is unspecified.\n\t**/\n\tstatic public function hasRtti<T>(c:Class<T>):Bool {\n\t\treturn Lambda.has(Type.getClassFields(c), \"__rtti\");\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tAn abstract type that represents a Class.\n\n\tSee `Type` for the Haxe Reflection API.\n\n\t@see https://haxe.org/manual/types-class-instance.html\n**/\n@:coreType @:runtimeValue abstract Class<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}