{"sourceRoot":"","names":[],"mappings":"QAuWA,UAvQA,YAsIA,UAsFA,SAeA,SAkBA,aAhRA,QArBA,YAgOA,WA9OA;QCuCA;;;;;;;;AChDA;CAKC;CAJA,MCTM,AH8UP;CE7TC,SEwCD,ODzDO,AH8UP,aIxUW;CF0DV,WDRD,eI5DiB,SDUN;CFsFV,YFiHD,aAtIA,aIjEW;CFqSV,kBDnPD,MDsRA","version":3,"file":"XmlParser.d.ts.map","sources":["../../../../../../../haxe/versions/4.1.5/std/haxe/rtti/CType.hx","../../../../../../../haxe/versions/4.1.5/std/Xml.hx","../../../../../../../haxe/versions/4.1.5/std/haxe/rtti/XmlParser.hx","../../../../../../../haxe/versions/4.1.5/std/js/_std/Array.hx","../../../../../../../haxe/versions/4.1.5/std/StdTypes.hx","../../../../../../../haxe/versions/4.1.5/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.rtti;\n\n/**\n\tThe (dot-)path of the runtime type.\n**/\ntypedef Path = String;\n\n/**\n\tA list of strings representing the targets where the type is available.\n**/\ntypedef Platforms = Array<String>;\n\n/**\n\tThe function argument runtime type information.\n**/\ntypedef FunctionArgument = {name:String, opt:Bool, t:CType, ?value:String};\n\n/**\n\tThe runtime member types.\n**/\nenum CType {\n\tCUnknown;\n\tCEnum(name:Path, params:Array<CType>);\n\tCClass(name:Path, params:Array<CType>);\n\tCTypedef(name:Path, params:Array<CType>);\n\tCFunction(args:Array<FunctionArgument>, ret:CType);\n\tCAnonymous(fields:Array<ClassField>);\n\tCDynamic(?t:CType);\n\tCAbstract(name:Path, params:Array<CType>);\n}\n\n/**\n\tThe type parameters in the runtime type information.\n**/\ntypedef PathParams = {\n\t/**\n\t\tThe path of the type.\n\t**/\n\tvar path:Path;\n\n\t/**\n\t\tThe array of parameters types.\n\t**/\n\tvar params:Array<CType>;\n};\n\n/**\n\tAn array of strings representing the names of the type parameters the type\n\thas. As of Haxe 3.2.0, this does not include the constraints.\n**/\ntypedef TypeParams = Array<String>; // no constraints\n\n/**\n\tRepresents the runtime rights of a type.\n**/\nenum Rights {\n\tRNormal;\n\tRNo;\n\tRCall(m:String);\n\tRMethod;\n\tRDynamic;\n\tRInline;\n}\n\n/**\n\tThe list of runtime metadata.\n**/\ntypedef MetaData = Array<{name:String, params:Array<String>}>;\n\n/**\n\tThe runtime class field information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>\n**/\ntypedef ClassField = {\n\t/**\n\t\tThe name of the field.\n\t**/\n\tvar name:String;\n\n\t/**\n\t\tThe type of the field.\n\t**/\n\tvar type:CType;\n\n\t/**\n\t\tWhether or not the field is `public`.\n\t**/\n\tvar isPublic:Bool;\n\n\t/**\n\t\tWhether or not the field is `final`.\n\t**/\n\tvar isFinal:Bool;\n\n\t/**\n\t\tWhether or not the field overrides another field.\n\t**/\n\tvar isOverride:Bool;\n\n\t/**\n\t\tThe documentation of the field. This information is only available\n\t\tif the compiler flag `-D use_rtti_doc` was in place. Otherwise, or\n\t\tif the field has no documentation, the value is `null`.\n\t**/\n\tvar doc:Null<String>;\n\n\t/**\n\t\tThe [read access](https://haxe.org/manual/class-field-property.html#define-read-access)\n\t\tbehavior of the field.\n\t**/\n\tvar get:Rights;\n\n\t/**\n\t\tThe [write access](https://haxe.org/manual/class-field-property.html#define-write-access)\n\t\tbehavior of the field.\n\t**/\n\tvar set:Rights;\n\n\t/**\n\t\tAn array of strings representing the names of the type parameters\n\t\tthe field has.\n\t**/\n\tvar params:TypeParams;\n\n\t/**\n\t\tA list of strings representing the targets where the field is available.\n\t**/\n\tvar platforms:Platforms;\n\n\t/**\n\t\tThe meta data the field was annotated with.\n\t**/\n\tvar meta:MetaData;\n\n\t/**\n\t\tThe line number where the field is defined. This information is only\n\t\tavailable if the field has an expression.\n\t\tOtherwise the value is `null`.\n\t**/\n\tvar line:Null<Int>;\n\n\t/**\n\t\tThe list of available overloads for the fields or `null` if no overloads\n\t\texists.\n\t**/\n\tvar overloads:Null<Array<ClassField>>;\n\n\t/**\n\t\tThe actual expression of the field or `null` if there is no expression.\n\t**/\n\tvar expr:Null<String>;\n};\n\n/**\n\tThe general runtime type information.\n**/\ntypedef TypeInfos = {\n\t/**\n\t\tThe type path of the type.\n\t**/\n\tvar path:Path;\n\n\t/**\n\t\tThe type path of the module containing the type.\n\t**/\n\tvar module:Path;\n\n\t/**\n\t\tThe full slash path of the .hx file containing the type.\n\t\tThis might be `null` in case there is no such file, e.g. if the\n\t\ttype is defined through a macro.\n\t**/\n\tvar file:Null<String>;\n\n\t/**\n\t\tAn array of strings representing the names of the type parameters the\n\t\ttype has.\n\t**/\n\tvar params:TypeParams;\n\n\t/**\n\t\tThe documentation of the type. This information is only available\n\t\tif the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if\n\t\tthe constructor has no documentation, the value is `null`.\n\t**/\n\tvar doc:Null<String>;\n\n\t/**\n\t\tWhether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).\n\t**/\n\tvar isPrivate:Bool;\n\n\t/**\n\t\tA list of strings representing the targets where the type is available.\n\t**/\n\tvar platforms:Platforms;\n\n\t/**\n\t\tThe [metadata](https://haxe.org/manual/lf-metadata.html) the type was\n\t\tannotated with.\n\t**/\n\tvar meta:MetaData;\n};\n\n/**\n\tThe runtime class definition information.\n**/\ntypedef Classdef = TypeInfos & {\n\t/**\n\t\tWhether or not the class is [extern](https://haxe.org/manual/lf-externs.html).\n\t**/\n\tvar isExtern:Bool;\n\n\t/**\n\t\tWhether or not the class is `final`.\n\t**/\n\tvar isFinal:Bool;\n\n\t/**\n\t\tWhether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).\n\t**/\n\tvar isInterface:Bool;\n\n\t/**\n\t\tThe class' parent class defined by its type path and list of type\n\t\tparameters.\n\t**/\n\tvar superClass:Null<PathParams>;\n\n\t/**\n\t\tThe list of interfaces defined by their type path and list of type\n\t\tparameters.\n\t**/\n\tvar interfaces:Array<PathParams>;\n\n\t/**\n\t\tThe list of member [class fields](https://haxe.org/manual/class-field.html).\n\t**/\n\tvar fields:Array<ClassField>;\n\n\t/**\n\t\tThe list of static class fields.\n\t**/\n\tvar statics:Array<ClassField>;\n\n\t/**\n\t\tThe type which is dynamically implemented by the class or `null` if no\n\t\tsuch type exists.\n\t**/\n\tvar tdynamic:Null<CType>;\n};\n\n/**\n\tThe runtime enum constructor information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>\n**/\ntypedef EnumField = {\n\t/**\n\t\tThe name of the constructor.\n\t**/\n\tvar name:String;\n\n\t/**\n\t\tThe list of arguments the constructor has or `null` if no arguments are\n\t\tavailable.\n\t**/\n\tvar args:Null<Array<{name:String, opt:Bool, t:CType}>>;\n\n\t/**\n\t\tThe documentation of the constructor. This information is only available\n\t\tif the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if\n\t\tthe constructor has no documentation, the value is `null`.\n\t**/\n\tvar doc:String;\n\n\t/**\n\t\tA list of strings representing the targets where the constructor is\n\t\tavailable.\n\t**/\n\tvar platforms:Platforms;\n\n\t/**\n\t\tThe meta data the constructor was annotated with.\n\t**/\n\tvar meta:MetaData;\n};\n\n/**\n\tThe enum runtime type information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>\n**/\ntypedef Enumdef = TypeInfos & {\n\t/**\n\t\tWhether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).\n\t**/\n\tvar isExtern:Bool;\n\n\t/**\n\t\tThe list of enum constructors.\n\t**/\n\tvar constructors:Array<EnumField>;\n};\n\n/**\n\tThe typedef runtime information.\n**/\ntypedef Typedef = TypeInfos & {\n\t/**\n\t\tThe type of the typedef.\n\t**/\n\tvar type:CType;\n\n\t/**\n\t\tThe types of the typedef, by platform.\n\t**/\n\tvar types:Map<String, CType>; // by platform\n\n};\n\n/**\n\tThe abstract type runtime information.\n\n\t@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>\n**/\ntypedef Abstractdef = TypeInfos & {\n\tvar to:Array<{t:CType, field:Null<String>}>;\n\tvar from:Array<{t:CType, field:Null<String>}>;\n\tvar impl:Classdef;\n\tvar athis:CType;\n};\n\n/**\n\tThe tree types of the runtime type.\n**/\nenum TypeTree {\n\tTPackage(name:String, full:String, subs:Array<TypeTree>);\n\tTClassdecl(c:Classdef);\n\tTEnumdecl(e:Enumdef);\n\tTTypedecl(t:Typedef);\n\tTAbstractdecl(a:Abstractdef);\n}\n\n/**\n\tArray of `TypeTree`.\n**/\ntypedef TypeRoot = Array<TypeTree>;\n\n/**\n\tContains type and equality checks functionalities for RTTI.\n**/\nclass TypeApi {\n\tpublic static function typeInfos(t:TypeTree):TypeInfos {\n\t\tvar inf:TypeInfos;\n\t\tswitch (t) {\n\t\t\tcase TClassdecl(c):\n\t\t\t\tinf = c;\n\t\t\tcase TEnumdecl(e):\n\t\t\t\tinf = e;\n\t\t\tcase TTypedecl(t):\n\t\t\t\tinf = t;\n\t\t\tcase TAbstractdecl(a):\n\t\t\t\tinf = a;\n\t\t\tcase TPackage(_, _, _):\n\t\t\t\tthrow \"Unexpected Package\";\n\t\t}\n\t\treturn inf;\n\t}\n\n\t/**\n\t\tReturns `true` if the given `CType` is a variable or `false` if it is a\n\t\tfunction.\n\t**/\n\tpublic static function isVar(t:CType) {\n\t\treturn switch (t) {\n\t\t\tcase CFunction(_, _): false;\n\t\t\tdefault: true;\n\t\t}\n\t}\n\n\tstatic function leq<T>(f:T->T->Bool, l1:Array<T>, l2:Array<T>) {\n\t\tvar it = l2.iterator();\n\t\tfor (e1 in l1) {\n\t\t\tif (!it.hasNext())\n\t\t\t\treturn false;\n\t\t\tvar e2 = it.next();\n\t\t\tif (!f(e1, e2))\n\t\t\t\treturn false;\n\t\t}\n\t\tif (it.hasNext())\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tUnlike `r1 == r2`, this function performs a deep equality check on\n\t\tthe given `Rights` instances.\n\n\t\tIf `r1` or `r2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function rightsEq(r1:Rights, r2:Rights) {\n\t\tif (r1 == r2)\n\t\t\treturn true;\n\t\tswitch (r1) {\n\t\t\tcase RCall(m1):\n\t\t\t\tswitch (r2) {\n\t\t\t\t\tcase RCall(m2):\n\t\t\t\t\t\treturn m1 == m2;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tdefault:\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tUnlike `t1 == t2`, this function performs a deep equality check on\n\t\tthe given `CType` instances.\n\n\t\tIf `t1` or `t2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function typeEq(t1:CType, t2:CType) {\n\t\tswitch (t1) {\n\t\t\tcase CUnknown:\n\t\t\t\treturn t2 == CUnknown;\n\t\t\tcase CEnum(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CEnum(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CClass(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CClass(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CAbstract(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CAbstract(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CTypedef(name, params):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CTypedef(name2, params2):\n\t\t\t\t\t\treturn name == name2 && leq(typeEq, params, params2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CFunction(args, ret):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CFunction(args2, ret2):\n\t\t\t\t\t\treturn leq(function(a:FunctionArgument, b:FunctionArgument) {\n\t\t\t\t\t\t\treturn a.name == b.name && a.opt == b.opt && typeEq(a.t, b.t);\n\t\t\t\t\t\t}, args, args2) && typeEq(ret, ret2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CAnonymous(fields):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CAnonymous(fields2):\n\t\t\t\t\t\treturn leq(function(a, b) return fieldEq(a, b), fields, fields2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase CDynamic(t):\n\t\t\t\tswitch (t2) {\n\t\t\t\t\tcase CDynamic(t2):\n\t\t\t\t\t\tif ((t == null) != (t2 == null))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn t == null || typeEq(t, t2);\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tUnlike `f1 == f2`, this function performs a deep equality check on\n\t\tthe given `ClassField` instances.\n\n\t\tIf `f1` or `f2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function fieldEq(f1:ClassField, f2:ClassField) {\n\t\tif (f1.name != f2.name)\n\t\t\treturn false;\n\t\tif (!typeEq(f1.type, f2.type))\n\t\t\treturn false;\n\t\tif (f1.isPublic != f2.isPublic)\n\t\t\treturn false;\n\t\tif (f1.doc != f2.doc)\n\t\t\treturn false;\n\t\tif (!rightsEq(f1.get, f2.get))\n\t\t\treturn false;\n\t\tif (!rightsEq(f1.set, f2.set))\n\t\t\treturn false;\n\t\tif ((f1.params == null) != (f2.params == null))\n\t\t\treturn false;\n\t\tif (f1.params != null && f1.params.join(\":\") != f2.params.join(\":\"))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tUnlike `c1 == c2`, this function performs a deep equality check on\n\t\tthe arguments of the enum constructors, if exists.\n\n\t\tIf `c1` or `c2` are `null`, the result is unspecified.\n\t**/\n\tpublic static function constructorEq(c1:EnumField, c2:EnumField) {\n\t\tif (c1.name != c2.name)\n\t\t\treturn false;\n\t\tif (c1.doc != c2.doc)\n\t\t\treturn false;\n\t\tif ((c1.args == null) != (c2.args == null))\n\t\t\treturn false;\n\t\tif (c1.args != null && !leq(function(a, b) {\n\t\t\treturn a.name == b.name && a.opt == b.opt && typeEq(a.t, b.t);\n\t\t}, c1.args, c2.args))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n\n/**\n\tThe `CTypeTools` class contains some extra functionalities for handling\n\t`CType` instances.\n**/\nclass CTypeTools {\n\t/**\n\t\tGet the string representation of `CType`.\n\t**/\n\tstatic public function toString(t:CType):String {\n\t\treturn switch (t) {\n\t\t\tcase CUnknown:\n\t\t\t\t\"unknown\";\n\t\t\tcase CClass(name, params), CEnum(name, params), CTypedef(name, params), CAbstract(name, params):\n\t\t\t\tnameWithParams(name, params);\n\t\t\tcase CFunction(args, ret):\n\t\t\t\tif (args.length == 0) {\n\t\t\t\t\t\"Void -> \" + toString(ret);\n\t\t\t\t} else {\n\t\t\t\t\targs.map(functionArgumentName).join(\" -> \") + \" -> \" + toString(ret);\n\t\t\t\t}\n\t\t\tcase CDynamic(d):\n\t\t\t\tif (d == null) {\n\t\t\t\t\t\"Dynamic\";\n\t\t\t\t} else {\n\t\t\t\t\t\"Dynamic<\" + toString(d) + \">\";\n\t\t\t\t}\n\t\t\tcase CAnonymous(fields):\n\t\t\t\t\"{ \" + fields.map(classField).join(\", \") + \"}\";\n\t\t}\n\t}\n\n\tstatic function nameWithParams(name:String, params:Array<CType>) {\n\t\tif (params.length == 0) {\n\t\t\treturn name;\n\t\t}\n\t\treturn name + \"<\" + params.map(toString).join(\", \") + \">\";\n\t}\n\n\tstatic function functionArgumentName(arg:FunctionArgument) {\n\t\treturn (arg.opt ? \"?\" : \"\")\n\t\t\t+ (arg.name == \"\" ? \"\" : arg.name + \":\")\n\t\t\t+ toString(arg.t)\n\t\t\t+ (arg.value == null ? \"\" : \" = \" + arg.value);\n\t}\n\n\tstatic function classField(cf:ClassField) {\n\t\treturn cf.name + \":\" + toString(cf.type);\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tXml node types.\n\n\t@see https://haxe.org/manual/std-Xml.html\n**/\nenum abstract XmlType(Int) {\n\t/**\n\t\tRepresents an XML element type.\n\t**/\n\tvar Element = 0;\n\n\t/**\n\t\tRepresents XML parsed character data type.\n\t**/\n\tvar PCData = 1;\n\n\t/**\n\t\tRepresents XML character data type.\n\t**/\n\tvar CData = 2;\n\n\t/**\n\t\tRepresents an XML comment type.\n\t**/\n\tvar Comment = 3;\n\n\t/**\n\t\tRepresents an XML doctype element type.\n\t**/\n\tvar DocType = 4;\n\n\t/**\n\t\tRepresents an XML processing instruction type.\n\t**/\n\tvar ProcessingInstruction = 5;\n\n\t/**\n\t\tRepresents an XML document type.\n\t**/\n\tvar Document = 6;\n\n\tpublic function toString():String {\n\t\treturn switch (cast this : XmlType) {\n\t\t\tcase Element: \"Element\";\n\t\t\tcase PCData: \"PCData\";\n\t\t\tcase CData: \"CData\";\n\t\t\tcase Comment: \"Comment\";\n\t\t\tcase DocType: \"DocType\";\n\t\t\tcase ProcessingInstruction: \"ProcessingInstruction\";\n\t\t\tcase Document: \"Document\";\n\t\t};\n\t}\n}\n\n/**\n\tCross-platform Xml API.\n\n\t@see https://haxe.org/manual/std-Xml.html\n**/\nclass Xml {\n\t/**\n\t\tXML element type.\n\t**/\n\tstatic public var Element(default, never) = XmlType.Element;\n\n\t/**\n\t\tXML parsed character data type.\n\t**/\n\tstatic public var PCData(default, never) = XmlType.PCData;\n\n\t/**\n\t\tXML character data type.\n\t**/\n\tstatic public var CData(default, never) = XmlType.CData;\n\n\t/**\n\t\tXML comment type.\n\t**/\n\tstatic public var Comment(default, never) = XmlType.Comment;\n\n\t/**\n\t\tXML doctype element type.\n\t**/\n\tstatic public var DocType(default, never) = XmlType.DocType;\n\n\t/**\n\t\tXML processing instruction type.\n\t**/\n\tstatic public var ProcessingInstruction(default, never) = XmlType.ProcessingInstruction;\n\n\t/**\n\t\tXML document type.\n\t**/\n\tstatic public var Document(default, never) = XmlType.Document;\n\n\t/**\n\t\tParses the String into an Xml document.\n\t**/\n\tstatic public function parse(str:String):Xml {\n\t\treturn haxe.xml.Parser.parse(str);\n\t}\n\n\t/**\n\t\tReturns the type of the Xml Node. This should be used before\n\t\taccessing other functions since some might raise an exception\n\t\tif the node type is not correct.\n\t**/\n\tpublic var nodeType(default, null):XmlType;\n\n\t/**\n\t\tReturns the node name of an Element.\n\t**/\n\t@:isVar public var nodeName(get, set):String;\n\n\t/**\n\t\tReturns the node value. Only works if the Xml node is not an Element or a Document.\n\t**/\n\t@:isVar public var nodeValue(get, set):String;\n\n\t/**\n\t\tReturns the parent object in the Xml hierarchy.\n\t\tThe parent can be `null`, an Element or a Document.\n\t**/\n\tpublic var parent(default, null):Xml;\n\n\tvar children:Array<Xml>;\n\tvar attributeMap:Map<String, String>;\n\n\t#if !cppia inline #end function get_nodeName() {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn nodeName;\n\t}\n\n\t#if !cppia inline #end function set_nodeName(v) {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn this.nodeName = v;\n\t}\n\n\t#if !cppia inline #end function get_nodeValue() {\n\t\tif (nodeType == Document || nodeType == Element) {\n\t\t\tthrow 'Bad node type, unexpected $nodeType';\n\t\t}\n\t\treturn nodeValue;\n\t}\n\n\t#if !cppia inline #end function set_nodeValue(v) {\n\t\tif (nodeType == Document || nodeType == Element) {\n\t\t\tthrow 'Bad node type, unexpected $nodeType';\n\t\t}\n\t\treturn this.nodeValue = v;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createElement(name:String):Xml {\n\t\tvar xml = new Xml(Element);\n\t\txml.nodeName = name;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createPCData(data:String):Xml {\n\t\tvar xml = new Xml(PCData);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createCData(data:String):Xml {\n\t\tvar xml = new Xml(CData);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createComment(data:String):Xml {\n\t\tvar xml = new Xml(Comment);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createDocType(data:String):Xml {\n\t\tvar xml = new Xml(DocType);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createProcessingInstruction(data:String):Xml {\n\t\tvar xml = new Xml(ProcessingInstruction);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createDocument():Xml {\n\t\treturn new Xml(Document);\n\t}\n\n\t/**\n\t\tGet the given attribute of an Element node. Returns `null` if not found.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function get(att:String):String {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn attributeMap[att];\n\t}\n\n\t/**\n\t\tSet the given attribute value for an Element node.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function set(att:String, value:String):Void {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\tattributeMap.set(att, value);\n\t}\n\n\t/**\n\t\tRemoves an attribute for an Element node.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function remove(att:String):Void {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\tattributeMap.remove(att);\n\t}\n\n\t/**\n\t\tTells if the Element node has a given attribute.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function exists(att:String):Bool {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn attributeMap.exists(att);\n\t}\n\n\t/**\n\t\tReturns an `Iterator` on all the attribute names.\n\t**/\n\tpublic function attributes():Iterator<String> {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn attributeMap.keys();\n\t}\n\n\t/**\n\t\tReturns an iterator of all child nodes.\n\t\tOnly works if the current node is an Element or a Document.\n\t**/\n\tpublic #if !cppia inline #end function iterator():Iterator<Xml> {\n\t\tensureElementType();\n\t\treturn children.iterator();\n\t}\n\n\t/**\n\t\tReturns an iterator of all child nodes which are Elements.\n\t\tOnly works if the current node is an Element or a Document.\n\t**/\n\tpublic function elements():Iterator<Xml> {\n\t\tensureElementType();\n\t\tvar ret = [for (child in children) if (child.nodeType == Element) child];\n\t\treturn ret.iterator();\n\t}\n\n\t/**\n\t\tReturns an iterator of all child nodes which are Elements with the given nodeName.\n\t\tOnly works if the current node is an Element or a Document.\n\t**/\n\tpublic function elementsNamed(name:String):Iterator<Xml> {\n\t\tensureElementType();\n\t\tvar ret = [\n\t\t\tfor (child in children)\n\t\t\t\tif (child.nodeType == Element && child.nodeName == name) child\n\t\t];\n\t\treturn ret.iterator();\n\t}\n\n\t/**\n\t\tReturns the first child node.\n\t**/\n\tpublic #if !cppia inline #end function firstChild():Xml {\n\t\tensureElementType();\n\t\treturn children[0];\n\t}\n\n\t/**\n\t\tReturns the first child node which is an Element.\n\t**/\n\tpublic function firstElement():Xml {\n\t\tensureElementType();\n\t\tfor (child in children) {\n\t\t\tif (child.nodeType == Element) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tAdds a child node to the Document or Element.\n\t\tA child node can only be inside one given parent node, which is indicated by the `parent` property.\n\t\tIf the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.\n\t\tIf the child node was previously inside a different node, it will be moved to this Document or Element.\n\t**/\n\tpublic function addChild(x:Xml):Void {\n\t\tensureElementType();\n\t\tif (x.parent != null) {\n\t\t\tx.parent.removeChild(x);\n\t\t}\n\t\tchildren.push(x);\n\t\tx.parent = this;\n\t}\n\n\t/**\n\t\tRemoves a child from the Document or Element.\n\t\tReturns true if the child was successfuly removed.\n\t**/\n\tpublic function removeChild(x:Xml):Bool {\n\t\tensureElementType();\n\t\tif (children.remove(x)) {\n\t\t\tx.parent = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tInserts a child at the given position among the other childs.\n\t\tA child node can only be inside one given parent node, which is indicated by the [parent] property.\n\t\tIf the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.\n\t\tIf the child node was previously inside a different node, it will be moved to this Document or Element.\n\t**/\n\tpublic function insertChild(x:Xml, pos:Int):Void {\n\t\tensureElementType();\n\t\tif (x.parent != null) {\n\t\t\tx.parent.children.remove(x);\n\t\t}\n\t\tchildren.insert(pos, x);\n\t\tx.parent = this;\n\t}\n\n\t/**\n\t\tReturns a String representation of the Xml node.\n\t**/\n\tpublic #if !cppia inline #end function toString():String {\n\t\treturn haxe.xml.Printer.print(this);\n\t}\n\n\tfunction new(nodeType:XmlType) {\n\t\tthis.nodeType = nodeType;\n\t\tchildren = [];\n\t\tattributeMap = new Map();\n\t}\n\n\tinline function ensureElementType() {\n\t\tif (nodeType != Document && nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element or Document but found $nodeType';\n\t\t}\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.rtti;\n\nimport haxe.rtti.CType;\nimport haxe.xml.Access;\n\n/**\n\tXmlParser processes the runtime type information (RTTI) which\n\tis stored as a XML string in a static field `__rtti`.\n\n\t@see <https://haxe.org/manual/cr-rtti.html>\n**/\nclass XmlParser {\n\tpublic var root:TypeRoot;\n\n\tvar curplatform:String;\n\n\tpublic function new() {\n\t\troot = new Array();\n\t}\n\n\tpublic function sort(?l:TypeRoot) {\n\t\tif (l == null)\n\t\t\tl = root;\n\t\tl.sort(function(e1, e2) {\n\t\t\tvar n1 = switch e1 {\n\t\t\t\tcase TPackage(p, _, _): \" \" + p;\n\t\t\t\tdefault: TypeApi.typeInfos(e1).path;\n\t\t\t};\n\t\t\tvar n2 = switch e2 {\n\t\t\t\tcase TPackage(p, _, _): \" \" + p;\n\t\t\t\tdefault: TypeApi.typeInfos(e2).path;\n\t\t\t};\n\t\t\tif (n1 > n2)\n\t\t\t\treturn 1;\n\t\t\treturn -1;\n\t\t});\n\t\tfor (x in l)\n\t\t\tswitch (x) {\n\t\t\t\tcase TPackage(_, _, l):\n\t\t\t\t\tsort(l);\n\t\t\t\tcase TClassdecl(c):\n\t\t\t\t\tsortFields(c.fields);\n\t\t\t\t\tsortFields(c.statics);\n\t\t\t\tcase TEnumdecl(_):\n\t\t\t\tcase TAbstractdecl(_):\n\t\t\t\tcase TTypedecl(_):\n\t\t\t}\n\t}\n\n\tfunction sortFields(a:Array<ClassField>) {\n\t\ta.sort(function(f1:ClassField, f2:ClassField) {\n\t\t\tvar v1 = TypeApi.isVar(f1.type);\n\t\t\tvar v2 = TypeApi.isVar(f2.type);\n\t\t\tif (v1 && !v2)\n\t\t\t\treturn -1;\n\t\t\tif (v2 && !v1)\n\t\t\t\treturn 1;\n\t\t\tif (f1.name == \"new\")\n\t\t\t\treturn -1;\n\t\t\tif (f2.name == \"new\")\n\t\t\t\treturn 1;\n\t\t\tif (f1.name > f2.name)\n\t\t\t\treturn 1;\n\t\t\treturn -1;\n\t\t});\n\t}\n\n\tpublic function process(x:Xml, platform:String) {\n\t\tcurplatform = platform;\n\t\txroot(new Access(x));\n\t}\n\n\t// merge inline and not inline\n\tfunction mergeRights(f1:ClassField, f2:ClassField) {\n\t\tif (f1.get == RInline && f1.set == RNo && f2.get == RNormal && f2.set == RMethod) {\n\t\t\tf1.get = RNormal;\n\t\t\tf1.set = RMethod;\n\t\t\treturn true;\n\t\t}\n\t\treturn Type.enumEq(f1.get, f2.get) && Type.enumEq(f1.set, f2.set);\n\t}\n\n\tfunction mergeDoc(f1:ClassField, f2:ClassField) {\n\t\tif (f1.doc == null)\n\t\t\tf1.doc = f2.doc;\n\t\telse if (f2.doc == null)\n\t\t\tf2.doc = f1.doc;\n\t\treturn true;\n\t}\n\n\tfunction mergeFields(f:ClassField, f2:ClassField) {\n\t\treturn TypeApi.fieldEq(f, f2)\n\t\t\t|| (f.name == f2.name && (mergeRights(f, f2) || mergeRights(f2, f)) && mergeDoc(f, f2) && TypeApi.fieldEq(f, f2));\n\t}\n\n\tpublic dynamic function newField(c:Classdef, f:ClassField) {}\n\n\tfunction mergeClasses(c:Classdef, c2:Classdef) {\n\t\t// todo : compare supers & interfaces\n\t\tif (c.isInterface != c2.isInterface)\n\t\t\treturn false;\n\t\tif (curplatform != null)\n\t\t\tc.platforms.push(curplatform);\n\t\tif (c.isExtern != c2.isExtern)\n\t\t\tc.isExtern = false;\n\n\t\tfor (f2 in c2.fields) {\n\t\t\tvar found = null;\n\t\t\tfor (f in c.fields)\n\t\t\t\tif (mergeFields(f, f2)) {\n\t\t\t\t\tfound = f;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (found == null) {\n\t\t\t\tnewField(c, f2);\n\t\t\t\tc.fields.push(f2);\n\t\t\t} else if (curplatform != null)\n\t\t\t\tfound.platforms.push(curplatform);\n\t\t}\n\t\tfor (f2 in c2.statics) {\n\t\t\tvar found = null;\n\t\t\tfor (f in c.statics)\n\t\t\t\tif (mergeFields(f, f2)) {\n\t\t\t\t\tfound = f;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (found == null) {\n\t\t\t\tnewField(c, f2);\n\t\t\t\tc.statics.push(f2);\n\t\t\t} else if (curplatform != null)\n\t\t\t\tfound.platforms.push(curplatform);\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction mergeEnums(e:Enumdef, e2:Enumdef) {\n\t\tif (e.isExtern != e2.isExtern)\n\t\t\treturn false;\n\t\tif (curplatform != null)\n\t\t\te.platforms.push(curplatform);\n\t\tfor (c2 in e2.constructors) {\n\t\t\tvar found = null;\n\t\t\tfor (c in e.constructors)\n\t\t\t\tif (TypeApi.constructorEq(c, c2)) {\n\t\t\t\t\tfound = c;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (found == null)\n\t\t\t\te.constructors.push(c2);\n\t\t\telse if (curplatform != null)\n\t\t\t\tfound.platforms.push(curplatform);\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction mergeTypedefs(t:Typedef, t2:Typedef) {\n\t\tif (curplatform == null)\n\t\t\treturn false;\n\t\tt.platforms.push(curplatform);\n\t\tt.types.set(curplatform, t2.type);\n\t\treturn true;\n\t}\n\n\tfunction mergeAbstracts(a:Abstractdef, a2:Abstractdef) {\n\t\tif (curplatform == null)\n\t\t\treturn false;\n\t\tif (a.to.length != a2.to.length || a.from.length != a2.from.length)\n\t\t\treturn false;\n\t\tfor (i in 0...a.to.length)\n\t\t\tif (!TypeApi.typeEq(a.to[i].t, a2.to[i].t))\n\t\t\t\treturn false;\n\t\tfor (i in 0...a.from.length)\n\t\t\tif (!TypeApi.typeEq(a.from[i].t, a2.from[i].t))\n\t\t\t\treturn false;\n\t\tif (a2.impl != null)\n\t\t\tmergeClasses(a.impl, a2.impl);\n\t\ta.platforms.push(curplatform);\n\t\treturn true;\n\t}\n\n\tfunction merge(t:TypeTree) {\n\t\tvar inf = TypeApi.typeInfos(t);\n\t\tvar pack = inf.path.split(\".\");\n\t\tvar cur = root;\n\t\tvar curpack = new Array();\n\t\tpack.pop();\n\t\tfor (p in pack) {\n\t\t\tvar found = false;\n\t\t\tfor (pk in cur)\n\t\t\t\tswitch (pk) {\n\t\t\t\t\tcase TPackage(pname, _, subs):\n\t\t\t\t\t\tif (pname == p) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tcur = subs;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcurpack.push(p);\n\t\t\tif (!found) {\n\t\t\t\tvar pk = new Array();\n\t\t\t\tcur.push(TPackage(p, curpack.join(\".\"), pk));\n\t\t\t\tcur = pk;\n\t\t\t}\n\t\t}\n\t\tfor (ct in cur) {\n\t\t\tif (ct.match(TPackage(_)))\n\t\t\t\tcontinue;\n\t\t\tvar tinf = TypeApi.typeInfos(ct);\n\n\t\t\t// compare params ?\n\t\t\tif (tinf.path == inf.path) {\n\t\t\t\tvar sameType = true;\n\t\t\t\tif ((tinf.doc == null) != (inf.doc == null)) {\n\t\t\t\t\tif (inf.doc == null)\n\t\t\t\t\t\tinf.doc = tinf.doc;\n\t\t\t\t\telse\n\t\t\t\t\t\ttinf.doc = inf.doc;\n\t\t\t\t}\n\t\t\t\tif (tinf.path == \"haxe._Int64.NativeInt64\")\n\t\t\t\t\tcontinue;\n\t\t\t\tif (tinf.module == inf.module && tinf.doc == inf.doc && tinf.isPrivate == inf.isPrivate)\n\t\t\t\t\tswitch (ct) {\n\t\t\t\t\t\tcase TClassdecl(c):\n\t\t\t\t\t\t\tswitch (t) {\n\t\t\t\t\t\t\t\tcase TClassdecl(c2):\n\t\t\t\t\t\t\t\t\tif (mergeClasses(c, c2))\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tsameType = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TEnumdecl(e):\n\t\t\t\t\t\t\tswitch (t) {\n\t\t\t\t\t\t\t\tcase TEnumdecl(e2):\n\t\t\t\t\t\t\t\t\tif (mergeEnums(e, e2))\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tsameType = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TTypedecl(td):\n\t\t\t\t\t\t\tswitch (t) {\n\t\t\t\t\t\t\t\tcase TTypedecl(td2):\n\t\t\t\t\t\t\t\t\tif (mergeTypedefs(td, td2))\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TAbstractdecl(a):\n\t\t\t\t\t\t\tswitch (t) {\n\t\t\t\t\t\t\t\tcase TAbstractdecl(a2):\n\t\t\t\t\t\t\t\t\tif (mergeAbstracts(a, a2))\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tsameType = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TPackage(_, _, _):\n\t\t\t\t\t\t\tsameType = false;\n\t\t\t\t\t}\n\t\t\t\t// we already have a mapping, but which is incompatible\n\t\t\t\tvar msg = if (tinf.module != inf.module) \"module \" + inf.module + \" should be \" + tinf.module; else if (tinf.doc != inf.doc)\n\t\t\t\t\t\"documentation is different\";\n\t\t\t\telse if (tinf.isPrivate != inf.isPrivate)\n\t\t\t\t\t\"private flag is different\";\n\t\t\t\telse if (!sameType)\n\t\t\t\t\t\"type kind is different\";\n\t\t\t\telse\n\t\t\t\t\t\"could not merge definition\";\n\t\t\t\tthrow \"Incompatibilities between \" + tinf.path + \" in \" + tinf.platforms.join(\",\") + \" and \" + curplatform + \" (\" + msg + \")\";\n\t\t\t}\n\t\t}\n\t\tcur.push(t);\n\t}\n\n\tfunction mkPath(p:String):Path {\n\t\treturn p;\n\t}\n\n\tfunction mkTypeParams(p:String):TypeParams {\n\t\tvar pl = p.split(\":\");\n\t\tif (pl[0] == \"\")\n\t\t\treturn new Array();\n\t\treturn pl;\n\t}\n\n\tfunction mkRights(r:String):Rights {\n\t\treturn switch (r) {\n\t\t\tcase \"null\": RNo;\n\t\t\tcase \"method\": RMethod;\n\t\t\tcase \"dynamic\": RDynamic;\n\t\t\tcase \"inline\": RInline;\n\t\t\tdefault: RCall(r);\n\t\t}\n\t}\n\n\tfunction xerror(c:Access):Dynamic {\n\t\treturn throw \"Invalid \" + c.name;\n\t}\n\n\tfunction xroot(x:Access) {\n\t\tfor (c in x.x.elements())\n\t\t\tmerge(processElement(c));\n\t}\n\n\tpublic function processElement(x:Xml) {\n\t\tvar c = new haxe.xml.Access(x);\n\t\treturn switch (c.name) {\n\t\t\tcase \"class\": TClassdecl(xclass(c));\n\t\t\tcase \"enum\": TEnumdecl(xenum(c));\n\t\t\tcase \"typedef\": TTypedecl(xtypedef(c));\n\t\t\tcase \"abstract\": TAbstractdecl(xabstract(c));\n\t\t\tdefault: xerror(c);\n\t\t}\n\t}\n\n\tfunction xmeta(x:Access):MetaData {\n\t\tvar ml = [];\n\t\tfor (m in x.nodes.m) {\n\t\t\tvar pl = [];\n\t\t\tfor (p in m.nodes.e)\n\t\t\t\tpl.push(p.innerHTML);\n\t\t\tml.push({name: m.att.n, params: pl});\n\t\t}\n\t\treturn ml;\n\t}\n\n\tfunction xoverloads(x:Access):Array<ClassField> {\n\t\tvar l = new Array();\n\t\tfor (m in x.elements) {\n\t\t\tl.push(xclassfield(m));\n\t\t}\n\t\treturn l;\n\t}\n\n\tfunction xpath(x:Access):PathParams {\n\t\tvar path = mkPath(x.att.path);\n\t\tvar params = new Array();\n\t\tfor (c in x.elements)\n\t\t\tparams.push(xtype(c));\n\t\treturn {\n\t\t\tpath: path,\n\t\t\tparams: params,\n\t\t};\n\t}\n\n\tfunction xclass(x:Access):Classdef {\n\t\tvar csuper = null;\n\t\tvar doc = null;\n\t\tvar tdynamic = null;\n\t\tvar interfaces = new Array();\n\t\tvar fields = new Array();\n\t\tvar statics = new Array();\n\t\tvar meta = [];\n\t\tvar isInterface = x.x.exists(\"interface\");\n\t\tfor (c in x.elements)\n\t\t\tswitch (c.name) {\n\t\t\t\tcase \"haxe_doc\":\n\t\t\t\t\tdoc = c.innerData;\n\t\t\t\tcase \"extends\":\n\t\t\t\t\tif (isInterface) {\n\t\t\t\t\t\tinterfaces.push(xpath(c));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcsuper = xpath(c);\n\t\t\t\t\t}\n\t\t\t\tcase \"implements\":\n\t\t\t\t\tinterfaces.push(xpath(c));\n\t\t\t\tcase \"haxe_dynamic\":\n\t\t\t\t\ttdynamic = xtype(new Access(c.x.firstElement()));\n\t\t\t\tcase \"meta\":\n\t\t\t\t\tmeta = xmeta(c);\n\t\t\t\tdefault:\n\t\t\t\t\tif (c.x.exists(\"static\"))\n\t\t\t\t\t\tstatics.push(xclassfield(c));\n\t\t\t\t\telse\n\t\t\t\t\t\tfields.push(xclassfield(c));\n\t\t\t}\n\t\treturn {\n\t\t\tfile: if (x.has.file) x.att.file else null,\n\t\t\tpath: mkPath(x.att.path),\n\t\t\tmodule: if (x.has.module) mkPath(x.att.module) else null,\n\t\t\tdoc: doc,\n\t\t\tisPrivate: x.x.exists(\"private\"),\n\t\t\tisExtern: x.x.exists(\"extern\"),\n\t\t\tisFinal: x.x.exists(\"final\"),\n\t\t\tisInterface: isInterface,\n\t\t\tparams: mkTypeParams(x.att.params),\n\t\t\tsuperClass: csuper,\n\t\t\tinterfaces: interfaces,\n\t\t\tfields: fields,\n\t\t\tstatics: statics,\n\t\t\ttdynamic: tdynamic,\n\t\t\tplatforms: defplat(),\n\t\t\tmeta: meta,\n\t\t};\n\t}\n\n\tfunction xclassfield(x:Access, ?defPublic = false):ClassField {\n\t\tvar e = x.elements;\n\t\tvar t = xtype(e.next());\n\t\tvar doc = null;\n\t\tvar meta = [];\n\t\tvar overloads = null;\n\t\tfor (c in e)\n\t\t\tswitch (c.name) {\n\t\t\t\tcase \"haxe_doc\":\n\t\t\t\t\tdoc = c.innerData;\n\t\t\t\tcase \"meta\":\n\t\t\t\t\tmeta = xmeta(c);\n\t\t\t\tcase \"overloads\":\n\t\t\t\t\toverloads = xoverloads(c);\n\t\t\t\tdefault:\n\t\t\t\t\txerror(c);\n\t\t\t}\n\t\treturn {\n\t\t\tname:x.name, type:t, isPublic:x.x.exists(\"public\") || defPublic, isFinal:x.x.exists(\"final\"), isOverride:x.x.exists(\"override\"),\n\t\t\tline:if (x.has.line) Std.parseInt(x.att.line) else null, doc:doc, get:if (x.has.get) mkRights(x.att.get) else RNormal, set:if (x.has.set)\n\t\t\t\tmkRights(x.att.set)\n\t\t\telse\n\t\t\t\tRNormal, params:if (x.has.params) mkTypeParams(x.att.params) else [], platforms:defplat(), meta:meta, overloads:overloads, expr:if (x.has.expr)\n\t\t\t\tx.att.expr\n\t\t\telse\n\t\t\t\tnull\n\t\t};\n\t}\n\n\tfunction xenum(x:Access):Enumdef {\n\t\tvar cl = new Array();\n\t\tvar doc = null;\n\t\tvar meta = [];\n\t\tfor (c in x.elements)\n\t\t\tif (c.name == \"haxe_doc\")\n\t\t\t\tdoc = c.innerData;\n\t\t\telse if (c.name == \"meta\")\n\t\t\t\tmeta = xmeta(c);\n\t\t\telse\n\t\t\t\tcl.push(xenumfield(c));\n\t\treturn {\n\t\t\tfile: if (x.has.file) x.att.file else null,\n\t\t\tpath: mkPath(x.att.path),\n\t\t\tmodule: if (x.has.module) mkPath(x.att.module) else null,\n\t\t\tdoc: doc,\n\t\t\tisPrivate: x.x.exists(\"private\"),\n\t\t\tisExtern: x.x.exists(\"extern\"),\n\t\t\tparams: mkTypeParams(x.att.params),\n\t\t\tconstructors: cl,\n\t\t\tplatforms: defplat(),\n\t\t\tmeta: meta,\n\t\t};\n\t}\n\n\tfunction xenumfield(x:Access):EnumField {\n\t\tvar args = null;\n\t\tvar docElements = x.x.elementsNamed(\"haxe_doc\");\n\t\tvar xdoc = if (docElements.hasNext()) docElements.next() else null;\n\t\tvar meta = if (x.hasNode.meta) xmeta(x.node.meta) else [];\n\t\tif (x.has.a) {\n\t\t\tvar names = x.att.a.split(\":\");\n\t\t\tvar elts = x.elements;\n\t\t\targs = new Array();\n\t\t\tfor (c in names) {\n\t\t\t\tvar opt = false;\n\t\t\t\tif (c.charAt(0) == \"?\") {\n\t\t\t\t\topt = true;\n\t\t\t\t\tc = c.substr(1);\n\t\t\t\t}\n\t\t\t\targs.push({\n\t\t\t\t\tname: c,\n\t\t\t\t\topt: opt,\n\t\t\t\t\tt: xtype(elts.next()),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tname: x.name,\n\t\t\targs: args,\n\t\t\tdoc: if (xdoc == null) null else new Access(xdoc).innerData,\n\t\t\tmeta: meta,\n\t\t\tplatforms: defplat(),\n\t\t};\n\t}\n\n\tfunction xabstract(x:Access):Abstractdef {\n\t\tvar doc = null, impl = null, athis = null;\n\t\tvar meta = [], to = [], from = [];\n\t\tfor (c in x.elements)\n\t\t\tswitch (c.name) {\n\t\t\t\tcase \"haxe_doc\":\n\t\t\t\t\tdoc = c.innerData;\n\t\t\t\tcase \"meta\":\n\t\t\t\t\tmeta = xmeta(c);\n\t\t\t\tcase \"to\":\n\t\t\t\t\tfor (t in c.elements)\n\t\t\t\t\t\tto.push({t: xtype(new Access(t.x.firstElement())), field: t.has.field ? t.att.field : null});\n\t\t\t\tcase \"from\":\n\t\t\t\t\tfor (t in c.elements)\n\t\t\t\t\t\tfrom.push({t: xtype(new Access(t.x.firstElement())), field: t.has.field ? t.att.field : null});\n\t\t\t\tcase \"impl\":\n\t\t\t\t\timpl = xclass(c.node.resolve(\"class\"));\n\t\t\t\tcase \"this\":\n\t\t\t\t\tathis = xtype(new Access(c.x.firstElement()));\n\t\t\t\tdefault:\n\t\t\t\t\txerror(c);\n\t\t\t}\n\t\treturn {\n\t\t\tfile: if (x.has.file) x.att.file else null,\n\t\t\tpath: mkPath(x.att.path),\n\t\t\tmodule: if (x.has.module) mkPath(x.att.module) else null,\n\t\t\tdoc: doc,\n\t\t\tisPrivate: x.x.exists(\"private\"),\n\t\t\tparams: mkTypeParams(x.att.params),\n\t\t\tplatforms: defplat(),\n\t\t\tmeta: meta,\n\t\t\tathis: athis,\n\t\t\tto: to,\n\t\t\tfrom: from,\n\t\t\timpl: impl\n\t\t};\n\t}\n\n\tfunction xtypedef(x:Access):Typedef {\n\t\tvar doc = null;\n\t\tvar t = null;\n\t\tvar meta = [];\n\t\tfor (c in x.elements)\n\t\t\tif (c.name == \"haxe_doc\")\n\t\t\t\tdoc = c.innerData;\n\t\t\telse if (c.name == \"meta\")\n\t\t\t\tmeta = xmeta(c);\n\t\t\telse\n\t\t\t\tt = xtype(c);\n\t\tvar types = new haxe.ds.StringMap();\n\t\tif (curplatform != null)\n\t\t\ttypes.set(curplatform, t);\n\t\treturn {\n\t\t\tfile: if (x.has.file) x.att.file else null,\n\t\t\tpath: mkPath(x.att.path),\n\t\t\tmodule: if (x.has.module) mkPath(x.att.module) else null,\n\t\t\tdoc: doc,\n\t\t\tisPrivate: x.x.exists(\"private\"),\n\t\t\tparams: mkTypeParams(x.att.params),\n\t\t\ttype: t,\n\t\t\ttypes: types,\n\t\t\tplatforms: defplat(),\n\t\t\tmeta: meta,\n\t\t};\n\t}\n\n\tfunction xtype(x:Access):CType {\n\t\treturn switch (x.name) {\n\t\t\tcase \"unknown\":\n\t\t\t\tCUnknown;\n\t\t\tcase \"e\":\n\t\t\t\tCEnum(mkPath(x.att.path), xtypeparams(x));\n\t\t\tcase \"c\":\n\t\t\t\tCClass(mkPath(x.att.path), xtypeparams(x));\n\t\t\tcase \"t\":\n\t\t\t\tCTypedef(mkPath(x.att.path), xtypeparams(x));\n\t\t\tcase \"x\":\n\t\t\t\tCAbstract(mkPath(x.att.path), xtypeparams(x));\n\t\t\tcase \"f\":\n\t\t\t\tvar args = new Array();\n\t\t\t\tvar aname = x.att.a.split(\":\");\n\t\t\t\tvar eargs = aname.iterator();\n\t\t\t\tvar evalues = x.has.v ? x.att.v.split(\":\").iterator() : null;\n\t\t\t\tfor (e in x.elements) {\n\t\t\t\t\tvar opt = false;\n\t\t\t\t\tvar a = eargs.hasNext() ? eargs.next() : null;\n\t\t\t\t\tif (a == null)\n\t\t\t\t\t\ta = \"\";\n\t\t\t\t\tif (a.charAt(0) == \"?\") {\n\t\t\t\t\t\topt = true;\n\t\t\t\t\t\ta = a.substr(1);\n\t\t\t\t\t}\n\t\t\t\t\tvar v = evalues == null || !evalues.hasNext() ? null : evalues.next();\n\t\t\t\t\targs.push({\n\t\t\t\t\t\tname: a,\n\t\t\t\t\t\topt: opt,\n\t\t\t\t\t\tt: xtype(e),\n\t\t\t\t\t\tvalue: v == \"\" ? null : v\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tvar ret = args[args.length - 1];\n\t\t\t\targs.remove(ret);\n\t\t\t\tCFunction(args, ret.t);\n\t\t\tcase \"a\":\n\t\t\t\tvar fields = new Array();\n\t\t\t\tfor (f in x.elements) {\n\t\t\t\t\tvar f = xclassfield(f, true);\n\t\t\t\t\tf.platforms = new Array(); // platforms selection are on the type itself, not on fields\n\t\t\t\t\tfields.push(f);\n\t\t\t\t}\n\t\t\t\tCAnonymous(fields);\n\t\t\tcase \"d\":\n\t\t\t\tvar t = null;\n\t\t\t\tvar tx = x.x.firstElement();\n\t\t\t\tif (tx != null)\n\t\t\t\t\tt = xtype(new Access(tx));\n\t\t\t\tCDynamic(t);\n\t\t\tdefault:\n\t\t\t\txerror(x);\n\t\t}\n\t}\n\n\tfunction xtypeparams(x:Access):Array<CType> {\n\t\tvar p = new Array();\n\t\tfor (c in x.elements)\n\t\t\tp.push(xtype(c));\n\t\treturn p;\n\t}\n\n\tfunction defplat() {\n\t\tvar l = new Array();\n\t\tif (curplatform != null)\n\t\t\tl.push(curplatform);\n\t\treturn l;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}