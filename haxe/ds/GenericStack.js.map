{"sourceRoot":"","names":[],"mappings":"QAKA;;;;;;;AC2BA;AAAA;CAIC,eAA+B,CAC9B;EAAA,WAAW,IACX;EAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;AA8Dd;AAAA;CAMC,MAAsB;;;;;;CAKtB,UACC;EAAA,YAAO,gBAAmB,MAAM;;;;;;;;CAQjC,QACQ;EAAA,GAAI,cAAQ,MAAM;GAAA;GAAU;GAAA;;;;;;;;;CAQpC,MAAqC,CACpC;EAAA,QAAQ,UACR;EAAA,GAAI,MAAK,MACR;GAAA,AAAO;GACH,OACJ;GAAA,YAAO,OACP;GAAA,AAAO;;;;;;;CAOT,UACC;EAAA,AAAO,OAAC,aAAQ;;;;;;;;;;;;CAYjB,UAAiC,CAChC;EAAA,WAA0B,KAC1B;EAAA,QAAQ,UACR;EAAA,MAAO,MAAK,MAAZ,CACC;GAAA,GAAI,UAAS,GAAG,CACf;IAAA,GAAI,SAAQ,MACX;KAAA,YAAO;KAEP;KAAA,YAAY;MACb;IAAA;KAED;GAAA,OAAO,EACP;GAAA,IAAI;IAEL;EAAA,AAAO,OAAC,KAAK;;;;;;CAed,WAAuC,CACtC;EAAA,QAAQ,UACR;EAAA,AAAO,QACG,uBACR;GAAA,AAAO,YAAK;KAEP,oBAAW,CAChB;GAAA,QAAQ,EACR;GAAA,IAAI,OACJ;GAAA,AAAO;;;;;;;CASV,WAA2B,CAC1B;EAAA,QAAQ,YACR;EAAA,QAAQ,UACR;EAAA,MAAO,MAAK,MAAZ,CACC;GAAA,OAAO,OACP;GAAA,IAAI;IAEL;EAAA,AAAO,aAAM,OAAO,OAAO","version":3,"file":"GenericStack.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.1.4/std/haxe/ds/GenericStack.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tA cell of `haxe.ds.GenericStack`.\n\n\t@see https://haxe.org/manual/std-GenericStack.html\n**/\n#if (flash || cpp)\n@:generic\n#end\nclass GenericCell<T> {\n\tpublic var elt:T;\n\tpublic var next:GenericCell<T>;\n\n\tpublic function new(elt, next) {\n\t\tthis.elt = elt;\n\t\tthis.next = next;\n\t}\n}\n\n#if cpp\n@:generic\n#if cppia\nprivate class GenericStackIterator<T> {\n\tpublic var current:GenericCell<T>;\n\n\tpublic function hasNext():Bool {\n\t\treturn current != null;\n\t}\n\n\tpublic function next():T {\n\t\tvar result = current.elt;\n\t\tcurrent = current.next;\n\t\treturn result;\n\t}\n\n\tpublic function new(head) {\n\t\tcurrent = head;\n\t}\n}\n#else\nprivate class GenericStackIterator<T> extends cpp.FastIterator<T> {\n\tpublic var current:GenericCell<T>;\n\n\toverride public function hasNext():Bool {\n\t\treturn current != null;\n\t}\n\n\toverride public function next():T {\n\t\tvar result = current.elt;\n\t\tcurrent = current.next;\n\t\treturn result;\n\t}\n\n\tpublic function new(head) {\n\t\tcurrent = head;\n\t}\n}\n#end\n#end\n\n/**\n\tA stack of elements.\n\n\tThis class is generic, which means one type is generated for each type\n\tparameter T on static targets. For example:\n\n\t- `new GenericStack<Int>()` generates `GenericStack_Int`\n\t- `new GenericStack<String>()` generates `GenericStack_String`\n\n\tThe generated name is an implementation detail and should not be relied\n\tupon.\n\n\t@see https://haxe.org/manual/std-GenericStack.html\n**/\n#if (flash || cpp)\n@:generic\n#end\nclass GenericStack<T> {\n\tpublic var head:GenericCell<T>;\n\n\t/**\n\t\tCreates a new empty GenericStack.\n\t**/\n\tpublic function new() {}\n\n\t/**\n\t\tPushes element `item` onto the stack.\n\t**/\n\tpublic inline function add(item:T) {\n\t\thead = new GenericCell<T>(item, head);\n\t}\n\n\t/**\n\t\tReturns the topmost stack element without removing it.\n\n\t\tIf the stack is empty, null is returned.\n\t**/\n\tpublic inline function first():Null<T> {\n\t\treturn if (head == null) null else head.elt;\n\t}\n\n\t/**\n\t\tReturns the topmost stack element and removes it.\n\n\t\tIf the stack is empty, null is returned.\n\t**/\n\tpublic inline function pop():Null<T> {\n\t\tvar k = head;\n\t\tif (k == null)\n\t\t\treturn null;\n\t\telse {\n\t\t\thead = k.next;\n\t\t\treturn k.elt;\n\t\t}\n\t}\n\n\t/**\n\t\tTells if the stack is empty.\n\t**/\n\tpublic inline function isEmpty():Bool {\n\t\treturn (head == null);\n\t}\n\n\t/**\n\t\tRemoves the first element which is equal to `v` according to the `==`\n\t\toperator.\n\n\t\tThis method traverses the stack until it finds a matching element and\n\t\tunlinks it, returning true.\n\n\t\tIf no matching element is found, false is returned.\n\t**/\n\tpublic function remove(v:T):Bool {\n\t\tvar prev:GenericCell<T> = null;\n\t\tvar l = head;\n\t\twhile (l != null) {\n\t\t\tif (l.elt == v) {\n\t\t\t\tif (prev == null)\n\t\t\t\t\thead = l.next;\n\t\t\t\telse\n\t\t\t\t\tprev.next = l.next;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l.next;\n\t\t}\n\t\treturn (l != null);\n\t}\n\n\t#if cpp\n\t/**\n\t\tReturns an iterator over the elements of `this` GenericStack.\n\t**/\n\tpublic function iterator():Iterator<T> {\n\t\treturn new GenericStackIterator<T>(head);\n\t}\n\t#else\n\n\t/**\n\t\tReturns an iterator over the elements of `this` GenericStack.\n\t**/\n\tpublic function iterator():Iterator<T> {\n\t\tvar l = head;\n\t\treturn {\n\t\t\thasNext: function() {\n\t\t\t\treturn l != null;\n\t\t\t},\n\t\t\tnext: function() {\n\t\t\t\tvar k = l;\n\t\t\t\tl = k.next;\n\t\t\t\treturn k.elt;\n\t\t\t}\n\t\t};\n\t}\n\t#end\n\n\t/**\n\t\tReturns a String representation of `this` GenericStack.\n\t**/\n\tpublic function toString() {\n\t\tvar a = new Array();\n\t\tvar l = head;\n\t\twhile (l != null) {\n\t\t\ta.push(l.elt);\n\t\t\tl = l.next;\n\t\t}\n\t\treturn \"{\" + a.join(\",\") + \"}\";\n\t}\n}\n"]}