{"sourceRoot":"","names":[],"mappings":"QAmHA;;;;;;;ACnFA,iCAAkB,EAAlB;CAIC,iBAJiB,SAAlB,YAAkB;CACjB,KADiB;CAEjB,MAFD,YAAkB;;;;;;;;;;;;;;;;;AAoElB,kCAAmB,EAAnB;CAMC;CALA,MArED,YAoEmB;;;;;CAWlB,UAXkB,IDrER;;;;;;;CCyFV,SDtCD,OCkBmB;;;;;;;CA6BlB,OD/CD,OCkBmB;;;;;CA0ClB,WDjDmC;;;;;;;;;;;CC8DnC,UAvDkB,IDPiB;;;;;CC2FnC,YDrED,SCfmB;;;;;CAsGlB,YCrLgB","version":3,"file":"GenericStack.d.ts.map","sources":["../../../../../../../haxe/versions/4.1.1/std/StdTypes.hx","../../../../../../../haxe/versions/4.1.1/std/haxe/ds/GenericStack.hx","../../../../../../../haxe/versions/4.1.1/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tA cell of `haxe.ds.GenericStack`.\n\n\t@see https://haxe.org/manual/std-GenericStack.html\n**/\n#if (flash || cpp)\n@:generic\n#end\nclass GenericCell<T> {\n\tpublic var elt:T;\n\tpublic var next:GenericCell<T>;\n\n\tpublic function new(elt, next) {\n\t\tthis.elt = elt;\n\t\tthis.next = next;\n\t}\n}\n\n#if cpp\n@:generic\n#if cppia\nprivate class GenericStackIterator<T> {\n\tpublic var current:GenericCell<T>;\n\n\tpublic function hasNext():Bool {\n\t\treturn current != null;\n\t}\n\n\tpublic function next():T {\n\t\tvar result = current.elt;\n\t\tcurrent = current.next;\n\t\treturn result;\n\t}\n\n\tpublic function new(head) {\n\t\tcurrent = head;\n\t}\n}\n#else\nprivate class GenericStackIterator<T> extends cpp.FastIterator<T> {\n\tpublic var current:GenericCell<T>;\n\n\toverride public function hasNext():Bool {\n\t\treturn current != null;\n\t}\n\n\toverride public function next():T {\n\t\tvar result = current.elt;\n\t\tcurrent = current.next;\n\t\treturn result;\n\t}\n\n\tpublic function new(head) {\n\t\tcurrent = head;\n\t}\n}\n#end\n#end\n\n/**\n\tA stack of elements.\n\n\tThis class is generic, which means one type is generated for each type\n\tparameter T on static targets. For example:\n\n\t- `new GenericStack<Int>()` generates `GenericStack_Int`\n\t- `new GenericStack<String>()` generates `GenericStack_String`\n\n\tThe generated name is an implementation detail and should not be relied\n\tupon.\n\n\t@see https://haxe.org/manual/std-GenericStack.html\n**/\n#if (flash || cpp)\n@:generic\n#end\nclass GenericStack<T> {\n\tpublic var head:GenericCell<T>;\n\n\t/**\n\t\tCreates a new empty GenericStack.\n\t**/\n\tpublic function new() {}\n\n\t/**\n\t\tPushes element `item` onto the stack.\n\t**/\n\tpublic inline function add(item:T) {\n\t\thead = new GenericCell<T>(item, head);\n\t}\n\n\t/**\n\t\tReturns the topmost stack element without removing it.\n\n\t\tIf the stack is empty, null is returned.\n\t**/\n\tpublic inline function first():Null<T> {\n\t\treturn if (head == null) null else head.elt;\n\t}\n\n\t/**\n\t\tReturns the topmost stack element and removes it.\n\n\t\tIf the stack is empty, null is returned.\n\t**/\n\tpublic inline function pop():Null<T> {\n\t\tvar k = head;\n\t\tif (k == null)\n\t\t\treturn null;\n\t\telse {\n\t\t\thead = k.next;\n\t\t\treturn k.elt;\n\t\t}\n\t}\n\n\t/**\n\t\tTells if the stack is empty.\n\t**/\n\tpublic inline function isEmpty():Bool {\n\t\treturn (head == null);\n\t}\n\n\t/**\n\t\tRemoves the first element which is equal to `v` according to the `==`\n\t\toperator.\n\n\t\tThis method traverses the stack until it finds a matching element and\n\t\tunlinks it, returning true.\n\n\t\tIf no matching element is found, false is returned.\n\t**/\n\tpublic function remove(v:T):Bool {\n\t\tvar prev:GenericCell<T> = null;\n\t\tvar l = head;\n\t\twhile (l != null) {\n\t\t\tif (l.elt == v) {\n\t\t\t\tif (prev == null)\n\t\t\t\t\thead = l.next;\n\t\t\t\telse\n\t\t\t\t\tprev.next = l.next;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l.next;\n\t\t}\n\t\treturn (l != null);\n\t}\n\n\t#if cpp\n\t/**\n\t\tReturns an iterator over the elements of `this` GenericStack.\n\t**/\n\tpublic function iterator():Iterator<T> {\n\t\treturn new GenericStackIterator<T>(head);\n\t}\n\t#else\n\n\t/**\n\t\tReturns an iterator over the elements of `this` GenericStack.\n\t**/\n\tpublic function iterator():Iterator<T> {\n\t\tvar l = head;\n\t\treturn {\n\t\t\thasNext: function() {\n\t\t\t\treturn l != null;\n\t\t\t},\n\t\t\tnext: function() {\n\t\t\t\tvar k = l;\n\t\t\t\tl = k.next;\n\t\t\t\treturn k.elt;\n\t\t\t}\n\t\t};\n\t}\n\t#end\n\n\t/**\n\t\tReturns a String representation of `this` GenericStack.\n\t**/\n\tpublic function toString() {\n\t\tvar a = new Array();\n\t\tvar l = head;\n\t\twhile (l != null) {\n\t\t\ta.push(l.elt);\n\t\t\tl = l.next;\n\t\t}\n\t\treturn \"{\" + a.join(\",\") + \"}\";\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}