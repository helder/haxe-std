{"sourceRoot":"","names":[],"mappings":"QAKA;;;;;;ACuBA;AAAA;;;;;;;;;;;;CAaC,uBAAgF,CAE/E;EAAA,GAAI,SAAQ,MACX;GAAA,AAAO;IACR;EAAA,aAAa,EAAb;EAAA;EAAA,YAAiC,EAAjC;EAAA,YAA4C,EAC5C;EAAA;EAAA;EAAA;EAAA,WAAsB,KACtB;EAAA,MAAO,OAAM,CACZ;GAAA,IAAI,KACJ;GAAA,OAAO,KACP;GAAA,OAAO,KACP;GAAA,UAAU,EACV;GAAA,MAAO,MAAK,MAAZ,CACC;IAAA,UACA;IAAA,IAAI,EACJ;IAAA,QAAQ,EACR;IAAA,SAAU,EAAV;IAAA,UAAc,OAAd;IAAA,YAAc,KAAd;KAAA,aACC;KAAA,QACA;KAAA,IAAI,OACJ;KAAA,GAAI,MAAK,MACR;MAAA;;MAEF;IAAA,QAAQ,OACR;IAAA,MAAO,SAAQ,KAAK,AAAC,QAAQ,KAAK,KAAK,MAAvC,CACC;KAAA,GAAI,UAAS,GAAG,CACf;MAAA,IAAI,EACJ;MAAA,IAAI,OACJ;MAAA;MACM,SAAI,UAAS,KAAK,KAAK,QAAQ,IAAI,GAAG,MAAM,GAAG,CACrD;MAAA,IAAI,EACJ;MAAA,IAAI,OACJ;MAAA;MACM,OACN;MAAA,IAAI,EACJ;MAAA,IAAI,OACJ;MAAA;OAED;KAAA,GAAI,SAAQ,MACX;MAAA,YAAY;MAEZ;MAAA,OAAO;OACR;KAAA,SAAS,KACT;KAAA,OAAO;MAER;IAAA,IAAI;KAEL;GAAA,YAAY,KACZ;GAAA,GAAI,YAAW,GACd;IAAA;KACD;GAAA,UAAU;IAEX;EAAA,YAAY,KACZ;EAAA,AAAO;;;;;;CAMR,mCAAoF,CACnF;EAAA,GAAI,SAAQ,MACX;GAAA,AAAO;IACR;EAAA,aAAa,EAAb;EAAA;EAAA,YAAiC,EAAjC;EAAA,YAA4C,EAC5C;EAAA;EAAA;EAAA;EAAA,SACA;EAAA,MAAO,OAAM,CACZ;GAAA,IAAI,KACJ;GAAA,OAAO,KACP;GAAA,OAAO,KACP;GAAA,UAAU,EACV;GAAA,MAAO,MAAK,MAAZ,CACC;IAAA,UACA;IAAA,IAAI,EACJ;IAAA,QAAQ,EACR;IAAA,SAAU,EAAV;IAAA,UAAc,OAAd;IAAA,YAAc,KAAd;KAAA,aACC;KAAA,QACA;KAAA,IAAI,OACJ;KAAA,GAAI,MAAK,MACR;MAAA;;MAEF;IAAA,QAAQ,OACR;IAAA,MAAO,SAAQ,KAAK,AAAC,QAAQ,KAAK,KAAK,MAAvC,CACC;KAAA,GAAI,UAAS,GAAG,CACf;MAAA,IAAI,EACJ;MAAA,IAAI,OACJ;MAAA;MACM,SAAI,UAAS,KAAK,KAAK,QAAQ,IAAI,GAAG,MAAM,GAAG,CACrD;MAAA,IAAI,EACJ;MAAA,IAAI,OACJ;MAAA;MACM,OACN;MAAA,IAAI,EACJ;MAAA,IAAI,OACJ;MAAA;OAED;KAAA,GAAI,SAAQ,MACX;MAAA,YAAY;MAEZ;MAAA,OAAO;OACR;KAAA,OAAO;MAER;IAAA,IAAI;KAEL;GAAA,YAAY,KACZ;GAAA,GAAI,YAAW,GACd;IAAA;KACD;GAAA,UAAU;IAEX;EAAA,AAAO","version":3,"file":"ListSort.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.0.3/std/haxe/ds/ListSort.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tListSort provides a stable implementation of merge sort through its `sort`\n\tmethod. It has a O(N.log(N)) complexity and does not require additional memory allocation.\n**/\nclass ListSort {\n\t// Note : we prefer [inline] over [@:generic] here since we want to inline the comparison function as well\n\n\t/**\n\t\tSorts List `lst` according to the comparison function `cmp`, where\n\t\t`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a\n\t\tnegative Int if `x < y`.\n\n\t\tThis operation modifies List `a` in place and returns its head once modified.\n\t\tThe `prev` of the head is set to the tail of the sorted list.\n\n\t\tIf `list` or `cmp` are null, the result is unspecified.\n\t**/\n\tpublic static inline function sort<T:{prev:T, next:T}>(list:T, cmp:T->T->Int):T {\n\t\t// ported from http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\t\tif (list == null)\n\t\t\treturn null;\n\t\tvar insize = 1, nmerges, psize = 0, qsize = 0;\n\t\tvar p, q, e, tail:T = null;\n\t\twhile (true) {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnmerges = 0;\n\t\t\twhile (p != null) {\n\t\t\t\tnmerges++;\n\t\t\t\tq = p;\n\t\t\t\tpsize = 0;\n\t\t\t\tfor (i in 0...insize) {\n\t\t\t\t\tpsize++;\n\t\t\t\t\tq = q.next;\n\t\t\t\t\tif (q == null)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tqsize = insize;\n\t\t\t\twhile (psize > 0 || (qsize > 0 && q != null)) {\n\t\t\t\t\tif (psize == 0) {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.next;\n\t\t\t\t\t\tqsize--;\n\t\t\t\t\t} else if (qsize == 0 || q == null || cmp(p, q) <= 0) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.next;\n\t\t\t\t\t\tpsize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.next;\n\t\t\t\t\t\tqsize--;\n\t\t\t\t\t}\n\t\t\t\t\tif (tail != null)\n\t\t\t\t\t\ttail.next = e;\n\t\t\t\t\telse\n\t\t\t\t\t\tlist = e;\n\t\t\t\t\te.prev = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\t\t\t\tp = q;\n\t\t\t}\n\t\t\ttail.next = null;\n\t\t\tif (nmerges <= 1)\n\t\t\t\tbreak;\n\t\t\tinsize *= 2;\n\t\t}\n\t\tlist.prev = tail;\n\t\treturn list;\n\t}\n\n\t/**\n\t\tSame as `sort` but on single linked list.\n\t**/\n\tpublic static inline function sortSingleLinked<T:{next:T}>(list:T, cmp:T->T->Int):T {\n\t\tif (list == null)\n\t\t\treturn null;\n\t\tvar insize = 1, nmerges, psize = 0, qsize = 0;\n\t\tvar p, q, e, tail:T;\n\t\twhile (true) {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnmerges = 0;\n\t\t\twhile (p != null) {\n\t\t\t\tnmerges++;\n\t\t\t\tq = p;\n\t\t\t\tpsize = 0;\n\t\t\t\tfor (i in 0...insize) {\n\t\t\t\t\tpsize++;\n\t\t\t\t\tq = q.next;\n\t\t\t\t\tif (q == null)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tqsize = insize;\n\t\t\t\twhile (psize > 0 || (qsize > 0 && q != null)) {\n\t\t\t\t\tif (psize == 0) {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.next;\n\t\t\t\t\t\tqsize--;\n\t\t\t\t\t} else if (qsize == 0 || q == null || cmp(p, q) <= 0) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.next;\n\t\t\t\t\t\tpsize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.next;\n\t\t\t\t\t\tqsize--;\n\t\t\t\t\t}\n\t\t\t\t\tif (tail != null)\n\t\t\t\t\t\ttail.next = e;\n\t\t\t\t\telse\n\t\t\t\t\t\tlist = e;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\t\t\t\tp = q;\n\t\t\t}\n\t\t\ttail.next = null;\n\t\t\tif (nmerges <= 1)\n\t\t\t\tbreak;\n\t\t\tinsize *= 2;\n\t\t}\n\t\treturn list;\n\t}\n}\n"]}