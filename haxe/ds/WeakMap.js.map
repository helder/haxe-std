{"sourceRoot":"","names":[],"mappings":"QAKA;QC6DA;QC7DA;;;;;;;;;;;;;AC4BA;AAAA;CAI4B,MAC1B;EAAA,MAAM,4BAA4C,qCAA5C;;;;;;CAMP,gBAAyC;;;;;;CAKzC,SACC;EAAA,AAAO;;;;;;CAMR,YACC;EAAA,AAAO;;;;;;CAMR,YACC;EAAA,AAAO;;;;;;CAMR,OACC;EAAA,AAAO;;;;;;CAMR,WACC;EAAA,AAAO;;;;;;CAMR,mBACC;EAAA,AAAO;;;;;;CAMR,OACC;EAAA,AAAO;;;;;;CAMR,WACC;EAAA,AAAO;;;;;;CAMR,QAA6B","version":3,"file":"WeakMap.js.map","sources":["../../../../../../../haxe/versions/4.2.2/std/haxe/exceptions/NotImplementedException.hx","../../../../../../../haxe/versions/4.2.2/std/haxe/Constraints.hx","../../../../../../../haxe/haxe_libraries/genes/0.4.1/github/179cb495c2d785321879e8afe765aa04d639783d/src/genes/Register.hx","../../../../../../../haxe/versions/4.2.2/std/haxe/ds/WeakMap.hx"],"sourcesContent":["package haxe.exceptions;\n\n/**\n\tAn exception that is thrown when requested function or operation does not have an implementation.\n**/\nclass NotImplementedException extends PosException {\n\tpublic function new(message:String = 'Not implemented', ?previous:Exception, ?pos:PosInfos):Void {\n\t\tsuper(message, previous, pos);\n\t}\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\n/**\n\tThis type unifies with any function type.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\n@:callable\nabstract Function(Dynamic) {}\n\n/**\n\tThis type unifies with an enum instance if all constructors of the enum\n\trequire no arguments.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract FlatEnum(Dynamic) {}\n\n/**\n\tThis type unifies with anything but `Void`.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract NotVoid(Dynamic) { }\n\n/**\n\tThis type unifies with any instance of classes that have a constructor\n\twhich\n\n\t  * is `public` and\n\t  * unifies with the type used for type parameter `T`.\n\n\tIf a type parameter `A` is assigned to a type parameter `B` which is constrained\n\tto `Constructible<T>`, A must be explicitly constrained to\n\t`Constructible<T>` as well.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract Constructible<T>(Dynamic) {}\n\ninterface IMap<K, V> {\n\tfunction get(k:K):Null<V>;\n\tfunction set(k:K, v:V):Void;\n\tfunction exists(k:K):Bool;\n\tfunction remove(k:K):Bool;\n\tfunction keys():Iterator<K>;\n\tfunction iterator():Iterator<V>;\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n\tfunction copy():IMap<K, V>;\n\tfunction toString():String;\n\tfunction clear():Void;\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : undefined');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a)) js.Syntax.code('a.iterator()') else\n      untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tWeakMap allows mapping of object keys to arbitrary values.\n\n\tThe keys are considered to be weak references on static targets.\n\n\tSee `Map` for documentation details.\n\n\t@see https://haxe.org/manual/std-Map.html\n**/\nclass WeakMap<K:{}, V> implements haxe.Constraints.IMap<K, V> {\n\t/**\n\t\tCreates a new WeakMap.\n\t**/\n\tpublic function new():Void {\n\t\tthrow new haxe.exceptions.NotImplementedException(\"Not implemented for this platform\");\n\t}\n\n\t/**\n\t\tSee `Map.set`\n\t**/\n\tpublic function set(key:K, value:V):Void {}\n\n\t/**\n\t\tSee `Map.get`\n\t**/\n\tpublic function get(key:K):Null<V> {\n\t\treturn null;\n\t}\n\n\t/**\n\t\tSee `Map.exists`\n\t**/\n\tpublic function exists(key:K):Bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t\tSee `Map.remove`\n\t**/\n\tpublic function remove(key:K):Bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t\tSee `Map.keys`\n\t**/\n\tpublic function keys():Iterator<K> {\n\t\treturn null;\n\t}\n\n\t/**\n\t\tSee `Map.iterator`\n\t**/\n\tpublic function iterator():Iterator<V> {\n\t\treturn null;\n\t}\n\n\t/**\n\t\tSee `Map.keyValueIterator`\n\t**/\n\tpublic inline function keyValueIterator():KeyValueIterator<K, V> {\n\t\treturn null;\n\t}\n\n\t/**\n\t\tSee `Map.copy`\n\t**/\n\tpublic function copy():WeakMap<K, V> {\n\t\treturn null;\n\t}\n\n\t/**\n\t\tSee `Map.toString`\n\t**/\n\tpublic function toString():String {\n\t\treturn null;\n\t}\n\n\t/**\n\t\tSee `Map.clear`\n\t**/\n\tpublic function clear():Void {}\n}\n"]}