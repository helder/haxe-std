{"sourceRoot":"","names":[],"mappings":"QAmBA;QCDA;QCAA;QCYA;QCzBA;;AC4CA;AAAA;;;;;;;;;CAwBC,8BACC;EAAA,UAAS,KAAK;;;;;;;;;;;;;;;;;;CAiBD,uBACb;EAAA,AAAO,iBAAS;;;;;;;;CAOjB,0BACC;EAAA,AAAO,oBAAY;;;;;;;;;CAQpB,0BACC;EAAA,AAAO,oBAAY;;;;;;;;CAOpB,mBACC;EAAA,AAAO;;;;;;;;CAQR,uBACC;EAAA,AAAO;;;;;;;;CAQR,+BACC;EAAA,AAAO;;;;;;;;CAQR,mBACC;EAAA,AAAO,OAAK;;;;;;;;CAQb,uBACC;EAAA,AAAO;;;;;;CAMR,oBACC;EAAA;;CAG4B,+BAA8C,CAC1E;EAAA,UAAS,GAAG,GACZ;EAAA,AAAO;;CAGH,sBACJ;EAAA,AAAO;;CAGH,mBACJ;EAAA,AAAO;;CAGH,4BACJ;EAAA,AAAO;;CAGH,sBACJ;EAAA,AAAO;;CAGD,0BACN;EAAA,AAAO,OAAK;;CAGN,uBACN;EAAA,AAAO,OAAK;;CAGN,0BACN;EAAA,AAAO,OAAK","version":3,"file":"Map.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/haxe/ds/StringMap.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/haxe/ds/ObjectMap.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/haxe/ds/IntMap.hx","../../../../../../../haxe/versions/4.0.1/std/haxe/ds/EnumValueMap.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.0.1/std/haxe/ds/Map.hx"],"sourcesContent":["package haxe.ds;\n\n#if !js\nextern class StringMap<T> implements haxe.Constraints.IMap<String, T> {\n  public function new(): Void;\n  public function set(key: String, value: T): Void;\n  public function get(key: String): Null<T>;\n  public function exists(key: String): Bool;\n  public function remove(key: String): Bool;\n  public function keys(): Iterator<String>;\n  public function iterator(): Iterator<T>;\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<String,\n    T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n  public function copy(): StringMap<T>;\n  public function toString(): String;\n  public function clear(): Void;\n}\n#else\nclass StringMap<T> extends genes.util.EsMap<String, T> implements haxe.Constraints.IMap<String, T> {\n  public inline function copy(): StringMap<T> {\n    var copied = new genes.util.EsMap();\n    copied.inst = new js.lib.Map(inst);\n    return cast copied;\n  }\n\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<String,\n    T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n}\n#end\n","package haxe.ds;\n\n#if !js\nextern class ObjectMap<K:{}, V> implements haxe.Constraints.IMap<K, V> {\n  public function new(): Void;\n  public function set(key: K, value: V): Void;\n  public function get(key: K): Null<V>;\n  public function exists(key: K): Bool;\n  public function remove(key: K): Bool;\n  public function keys(): Iterator<K>;\n  public function iterator(): Iterator<V>;\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<K, V>\n    return new haxe.iterators.MapKeyValueIterator(this);\n  public function copy(): ObjectMap<K, V>;\n  public function toString(): String;\n  public function clear(): Void;\n}\n#else\nclass ObjectMap<K:{},\n  V> extends genes.util.EsMap<K, V> implements haxe.Constraints.IMap<K, V> {\n  public inline function copy(): ObjectMap<K, V> {\n    var copied = new genes.util.EsMap();\n    copied.inst = new js.lib.Map(inst);\n    return cast copied;\n  }\n\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<K, V>\n    return new haxe.iterators.MapKeyValueIterator(this);\n}\n#end\n","package haxe.ds;\n\n#if !js\nextern class IntMap<T> implements haxe.Constraints.IMap<Int, T> {\n  public function new(): Void;\n  public function set(key: Int, value: T): Void;\n  public function get(key: Int): Null<T>;\n  public function exists(key: Int): Bool;\n  public function remove(key: Int): Bool;\n  public function keys(): Iterator<Int>;\n  public function iterator(): Iterator<T>;\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<Int, T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n  public function copy(): IntMap<T>;\n  public function toString(): String;\n  public function clear(): Void;\n}\n#else\nclass IntMap<T> extends genes.util.EsMap<Int, T> implements haxe.Constraints.IMap<Int, T> {\n  public inline function copy(): IntMap<T> {\n    var copied = new genes.util.EsMap();\n    copied.inst = new js.lib.Map(inst);\n    return cast copied;\n  }\n\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<Int, T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n}\n#end\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tEnumValueMap allows mapping of enum value keys to arbitrary values.\n\n\tKeys are compared by value and recursively over their parameters. If any\n\tparameter is not an enum value, `Reflect.compare` is used to compare them.\n**/\nclass EnumValueMap<K:EnumValue, V> extends haxe.ds.BalancedTree<K, V> implements haxe.Constraints.IMap<K, V> {\n\toverride function compare(k1:EnumValue, k2:EnumValue):Int {\n\t\tvar d = k1.getIndex() - k2.getIndex();\n\t\tif (d != 0)\n\t\t\treturn d;\n\t\tvar p1 = k1.getParameters();\n\t\tvar p2 = k2.getParameters();\n\t\tif (p1.length == 0 && p2.length == 0)\n\t\t\treturn 0;\n\t\treturn compareArgs(p1, p2);\n\t}\n\n\tfunction compareArgs(a1:Array<Dynamic>, a2:Array<Dynamic>):Int {\n\t\tvar ld = a1.length - a2.length;\n\t\tif (ld != 0)\n\t\t\treturn ld;\n\t\tfor (i in 0...a1.length) {\n\t\t\tvar d = compareArg(a1[i], a2[i]);\n\t\t\tif (d != 0)\n\t\t\t\treturn d;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tfunction compareArg(v1:Dynamic, v2:Dynamic):Int {\n\t\treturn if (Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {\n\t\t\tcompare(v1, v2);\n\t\t} else if (Std.is(v1, Array) && Std.is(v2, Array)) {\n\t\t\tcompareArgs(v1, v2);\n\t\t} else {\n\t\t\tReflect.compare(v1, v2);\n\t\t}\n\t}\n\n\toverride function copy():EnumValueMap<K, V> {\n\t\tvar copied = new EnumValueMap<K, V>();\n\t\tcopied.root = root;\n\t\treturn copied;\n\t}\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\nimport haxe.ds.StringMap;\nimport haxe.ds.IntMap;\nimport haxe.ds.HashMap;\nimport haxe.ds.ObjectMap;\nimport haxe.ds.WeakMap;\nimport haxe.ds.EnumValueMap;\nimport haxe.Constraints.IMap;\n\n/**\n\tMap allows key to value mapping for arbitrary value types, and many key\n\ttypes.\n\n\tThis is a multi-type abstract, it is instantiated as one of its\n\tspecialization types depending on its type parameters.\n\n\tA Map can be instantiated without explicit type parameters. Type inference\n\twill then determine the type parameters from the usage.\n\n\tMaps can also be created with `[key1 => value1, key2 => value2]` syntax.\n\n\tMap is an abstract type, it is not available at runtime.\n\n\t@see https://haxe.org/manual/std-Map.html\n**/\n@:multiType(@:followWithAbstracts K)\nabstract Map<K, V>(IMap<K, V>) {\n\t/**\n\t\tCreates a new Map.\n\n\t\tThis becomes a constructor call to one of the specialization types in\n\t\tthe output. The rules for that are as follows:\n\n\t\t1. if `K` is a `String`, `haxe.ds.StringMap` is used\n\t\t2. if `K` is an `Int`, `haxe.ds.IntMap` is used\n\t\t3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used\n\t\t4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used\n\t\t5. if `K` is any other type, it causes a compile-time error\n\n\t\t(Cpp) Map does not use weak keys on `ObjectMap` by default.\n\t**/\n\tpublic function new();\n\n\t/**\n\t\tMaps `key` to `value`.\n\n\t\tIf `key` already has a mapping, the previous value disappears.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function set(key:K, value:V)\n\t\tthis.set(key, value);\n\n\t/**\n\t\tReturns the current mapping of `key`.\n\n\t\tIf no such mapping exists, `null` is returned.\n\n\t\tNote that a check like `map.get(key) == null` can hold for two reasons:\n\n\t\t1. the map has no mapping for `key`\n\t\t2. the map has a mapping with a value of `null`\n\n\t\tIf it is important to distinguish these cases, `exists()` should be\n\t\tused.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\t@:arrayAccess public inline function get(key:K)\n\t\treturn this.get(key);\n\n\t/**\n\t\tReturns true if `key` has a mapping, false otherwise.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function exists(key:K)\n\t\treturn this.exists(key);\n\n\t/**\n\t\tRemoves the mapping of `key` and returns true if such a mapping existed,\n\t\tfalse otherwise.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function remove(key:K)\n\t\treturn this.remove(key);\n\n\t/**\n\t\tReturns an Iterator over the keys of `this` Map.\n\n\t\tThe order of keys is undefined.\n\t**/\n\tpublic inline function keys():Iterator<K> {\n\t\treturn this.keys();\n\t}\n\n\t/**\n\t\tReturns an Iterator over the values of `this` Map.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function iterator():Iterator<V> {\n\t\treturn this.iterator();\n\t}\n\n\t/**\n\t\tReturns an Iterator over the keys and values of `this` Map.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function keyValueIterator():KeyValueIterator<K, V> {\n\t\treturn this.keyValueIterator();\n\t}\n\n\t/**\n\t\tReturns a shallow copy of `this` map.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function copy():Map<K, V> {\n\t\treturn cast this.copy();\n\t}\n\n\t/**\n\t\tReturns a String representation of `this` Map.\n\n\t\tThe exact representation depends on the platform and key-type.\n\t**/\n\tpublic inline function toString():String {\n\t\treturn this.toString();\n\t}\n\n\t/**\n\t\tRemoves all keys from `this` Map.\n\t**/\n\tpublic inline function clear():Void {\n\t\tthis.clear();\n\t}\n\n\t@:arrayAccess @:noCompletion public inline function arrayWrite(k:K, v:V):V {\n\t\tthis.set(k, v);\n\t\treturn v;\n\t}\n\n\t@:to static inline function toStringMap<K:String, V>(t:IMap<K, V>):StringMap<V> {\n\t\treturn new StringMap<V>();\n\t}\n\n\t@:to static inline function toIntMap<K:Int, V>(t:IMap<K, V>):IntMap<V> {\n\t\treturn new IntMap<V>();\n\t}\n\n\t@:to static inline function toEnumValueMapMap<K:EnumValue, V>(t:IMap<K, V>):EnumValueMap<K, V> {\n\t\treturn new EnumValueMap<K, V>();\n\t}\n\n\t@:to static inline function toObjectMap<K:{}, V>(t:IMap<K, V>):ObjectMap<K, V> {\n\t\treturn new ObjectMap<K, V>();\n\t}\n\n\t@:from static inline function fromStringMap<V>(map:StringMap<V>):Map<String, V> {\n\t\treturn cast map;\n\t}\n\n\t@:from static inline function fromIntMap<V>(map:IntMap<V>):Map<Int, V> {\n\t\treturn cast map;\n\t}\n\n\t@:from static inline function fromObjectMap<K:{}, V>(map:ObjectMap<K, V>):Map<K, V> {\n\t\treturn cast map;\n\t}\n}\n"]}