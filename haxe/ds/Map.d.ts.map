{"sourceRoot":"","names":[],"mappings":"QAmBA;QCDA;;QCYA;QC4BA;QCyDA,UAoCA;;ACtGA;;;;;;;;;QAwBC,iBFfD,KETa,GAAG,SAAH,UAAG,IDlBL;;;;;;;;;;;;;;;;;QC4DI,iBFjCf,KETa,GAAG,SAAH,IDiCb,OCjCgB;;;;;;;QAkDf,oBFzCD,KETa,GAAG,SAAH,ID4CuB;;;;;;;;QCenC,oBFlDD,KETa,GAAG,SAAH,ID4CuB;;;;;;;QCuBnC,kBF1DD,KETa,GAAG,KDkEhB,SClEa;;;;;;;QA4EZ,sBFnED,KETa,GAAG,KDkEhB,SClEgB;;;;;;;QAqFf,8BF5ED,KETa,GAAG,KDsGhB,iBCtGa,GAAG;;;;;;;QA8Ff,kBFrFD,KETa,GAAG,KFShB,KETa,GAAG;;;;;;;QAuGf,sBF9FD,KETa,GAAG,KC5BC;;;;;QD0IhB,mBFrGD,KETa,GAAG,KDlBL;QCoImB,wBFzG9B,KETa,GAAG,OAAH,MAAG","version":3,"file":"Map.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.0/github/2408778ccba83def22930ef9595d1639043c1dc2/src/haxe/ds/StringMap.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.0/github/2408778ccba83def22930ef9595d1639043c1dc2/src/haxe/ds/ObjectMap.hx","../../../../../../../haxe/versions/4.0.3/std/haxe/ds/EnumValueMap.hx","../../../../../../../haxe/versions/4.0.3/std/haxe/Constraints.hx","../../../../../../../haxe/versions/4.0.3/std/StdTypes.hx","../../../../../../../haxe/versions/4.0.3/std/haxe/ds/Map.hx","../../../../../../../haxe/versions/4.0.3/std/js/_std/String.hx"],"sourcesContent":["package haxe.ds;\n\n#if !js\nextern class StringMap<T> implements haxe.Constraints.IMap<String, T> {\n  public function new(): Void;\n  public function set(key: String, value: T): Void;\n  public function get(key: String): Null<T>;\n  public function exists(key: String): Bool;\n  public function remove(key: String): Bool;\n  public function keys(): Iterator<String>;\n  public function iterator(): Iterator<T>;\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<String,\n    T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n  public function copy(): StringMap<T>;\n  public function toString(): String;\n  public function clear(): Void;\n}\n#else\nclass StringMap<T> extends genes.util.EsMap<String, T> implements haxe.Constraints.IMap<String, T> {\n  public inline function copy(): StringMap<T> {\n    var copied = new genes.util.EsMap();\n    copied.inst = new js.lib.Map(inst);\n    return cast copied;\n  }\n\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<String,\n    T>\n    return new haxe.iterators.MapKeyValueIterator(this);\n}\n#end\n","package haxe.ds;\n\n#if !js\nextern class ObjectMap<K:{}, V> implements haxe.Constraints.IMap<K, V> {\n  public function new(): Void;\n  public function set(key: K, value: V): Void;\n  public function get(key: K): Null<V>;\n  public function exists(key: K): Bool;\n  public function remove(key: K): Bool;\n  public function keys(): Iterator<K>;\n  public function iterator(): Iterator<V>;\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<K, V>\n    return new haxe.iterators.MapKeyValueIterator(this);\n  public function copy(): ObjectMap<K, V>;\n  public function toString(): String;\n  public function clear(): Void;\n}\n#else\nclass ObjectMap<K:{},\n  V> extends genes.util.EsMap<K, V> implements haxe.Constraints.IMap<K, V> {\n  public inline function copy(): ObjectMap<K, V> {\n    var copied = new genes.util.EsMap();\n    copied.inst = new js.lib.Map(inst);\n    return cast copied;\n  }\n\n  @:runtime public inline function keyValueIterator(): KeyValueIterator<K, V>\n    return new haxe.iterators.MapKeyValueIterator(this);\n}\n#end\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tEnumValueMap allows mapping of enum value keys to arbitrary values.\n\n\tKeys are compared by value and recursively over their parameters. If any\n\tparameter is not an enum value, `Reflect.compare` is used to compare them.\n**/\nclass EnumValueMap<K:EnumValue, V> extends haxe.ds.BalancedTree<K, V> implements haxe.Constraints.IMap<K, V> {\n\toverride function compare(k1:EnumValue, k2:EnumValue):Int {\n\t\tvar d = k1.getIndex() - k2.getIndex();\n\t\tif (d != 0)\n\t\t\treturn d;\n\t\tvar p1 = k1.getParameters();\n\t\tvar p2 = k2.getParameters();\n\t\tif (p1.length == 0 && p2.length == 0)\n\t\t\treturn 0;\n\t\treturn compareArgs(p1, p2);\n\t}\n\n\tfunction compareArgs(a1:Array<Dynamic>, a2:Array<Dynamic>):Int {\n\t\tvar ld = a1.length - a2.length;\n\t\tif (ld != 0)\n\t\t\treturn ld;\n\t\tfor (i in 0...a1.length) {\n\t\t\tvar d = compareArg(a1[i], a2[i]);\n\t\t\tif (d != 0)\n\t\t\t\treturn d;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tfunction compareArg(v1:Dynamic, v2:Dynamic):Int {\n\t\treturn if (Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {\n\t\t\tcompare(v1, v2);\n\t\t} else if (Std.is(v1, Array) && Std.is(v2, Array)) {\n\t\t\tcompareArgs(v1, v2);\n\t\t} else {\n\t\t\tReflect.compare(v1, v2);\n\t\t}\n\t}\n\n\toverride function copy():EnumValueMap<K, V> {\n\t\tvar copied = new EnumValueMap<K, V>();\n\t\tcopied.root = root;\n\t\treturn copied;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\n/**\n\tThis type unifies with any function type.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\n@:callable\nabstract Function(Dynamic) {}\n\n/**\n\tThis type unifies with an enum instance if all constructors of the enum\n\trequire no arguments.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract FlatEnum(Dynamic) {}\n\n/**\n\tThis type unifies with any instance of classes that have a constructor\n\twhich\n\n\t  * is `public` and\n\t  * unifies with the type used for type parameter `T`.\n\n\tIf a type parameter `A` is assigned to a type parameter `B` which is constrained\n\tto `Constructible<T>`, A must be explicitly constrained to\n\t`Constructible<T>` as well.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract Constructible<T>(Dynamic) {}\n\ninterface IMap<K, V> {\n\tfunction get(k:K):Null<V>;\n\tfunction set(k:K, v:V):Void;\n\tfunction exists(k:K):Bool;\n\tfunction remove(k:K):Bool;\n\tfunction keys():Iterator<K>;\n\tfunction iterator():Iterator<V>;\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n\tfunction copy():IMap<K, V>;\n\tfunction toString():String;\n\tfunction clear():Void;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\nimport haxe.ds.StringMap;\nimport haxe.ds.IntMap;\nimport haxe.ds.HashMap;\nimport haxe.ds.ObjectMap;\nimport haxe.ds.WeakMap;\nimport haxe.ds.EnumValueMap;\nimport haxe.Constraints.IMap;\n\n/**\n\tMap allows key to value mapping for arbitrary value types, and many key\n\ttypes.\n\n\tThis is a multi-type abstract, it is instantiated as one of its\n\tspecialization types depending on its type parameters.\n\n\tA Map can be instantiated without explicit type parameters. Type inference\n\twill then determine the type parameters from the usage.\n\n\tMaps can also be created with `[key1 => value1, key2 => value2]` syntax.\n\n\tMap is an abstract type, it is not available at runtime.\n\n\t@see https://haxe.org/manual/std-Map.html\n**/\n@:multiType(@:followWithAbstracts K)\nabstract Map<K, V>(IMap<K, V>) {\n\t/**\n\t\tCreates a new Map.\n\n\t\tThis becomes a constructor call to one of the specialization types in\n\t\tthe output. The rules for that are as follows:\n\n\t\t1. if `K` is a `String`, `haxe.ds.StringMap` is used\n\t\t2. if `K` is an `Int`, `haxe.ds.IntMap` is used\n\t\t3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used\n\t\t4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used\n\t\t5. if `K` is any other type, it causes a compile-time error\n\n\t\t(Cpp) Map does not use weak keys on `ObjectMap` by default.\n\t**/\n\tpublic function new();\n\n\t/**\n\t\tMaps `key` to `value`.\n\n\t\tIf `key` already has a mapping, the previous value disappears.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function set(key:K, value:V)\n\t\tthis.set(key, value);\n\n\t/**\n\t\tReturns the current mapping of `key`.\n\n\t\tIf no such mapping exists, `null` is returned.\n\n\t\tNote that a check like `map.get(key) == null` can hold for two reasons:\n\n\t\t1. the map has no mapping for `key`\n\t\t2. the map has a mapping with a value of `null`\n\n\t\tIf it is important to distinguish these cases, `exists()` should be\n\t\tused.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\t@:arrayAccess public inline function get(key:K)\n\t\treturn this.get(key);\n\n\t/**\n\t\tReturns true if `key` has a mapping, false otherwise.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function exists(key:K)\n\t\treturn this.exists(key);\n\n\t/**\n\t\tRemoves the mapping of `key` and returns true if such a mapping existed,\n\t\tfalse otherwise.\n\n\t\tIf `key` is `null`, the result is unspecified.\n\t**/\n\tpublic inline function remove(key:K)\n\t\treturn this.remove(key);\n\n\t/**\n\t\tReturns an Iterator over the keys of `this` Map.\n\n\t\tThe order of keys is undefined.\n\t**/\n\tpublic inline function keys():Iterator<K> {\n\t\treturn this.keys();\n\t}\n\n\t/**\n\t\tReturns an Iterator over the values of `this` Map.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function iterator():Iterator<V> {\n\t\treturn this.iterator();\n\t}\n\n\t/**\n\t\tReturns an Iterator over the keys and values of `this` Map.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function keyValueIterator():KeyValueIterator<K, V> {\n\t\treturn this.keyValueIterator();\n\t}\n\n\t/**\n\t\tReturns a shallow copy of `this` map.\n\n\t\tThe order of values is undefined.\n\t**/\n\tpublic inline function copy():Map<K, V> {\n\t\treturn cast this.copy();\n\t}\n\n\t/**\n\t\tReturns a String representation of `this` Map.\n\n\t\tThe exact representation depends on the platform and key-type.\n\t**/\n\tpublic inline function toString():String {\n\t\treturn this.toString();\n\t}\n\n\t/**\n\t\tRemoves all keys from `this` Map.\n\t**/\n\tpublic inline function clear():Void {\n\t\tthis.clear();\n\t}\n\n\t@:arrayAccess @:noCompletion public inline function arrayWrite(k:K, v:V):V {\n\t\tthis.set(k, v);\n\t\treturn v;\n\t}\n\n\t@:to static inline function toStringMap<K:String, V>(t:IMap<K, V>):StringMap<V> {\n\t\treturn new StringMap<V>();\n\t}\n\n\t@:to static inline function toIntMap<K:Int, V>(t:IMap<K, V>):IntMap<V> {\n\t\treturn new IntMap<V>();\n\t}\n\n\t@:to static inline function toEnumValueMapMap<K:EnumValue, V>(t:IMap<K, V>):EnumValueMap<K, V> {\n\t\treturn new EnumValueMap<K, V>();\n\t}\n\n\t@:to static inline function toObjectMap<K:{}, V>(t:IMap<K, V>):ObjectMap<K, V> {\n\t\treturn new ObjectMap<K, V>();\n\t}\n\n\t@:from static inline function fromStringMap<V>(map:StringMap<V>):Map<String, V> {\n\t\treturn cast map;\n\t}\n\n\t@:from static inline function fromIntMap<V>(map:IntMap<V>):Map<Int, V> {\n\t\treturn cast map;\n\t}\n\n\t@:from static inline function fromObjectMap<K:{}, V>(map:ObjectMap<K, V>):Map<K, V> {\n\t\treturn cast map;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}