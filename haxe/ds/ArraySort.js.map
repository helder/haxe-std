{"sourceRoot":"","names":[],"mappings":"QAKA;ACwBA;;;;;;;;CAYC;;;;;;;;;;;;qBACC;gBAAI,GAAG,KAAK,GAAG;;CAGhB,6BAAkD,CACjD;eAAa,AAAC,OAAO,MAAO,EAC5B;KAAI,MAAK,OAAO,IAAI,CACnB;MAAI,OAAM,MACT;;KACD;YAAU,AAAC,OAAO,EAAlB;aAAuB,GAAvB;eAAuB,KAAvB;iBACC;YAAQ,EACR;UAAO,KAAI,MAAX,CACC;QAAI,CAAW,IAAX,AAAQ,EAAQ,IAAhB,AAAQ,EAAW,IAAI,MAAK,GAC/B;qBAAK,GAAG,IAAI,GAAG;MAEf;;OACD;;;KAGF;;IAED;gBAAI,GAAG,KAAK,MAAM,QAClB;gBAAI,GAAG,KAAK,QAAQ,IACpB;oBAAQ,GAAG,KAAK,MAAM,QAAQ,IAAI,SAAS,MAAM,KAAK;;CAGvD,oDAAyE,CACxE;;;;YACA;KAAI,SAAQ,KAAK,QAAQ,GACxB;;IACD;KAAI,QAAO,QAAQ,GAAG,CACrB;MAAI,CAAW,IAAX,AAAQ,EAAQ,QAAhB,AAAQ,EAAe,SAAQ,GAClC;mBAAK,GAAG,OAAO;KAChB;;IAED;KAAI,QAAO,MAAM,CAChB;WAAQ,QAAQ,EAChB;eAAY,OAAO,MACnB;gBAAa,gBAAM,GAAG,KAAK,OAAO,IAAI,WACtC;WAAQ,aAAa;GACf,OACN;WAAQ,QAAQ,EAChB;gBAAa,QAAQ,MACrB;eAAY,gBAAM,GAAG,KAAK,MAAM,OAAO,YACvC;WAAQ,YAAY;IAErB;mBAAO,GAAG,KAAK,WAAW,OAAO,YAnBjC;gBAoBU,YAAY,MACtB;oBAAQ,GAAG,KAAK,MAAM,WAAW,SAAS,OAAO,OACjD;oBAAQ,GAAG,KAAK,SAAS,YAAY,IAAI,OAAO,OAAO,OAAO;;CAG/D,qCAAoE,CAEnE;KAAI,SAAQ,OAAO,OAAO,IACzB;;IAFD;UAGI,cAAI,KAAK,MAAM,MAAM,MACzB;QAAO,QAAO,GAAd,CACC;aAAU,EAAE,OAAO,GACnB;eAAY,MAAM,KAClB;YAAS,OAAO,EAAhB;YAAwB,OAAO,IAAI,MACnC;SAAO,OAAM,OAAO,GAApB,CACC;MAAE,MAAM,EAAE,IACV;SAAK,GACL;OAAI,MAAK,KAAK,OACb;WAAM;KAEN;UAAK,OAAO,CAAC,QAAQ,CAAC,KAAK;;KAE7B;KAAE,MAAM;;;CAIV,iBAA0B,CACzB;QAAO,MAAK,GAAZ,CACC;WAAQ,IAAI,EACZ;OAAI,EACJ;OAAI;IAEL;EAAO;;CAGR,oCAAyD,CACxD;YAAU,KAAK,KAAf;;UACA;QAAO,OAAM,GAAb,CACC;UAAO,OAAO,EACd;SAAM,OAAO,KACb;MAAI,CAAW,IAAX,AAAQ,EAAQ,MAAhB,AAAQ,EAAa,QAAO,GAC/B;UAAM;IACF,OACJ;WAAO,MAAM,EACb;UAAM,MAAM,OAAO;;IAGrB;EAAO;;CAGR,oCAAyD,CACxD;YAAU,KAAK,KAAf;;UACA;QAAO,OAAM,GAAb,CACC;UAAO,OAAO,EACd;SAAM,OAAO,KACb;MAAI,CAAW,IAAX,AAAQ,EAAQ,MAAhB,AAAQ,EAAa,QAAO,GAAG,CAClC;WAAO,MAAM,EACb;UAAM,MAAM,OAAO;IAEnB;UAAM;;IAER;EAAO;;CAGR,qBAA0C,CACzC;YAAU,EAAE,GACZ;IAAE,KAAK,EAAE,GACT;IAAE,KAAK;;CAGR,6BACC;EAAO,WAAI,EAAE,IAAI,EAAE","version":3,"file":"ArraySort.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.0/github/2408778ccba83def22930ef9595d1639043c1dc2/src/genes/Register.hx","../../../../../../../haxe/versions/4.0.3/std/haxe/ds/ArraySort.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tArraySort provides a stable implementation of merge sort through its `sort`\n\tmethod. It should be used instead of `Array.sort` in cases where the order\n\tof equal elements has to be retained on all targets.\n**/\nclass ArraySort {\n\t/**\n\t\tSorts Array `a` according to the comparison function `cmp`, where\n\t\t`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a\n\t\tnegative Int if `x < y`.\n\n\t\tThis operation modifies Array `a` in place.\n\n\t\tThis operation is stable: The order of equal elements is preserved.\n\n\t\tIf `a` or `cmp` are null, the result is unspecified.\n\t**/\n\tstatic public function sort<T>(a:Array<T>, cmp:T->T->Int) {\n\t\trec(a, cmp, 0, a.length);\n\t}\n\n\tstatic function rec<T>(a:Array<T>, cmp, from, to) {\n\t\tvar middle = (from + to) >> 1;\n\t\tif (to - from < 12) {\n\t\t\tif (to <= from)\n\t\t\t\treturn;\n\t\t\tfor (i in (from + 1)...to) {\n\t\t\t\tvar j = i;\n\t\t\t\twhile (j > from) {\n\t\t\t\t\tif (compare(a, cmp, j, j - 1) < 0)\n\t\t\t\t\t\tswap(a, j - 1, j);\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\trec(a, cmp, from, middle);\n\t\trec(a, cmp, middle, to);\n\t\tdoMerge(a, cmp, from, middle, to, middle - from, to - middle);\n\t}\n\n\tstatic function doMerge<T>(a:Array<T>, cmp, from, pivot, to, len1, len2) {\n\t\tvar first_cut, second_cut, len11, len22, new_mid;\n\t\tif (len1 == 0 || len2 == 0)\n\t\t\treturn;\n\t\tif (len1 + len2 == 2) {\n\t\t\tif (compare(a, cmp, pivot, from) < 0)\n\t\t\t\tswap(a, pivot, from);\n\t\t\treturn;\n\t\t}\n\t\tif (len1 > len2) {\n\t\t\tlen11 = len1 >> 1;\n\t\t\tfirst_cut = from + len11;\n\t\t\tsecond_cut = lower(a, cmp, pivot, to, first_cut);\n\t\t\tlen22 = second_cut - pivot;\n\t\t} else {\n\t\t\tlen22 = len2 >> 1;\n\t\t\tsecond_cut = pivot + len22;\n\t\t\tfirst_cut = upper(a, cmp, from, pivot, second_cut);\n\t\t\tlen11 = first_cut - from;\n\t\t}\n\t\trotate(a, cmp, first_cut, pivot, second_cut);\n\t\tnew_mid = first_cut + len22;\n\t\tdoMerge(a, cmp, from, first_cut, new_mid, len11, len22);\n\t\tdoMerge(a, cmp, new_mid, second_cut, to, len1 - len11, len2 - len22);\n\t}\n\n\tstatic function rotate<T>(a:Array<T>, cmp:T->T->Int, from, mid, to) {\n\t\tvar n;\n\t\tif (from == mid || mid == to)\n\t\t\treturn;\n\t\tn = gcd(to - from, mid - from);\n\t\twhile (n-- != 0) {\n\t\t\tvar val = a[from + n];\n\t\t\tvar shift = mid - from;\n\t\t\tvar p1 = from + n, p2 = from + n + shift;\n\t\t\twhile (p2 != from + n) {\n\t\t\t\ta[p1] = a[p2];\n\t\t\t\tp1 = p2;\n\t\t\t\tif (to - p2 > shift)\n\t\t\t\t\tp2 += shift;\n\t\t\t\telse\n\t\t\t\t\tp2 = from + (shift - (to - p2));\n\t\t\t}\n\t\t\ta[p1] = val;\n\t\t}\n\t}\n\n\tstatic function gcd(m, n) {\n\t\twhile (n != 0) {\n\t\t\tvar t = m % n;\n\t\t\tm = n;\n\t\t\tn = t;\n\t\t}\n\t\treturn m;\n\t}\n\n\tstatic function upper<T>(a:Array<T>, cmp, from, to, val) {\n\t\tvar len = to - from, half, mid;\n\t\twhile (len > 0) {\n\t\t\thalf = len >> 1;\n\t\t\tmid = from + half;\n\t\t\tif (compare(a, cmp, val, mid) < 0)\n\t\t\t\tlen = half;\n\t\t\telse {\n\t\t\t\tfrom = mid + 1;\n\t\t\t\tlen = len - half - 1;\n\t\t\t}\n\t\t}\n\t\treturn from;\n\t}\n\n\tstatic function lower<T>(a:Array<T>, cmp, from, to, val) {\n\t\tvar len = to - from, half, mid;\n\t\twhile (len > 0) {\n\t\t\thalf = len >> 1;\n\t\t\tmid = from + half;\n\t\t\tif (compare(a, cmp, mid, val) < 0) {\n\t\t\t\tfrom = mid + 1;\n\t\t\t\tlen = len - half - 1;\n\t\t\t} else\n\t\t\t\tlen = half;\n\t\t}\n\t\treturn from;\n\t}\n\n\tstatic function swap<T>(a:Array<T>, i, j) {\n\t\tvar tmp = a[i];\n\t\ta[i] = a[j];\n\t\ta[j] = tmp;\n\t}\n\n\tstatic inline function compare<T>(a:Array<T>, cmp:T->T->Int, i, j) {\n\t\treturn cmp(a[i], a[j]);\n\t}\n}\n"]}