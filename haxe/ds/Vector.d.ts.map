{"sourceRoot":"","names":[],"mappings":";AA4BQ,uBAAmB,KCHpB,ADGoB;;AAuB3B;;;;;;;;;;;;;QAYC,KAZe,WESoB,SDnC7B,ADGoB;;;;;;;;QAkEjB,IA3CM,UC1BT,ADGoB,YEgCS,SFTpB;;;;;;;;QA6DN,IA7DM,UC1BT,ADGoB,YEgCS,aFTpB;CA4Ef;;;;yBEnEmC;kBFqEnC,WA9Ee,UC1BT,ADGoB,MEgCS;;;;;;;;;QF0FnC,KAnGe,QC1BT,ADGoB,aEgCS,cDnC7B,ADGoB,cEgCS,sBA7BzB;;;;;QFgKV,QA5Ie,UC1BT,ADGoB,MCHpB,AD0BS;;;;;;;QAwKf,OAxKe,UC1BT,ADGoB,MCHpB,ADGoB;;;;;;;;;QAyM1B,SAlLe,SC1BT,ADGoB,MCHpB,ADGoB;;;;;;;;;;;;;QAuN1B,cAhMe,UC1BT,AD0NsC,MC1NtC,ADGoB;;;;;;;;;QAsPP,KA/NJ,UC1BT,ADGoB,MCHpB,ADGoB;;;;;;;;;;;;;;;QA6QP,KAtPJ,UC1BT,ADGoB,UGPV;;;;;;;;;QH2SG,IA7QJ,GA6Q+B,UCvSxC,ADGoB,gBAuBX,MA6Q+B,KCvSxC,ADGoB;;;;;;;;;;;;;;QA+T1B,KAxSe,UC1BT,ADGoB,gBAuBX,eESoB,UA7BzB","version":3,"file":"Vector.d.ts.map","sources":["../../../../../../../haxe/versions/4.2.3/std/haxe/ds/Vector.hx","../../../../../../../haxe/versions/4.2.3/std/js/_std/Array.hx","../../../../../../../haxe/versions/4.2.3/std/StdTypes.hx","../../../../../../../haxe/versions/4.2.3/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n#if cpp\nusing cpp.NativeArray;\n#end\n\nprivate typedef VectorData<T> =\n\t#if flash10\n\tflash.Vector<T>\n\t#elseif neko\n\tneko.NativeArray<T>\n\t#elseif cs\n\tcs.NativeArray<T>\n\t#elseif java\n\tjava.NativeArray<T>\n\t#elseif lua\n\tlua.Table<Int, T>\n\t#elseif eval\n\teval.Vector<T>\n\t#else\n\tArray<T>\n\t#end\n\n/**\n\tA Vector is a storage of fixed size. It can be faster than Array on some\n\ttargets, and is never slower.\n\n\t@see https://haxe.org/manual/std-vector.html\n**/\nabstract Vector<T>(VectorData<T>) {\n\t/**\n\t\tCreates a new Vector of length `length`.\n\n\t\tInitially `this` Vector contains `length` neutral elements:\n\n\t\t- always null on dynamic targets\n\t\t- 0, 0.0 or false for Int, Float and Bool respectively on static targets\n\t\t- null for other types on static targets\n\n\t\tIf `length` is less than or equal to 0, the result is unspecified.\n\t**/\n\tpublic inline function new(length:Int) {\n\t\t#if flash10\n\t\tthis = new flash.Vector<T>(length, true);\n\t\t#elseif neko\n\t\tthis = untyped __dollar__amake(length);\n\t\t#elseif js\n\t\tthis = js.Syntax.construct(Array, length);\n\t\t#elseif cs\n\t\tthis = new cs.NativeArray(length);\n\t\t#elseif java\n\t\tthis = new java.NativeArray(length);\n\t\t#elseif cpp\n\t\tthis = NativeArray.create(length);\n\t\t#elseif python\n\t\tthis = python.Syntax.code(\"[{0}]*{1}\", null, length);\n\t\t#elseif lua\n\t\tthis = untyped __lua_table__({length: length});\n\t\t#elseif eval\n\t\tthis = new eval.Vector(length);\n\t\t#else\n\t\tthis = [];\n\t\tuntyped this.length = length;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns the value at index `index`.\n\n\t\tIf `index` is negative or exceeds `this.length`, the result is\n\t\tunspecified.\n\t**/\n\t@:op([]) public inline function get(index:Int):T {\n\t\t#if cpp\n\t\treturn this.unsafeGet(index);\n\t\t#elseif python\n\t\treturn python.internal.ArrayImpl.unsafeGet(this, index);\n\t\t#elseif eval\n\t\treturn this[index];\n\t\t#else\n\t\treturn this[index];\n\t\t#end\n\t}\n\n\t/**\n\t\tSets the value at index `index` to `val`.\n\n\t\tIf `index` is negative or exceeds `this.length`, the result is\n\t\tunspecified.\n\t**/\n\t@:op([]) public inline function set(index:Int, val:T):T {\n\t\t#if cpp\n\t\treturn this.unsafeSet(index, val);\n\t\t#elseif python\n\t\treturn python.internal.ArrayImpl.unsafeSet(this, index, val);\n\t\t#elseif eval\n\t\treturn this[index] = val;\n\t\t#else\n\t\treturn this[index] = val;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns the length of `this` Vector.\n\t**/\n\tpublic var length(get, never):Int;\n\n\tinline function get_length():Int {\n\t\t#if neko\n\t\treturn untyped __dollar__asize(this);\n\t\t#elseif cs\n\t\treturn this.Length;\n\t\t#elseif java\n\t\treturn this.length;\n\t\t#elseif python\n\t\treturn this.length;\n\t\t#else\n\t\treturn untyped this.length;\n\t\t#end\n\t}\n\n\t/**\n\t\tCopies `length` of elements from `src` Vector, beginning at `srcPos` to\n\t\t`dest` Vector, beginning at `destPos`\n\n\t\tThe results are unspecified if `length` results in out-of-bounds access,\n\t\tor if `src` or `dest` are null\n\t**/\n\tpublic static #if (cs || java || neko || cpp || eval) inline #end function blit<T>(src:Vector<T>, srcPos:Int, dest:Vector<T>, destPos:Int, len:Int):Void {\n\t\t#if neko\n\t\tuntyped __dollar__ablit(dest, destPos, src, srcPos, len);\n\t\t#elseif java\n\t\tjava.lang.System.arraycopy(src, srcPos, dest, destPos, len);\n\t\t#elseif cs\n\t\tcs.system.Array.Copy(cast src, srcPos, cast dest, destPos, len);\n\t\t#elseif cpp\n\t\tdest.toData().blit(destPos, src.toData(), srcPos, len);\n\t\t#elseif eval\n\t\tsrc.toData().blit(srcPos, dest.toData(), destPos, len);\n\t\t#else\n\t\tif (src == dest) {\n\t\t\tif (srcPos < destPos) {\n\t\t\t\tvar i = srcPos + len;\n\t\t\t\tvar j = destPos + len;\n\t\t\t\tfor (k in 0...len) {\n\t\t\t\t\ti--;\n\t\t\t\t\tj--;\n\t\t\t\t\tsrc[j] = src[i];\n\t\t\t\t}\n\t\t\t} else if (srcPos > destPos) {\n\t\t\t\tvar i = srcPos;\n\t\t\t\tvar j = destPos;\n\t\t\t\tfor (k in 0...len) {\n\t\t\t\t\tsrc[j] = src[i];\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i in 0...len) {\n\t\t\t\tdest[destPos + i] = src[srcPos + i];\n\t\t\t}\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tCreates a new Array, copy the content from the Vector to it, and returns it.\n\t**/\n\tpublic #if (flash || cpp || js || java || eval) inline #end function toArray():Array<T> {\n\t\t#if cpp\n\t\treturn this.copy();\n\t\t#elseif python\n\t\treturn this.copy();\n\t\t#elseif js\n\t\treturn this.slice(0);\n\t\t#elseif eval\n\t\treturn this.toArray();\n\t\t#else\n\t\tvar a = new Array();\n\t\tvar len = length;\n\t\t#if (neko)\n\t\t// prealloc good size\n\t\tif (len > 0)\n\t\t\ta[len - 1] = get(0);\n\t\t#end\n\t\tfor (i in 0...len)\n\t\t\ta[i] = get(i);\n\t\treturn a;\n\t\t#end\n\t}\n\n\t/**\n\t\tExtracts the data of `this` Vector.\n\n\t\tThis returns the internal representation type.\n\t**/\n\tpublic inline function toData():VectorData<T>\n\t\treturn cast this;\n\n\t/**\n\t\tInitializes a new Vector from `data`.\n\n\t\tSince `data` is the internal representation of Vector, this is a no-op.\n\n\t\tIf `data` is null, the corresponding Vector is also `null`.\n\t**/\n\tstatic public inline function fromData<T>(data:VectorData<T>):Vector<T>\n\t\treturn cast data;\n\n\t/**\n\t\tCreates a new Vector by copying the elements of `array`.\n\n\t\tThis always creates a copy, even on platforms where the internal\n\t\trepresentation is Array.\n\n\t\tThe elements are not copied and retain their identity, so\n\t\t`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.\n\n\t\tIf `array` is null, the result is unspecified.\n\t**/\n\tstatic public inline function fromArrayCopy<T>(array:Array<T>):Vector<T> {\n\t\t#if python\n\t\treturn cast array.copy();\n\t\t#elseif flash10\n\t\treturn fromData(flash.Vector.ofArray(array));\n\t\t#elseif java\n\t\treturn fromData(java.Lib.nativeArray(array, false));\n\t\t#elseif cs\n\t\treturn fromData(cs.Lib.nativeArray(array, false));\n\t\t#elseif cpp\n\t\treturn cast array.copy();\n\t\t#elseif js\n\t\treturn fromData(array.slice(0));\n\t\t#elseif eval\n\t\treturn fromData(eval.Vector.fromArrayCopy(array));\n\t\t#else\n\t\t// TODO: Optimize this for others?\n\t\tvar vec = new Vector<T>(array.length);\n\t\tfor (i in 0...array.length)\n\t\t\tvec.set(i, array[i]);\n\t\treturn vec;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a shallow copy of `this` Vector.\n\n\t\tThe elements are not copied and retain their identity, so\n\t\t`a[i] == a.copy()[i]` is true for any valid `i`. However,\n\t\t`a == a.copy()` is always false.\n\t**/\n\t#if cs extern #end public inline function copy<T>():Vector<T> {\n\t\t#if eval\n\t\treturn fromData(this.copy());\n\t\t#else\n\t\tvar r = new Vector<T>(length);\n\t\tVector.blit(cast this, 0, r, 0, length);\n\t\treturn r;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` Vector, with `sep` separating\n\t\teach element.\n\n\t\tThe result of this operation is equal to `Std.string(this[0]) + sep +\n\t\tStd.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`\n\n\t\tIf `this` Vector has length 0, the result is the empty String `\"\"`.\n\t\tIf `this` has exactly one element, the result is equal to a call to\n\t\t`Std.string(this[0])`.\n\n\t\tIf `sep` is null, the result is unspecified.\n\t**/\n\t#if cs extern #end public inline function join<T>(sep:String):String {\n\t\t#if (flash10 || cpp || eval)\n\t\treturn this.join(sep);\n\t\t#else\n\t\tvar b = new StringBuf();\n\t\tvar len = length;\n\t\tfor (i in 0...len) {\n\t\t\tb.add(Std.string(get(i)));\n\t\t\tif (i < len - 1) {\n\t\t\t\tb.add(sep);\n\t\t\t}\n\t\t}\n\t\treturn b.toString();\n\t\t#end\n\t}\n\n\t/**\n\t\tCreates a new Vector by applying function `f` to all elements of `this`.\n\n\t\tThe order of elements is preserved.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\t#if cs extern #end public inline function map<S>(f:T->S):Vector<S> {\n\t\t#if eval\n\t\treturn fromData(this.map(f));\n\t\t#else\n\t\tvar length = length;\n\t\tvar r = new Vector<S>(length);\n\t\tvar len = length;\n\t\tfor (i in 0...len) {\n\t\t\tvar v = f(get(i));\n\t\t\tr.set(i, v);\n\t\t}\n\t\treturn r;\n\t\t#end\n\t}\n\n\t/**\n\t\tSorts `this` Vector according to the comparison function `f`, where\n\t\t`f(x,y)` returns 0 if x == y, a positive Int if x > y and a\n\t\tnegative Int if x < y.\n\n\t\tThis operation modifies `this` Vector in place.\n\n\t\tThe sort operation is not guaranteed to be stable, which means that the\n\t\torder of equal elements may not be retained.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic inline function sort(f:T->T->Int):Void {\n\t\t#if (neko || cs || java || eval)\n\t\tthrow \"not yet supported\";\n\t\t#elseif lua\n\t\thaxe.ds.ArraySort.sort(cast this, f);\n\t\t#else\n\t\tthis.sort(f);\n\t\t#end\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}