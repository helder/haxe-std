{"sourceRoot":"","names":[],"mappings":"QAKA;;;;;ACsBA;AAAA;CAGC,MACC;EAAA,WAAM;;CAGP,QAAmC,CAClC;EAAA,UAAU,CAAC,WAAM,KAAK,IACtB,AACC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;EAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WACnC;EAAA,WAAM,AAAC,aAAQ,IAAK;;CAGrB,oBAAyD,CACxD;EAAA,SAAQ,gBACR;EAAA,SAAU,IAAV;EAAA,UAAgB,MAAM,IAAtB;EAAA,YAAgB,KAAhB;GAAA,aACC;GAAA,UAAU,CAAC,WAAM,AAAsB,SAAG,MAAM,IAChD,AACC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WAAlC;GAAA,MAAM,AAAC,QAAQ,IAAK,AAAC,CAAC,CAAC,MAAM,KAAK,WACnC;GAAA,WAAM,AAAC,aAAQ,IAAK;;;CAItB,MACC;EAAA,AAAO,kBAAM;;;;;;CAMd,kBAAoD,CAC3C;EAAA,eACR;EAAA,QAAS,mBAAT;EAAA,SAAe,EAAf;EAAA,UAAkB,YAAlB;EAAA;GAAA,QAjBA,KAiBA;GAAA,qCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF,oCAdE;GAAA,MAcF;GAAA;IACA;EAAA,AAAO","version":3,"file":"Crc32.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.0.1/std/haxe/crypto/Crc32.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.crypto;\n\n/**\n\tCalculates the Crc32 of the given Bytes.\n */\nclass Crc32 {\n\tvar crc:Int;\n\n\tpublic inline function new() {\n\t\tcrc = 0xFFFFFFFF;\n\t}\n\n\tpublic inline function byte(b:Int) {\n\t\tvar tmp = (crc ^ b) & 0xFF;\n\t\tfor (j in 0...8)\n\t\t\ttmp = (tmp >>> 1) ^ (-(tmp & 1) & 0xEDB88320);\n\t\tcrc = (crc >>> 8) ^ tmp;\n\t}\n\n\tpublic inline function update(b:haxe.io.Bytes, pos, len) {\n\t\tvar b = b.getData();\n\t\tfor (i in pos...pos + len) {\n\t\t\tvar tmp = (crc ^ haxe.io.Bytes.fastGet(b, i)) & 0xFF;\n\t\t\tfor (j in 0...8)\n\t\t\t\ttmp = (tmp >>> 1) ^ (-(tmp & 1) & 0xEDB88320);\n\t\t\tcrc = (crc >>> 8) ^ tmp;\n\t\t}\n\t}\n\n\tpublic inline function get() {\n\t\treturn crc ^ 0xFFFFFFFF;\n\t}\n\n\t/**\n\t\tCalculates the CRC32 of the given data bytes\n\t**/\n\tpublic static function make(data:haxe.io.Bytes):Int {\n\t\tvar c = new Crc32();\n\t\tc.update(data, 0, data.length);\n\t\treturn c.get();\n\t}\n}\n"]}