{"sourceRoot":"","names":[],"mappings":";YA2BA,gBACC,qBCPgB,WCQS,KFAzB,oBCRgB,WEUS;;AHyblB;CACP;CAEA,mBCtcgB,SCQS;CFiczB,kBCzcgB,SEUS;;;AHgB1B;;;;;;;;;;;;;;;;CAmDC,iBC7EgB;;;;;;;;;;CDsGhB,eAhGD,eIIW;;;;;;;CJwGV,eA5GD;;;;;;;;;;;;;;;;;;;;;;CA2MC;CAtKA;;;;;;;;;;;;;;;;;0BArCD;;;;;;;;;QAobC,OC1bgB;;;AD6cT;CAGP,mBChdgB,SCQS;CF2czB,kBCndgB,SEUS;CH4czB,iBATO","version":3,"file":"Unserializer.d.ts.map","sources":["../../../../../../haxe/versions/4.1.1/std/haxe/Unserializer.hx","../../../../../../haxe/versions/4.1.1/std/js/_std/String.hx","../../../../../../haxe/versions/4.1.1/std/Class.hx","../../../../../../haxe/versions/4.1.1/std/Enum.hx","../../../../../../haxe/versions/4.1.1/std/StdTypes.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\nimport haxe.ds.List;\n\n@:noDoc\ntypedef TypeResolver = {\n\tfunction resolveClass(name:String):Class<Dynamic>;\n\tfunction resolveEnum(name:String):Enum<Dynamic>;\n}\n\n/**\n\tThe `Unserializer` class is the complement to the `Serializer` class. It parses\n\ta serialization `String` and creates objects from the contained data.\n\n\tThis class can be used in two ways:\n\n\t- create a `new Unserializer()` instance with a given serialization\n\t\tString, then call its `unserialize()` method until all values are\n\t\textracted\n\t- call `Unserializer.run()`  to unserialize a single value from a given\n\t\tString\n\n\tThe specification of the serialization format can be found here:\n\t<https://haxe.org/manual/serialization/format>\n**/\nclass Unserializer {\n\t/**\n\t\tThis value can be set to use custom type resolvers.\n\n\t\tA type resolver finds a `Class` or `Enum` instance from a given `String`.\n\t\tBy default, the Haxe `Type` Api is used.\n\n\t\tA type resolver must provide two methods:\n\n\t\t1. `resolveClass(name:String):Class<Dynamic>` is called to determine a\n\t\t\t\t`Class` from a class name\n\t\t2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an\n\t\t\t\t`Enum` from an enum name\n\n\t\tThis value is applied when a new `Unserializer` instance is created.\n\t\tChanging it afterwards has no effect on previously created instances.\n\t**/\n\tpublic static var DEFAULT_RESOLVER:TypeResolver = new DefaultResolver();\n\n\tstatic var BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\n\n\t#if !neko\n\tstatic var CODES = null;\n\n\tstatic function initCodes() {\n\t\tvar codes = #if flash new flash.utils.ByteArray(); #else new Array(); #end\n\t\tfor (i in 0...BASE64.length)\n\t\t\tcodes[StringTools.fastCodeAt(BASE64, i)] = i;\n\t\treturn codes;\n\t}\n\t#end\n\n\tvar buf:String;\n\tvar pos:Int;\n\tvar length:Int;\n\tvar cache:Array<Dynamic>;\n\tvar scache:Array<String>;\n\tvar resolver:TypeResolver;\n\t#if neko\n\tvar upos:Int;\n\t#end\n\n\t/**\n\t\tCreates a new Unserializer instance, with its internal buffer\n\t\tinitialized to `buf`.\n\n\t\tThis does not parse `buf` immediately. It is parsed only when calls to\n\t\t`this.unserialize` are made.\n\n\t\tEach Unserializer instance maintains its own cache.\n\t**/\n\tpublic function new(buf:String) {\n\t\tthis.buf = buf;\n\t\tlength = buf.length;\n\t\tpos = 0;\n\t\t#if neko\n\t\tupos = 0;\n\t\t#end\n\t\tscache = new Array();\n\t\tcache = new Array();\n\t\tvar r = DEFAULT_RESOLVER;\n\t\tif (r == null) {\n\t\t\tr = new DefaultResolver();\n\t\t\tDEFAULT_RESOLVER = r;\n\t\t}\n\t\tresolver = r;\n\t}\n\n\t/**\n\t\tSets the type resolver of `this` Unserializer instance to `r`.\n\n\t\tIf `r` is `null`, a special resolver is used which returns `null` for all\n\t\tinput values.\n\n\t\tSee `DEFAULT_RESOLVER` for more information on type resolvers.\n\t**/\n\tpublic function setResolver(r) {\n\t\tif (r == null)\n\t\t\tresolver = NullResolver.instance;\n\t\telse\n\t\t\tresolver = r;\n\t}\n\n\t/**\n\t\tGets the type resolver of `this` Unserializer instance.\n\n\t\tSee `DEFAULT_RESOLVER` for more information on type resolvers.\n\t**/\n\tpublic function getResolver() {\n\t\treturn resolver;\n\t}\n\n\tinline function get(p):Int {\n\t\treturn StringTools.fastCodeAt(buf, p);\n\t}\n\n\tfunction readDigits() {\n\t\tvar k = 0;\n\t\tvar s = false;\n\t\tvar fpos = pos;\n\t\twhile (true) {\n\t\t\tvar c = get(pos);\n\t\t\tif (StringTools.isEof(c))\n\t\t\t\tbreak;\n\t\t\tif (c == \"-\".code) {\n\t\t\t\tif (pos != fpos)\n\t\t\t\t\tbreak;\n\t\t\t\ts = true;\n\t\t\t\tpos++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (c < \"0\".code || c > \"9\".code)\n\t\t\t\tbreak;\n\t\t\tk = k * 10 + (c - \"0\".code);\n\t\t\tpos++;\n\t\t}\n\t\tif (s)\n\t\t\tk *= -1;\n\t\treturn k;\n\t}\n\n\tfunction readFloat() {\n\t\tvar p1 = pos;\n\t\twhile (true) {\n\t\t\tvar c = get(pos);\n\t\t\tif (StringTools.isEof(c))\n\t\t\t\tbreak;\n\t\t\t// + - . , 0-9\n\t\t\tif ((c >= 43 && c < 58) || c == \"e\".code || c == \"E\".code)\n\t\t\t\tpos++;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\treturn Std.parseFloat(buf.substr(p1, pos - p1));\n\t}\n\n\tfunction unserializeObject(o:{}) {\n\t\twhile (true) {\n\t\t\tif (pos >= length)\n\t\t\t\tthrow \"Invalid object\";\n\t\t\tif (get(pos) == \"g\".code)\n\t\t\t\tbreak;\n\t\t\tvar k:Dynamic = unserialize();\n\t\t\tif (!Std.isOfType(k, String))\n\t\t\t\tthrow \"Invalid object key\";\n\t\t\tvar v = unserialize();\n\t\t\tReflect.setField(o, k, v);\n\t\t}\n\t\tpos++;\n\t}\n\n\tfunction unserializeEnum<T>(edecl:Enum<T>, tag:String) {\n\t\tif (get(pos++) != \":\".code)\n\t\t\tthrow \"Invalid enum format\";\n\t\tvar nargs = readDigits();\n\t\tif (nargs == 0)\n\t\t\treturn Type.createEnum(edecl, tag);\n\t\tvar args = new Array();\n\t\twhile (nargs-- > 0)\n\t\t\targs.push(unserialize());\n\t\treturn Type.createEnum(edecl, tag, args);\n\t}\n\n\t/**\n\t\tUnserializes the next part of `this` Unserializer instance and returns\n\t\tthe according value.\n\n\t\tThis function may call `this.resolver.resolveClass` to determine a\n\t\tClass from a String, and `this.resolver.resolveEnum` to determine an\n\t\tEnum from a String.\n\n\t\tIf `this` Unserializer instance contains no more or invalid data, an\n\t\texception is thrown.\n\n\t\tThis operation may fail on structurally valid data if a type cannot be\n\t\tresolved or if a field cannot be set. This can happen when unserializing\n\t\tStrings that were serialized on a different Haxe target, in which the\n\t\tserialization side has to make sure not to include platform-specific\n\t\tdata.\n\n\t\tClasses are created from `Type.createEmptyInstance`, which means their\n\t\tconstructors are not called.\n\t**/\n\tpublic function unserialize():Dynamic {\n\t\tswitch (get(pos++)) {\n\t\t\tcase \"n\".code:\n\t\t\t\treturn null;\n\t\t\tcase \"t\".code:\n\t\t\t\treturn true;\n\t\t\tcase \"f\".code:\n\t\t\t\treturn false;\n\t\t\tcase \"z\".code:\n\t\t\t\treturn 0;\n\t\t\tcase \"i\".code:\n\t\t\t\treturn readDigits();\n\t\t\tcase \"d\".code:\n\t\t\t\treturn readFloat();\n\t\t\tcase \"y\".code:\n\t\t\t\tvar len = readDigits();\n\t\t\t\tif (get(pos++) != \":\".code || length - pos < len)\n\t\t\t\t\tthrow \"Invalid string length\";\n\t\t\t\tvar s = buf.substr(pos, len);\n\t\t\t\tpos += len;\n\t\t\t\ts = StringTools.urlDecode(s);\n\t\t\t\tscache.push(s);\n\t\t\t\treturn s;\n\t\t\tcase \"k\".code:\n\t\t\t\treturn Math.NaN;\n\t\t\tcase \"m\".code:\n\t\t\t\treturn Math.NEGATIVE_INFINITY;\n\t\t\tcase \"p\".code:\n\t\t\t\treturn Math.POSITIVE_INFINITY;\n\t\t\tcase \"a\".code:\n\t\t\t\tvar buf = buf;\n\t\t\t\tvar a = new Array<Dynamic>();\n\t\t\t\t#if cpp\n\t\t\t\tvar cachePos = cache.length;\n\t\t\t\t#end\n\t\t\t\tcache.push(a);\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar c = get(pos);\n\t\t\t\t\tif (c == \"h\".code) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (c == \"u\".code) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tvar n = readDigits();\n\t\t\t\t\t\ta[a.length + n - 1] = null;\n\t\t\t\t\t} else\n\t\t\t\t\t\ta.push(unserialize());\n\t\t\t\t}\n\t\t\t\t#if cpp\n\t\t\t\treturn cache[cachePos] = cpp.NativeArray.resolveVirtualArray(a);\n\t\t\t\t#else\n\t\t\t\treturn a;\n\t\t\t\t#end\n\t\t\tcase \"o\".code:\n\t\t\t\tvar o = {};\n\t\t\t\tcache.push(o);\n\t\t\t\tunserializeObject(o);\n\t\t\t\treturn o;\n\t\t\tcase \"r\".code:\n\t\t\t\tvar n = readDigits();\n\t\t\t\tif (n < 0 || n >= cache.length)\n\t\t\t\t\tthrow \"Invalid reference\";\n\t\t\t\treturn cache[n];\n\t\t\tcase \"R\".code:\n\t\t\t\tvar n = readDigits();\n\t\t\t\tif (n < 0 || n >= scache.length)\n\t\t\t\t\tthrow \"Invalid string reference\";\n\t\t\t\treturn scache[n];\n\t\t\tcase \"x\".code:\n\t\t\t\tthrow unserialize();\n\t\t\tcase \"c\".code:\n\t\t\t\tvar name = unserialize();\n\t\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\t\tif (cl == null)\n\t\t\t\t\tthrow \"Class not found \" + name;\n\t\t\t\tvar o = Type.createEmptyInstance(cl);\n\t\t\t\tcache.push(o);\n\t\t\t\tunserializeObject(o);\n\t\t\t\treturn o;\n\t\t\tcase \"w\".code:\n\t\t\t\tvar name = unserialize();\n\t\t\t\tvar edecl = resolver.resolveEnum(name);\n\t\t\t\tif (edecl == null)\n\t\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\t\tvar e = unserializeEnum(edecl, unserialize());\n\t\t\t\tcache.push(e);\n\t\t\t\treturn e;\n\t\t\tcase \"j\".code:\n\t\t\t\tvar name = unserialize();\n\t\t\t\tvar edecl = resolver.resolveEnum(name);\n\t\t\t\tif (edecl == null)\n\t\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\t\tpos++; /* skip ':' */\n\t\t\t\tvar index = readDigits();\n\t\t\t\tvar tag = Type.getEnumConstructs(edecl)[index];\n\t\t\t\tif (tag == null)\n\t\t\t\t\tthrow \"Unknown enum index \" + name + \"@\" + index;\n\t\t\t\tvar e = unserializeEnum(edecl, tag);\n\t\t\t\tcache.push(e);\n\t\t\t\treturn e;\n\t\t\tcase \"l\".code:\n\t\t\t\tvar l = new List();\n\t\t\t\tcache.push(l);\n\t\t\t\tvar buf = buf;\n\t\t\t\twhile (get(pos) != \"h\".code)\n\t\t\t\t\tl.add(unserialize());\n\t\t\t\tpos++;\n\t\t\t\treturn l;\n\t\t\tcase \"b\".code:\n\t\t\t\tvar h = new haxe.ds.StringMap();\n\t\t\t\tcache.push(h);\n\t\t\t\tvar buf = buf;\n\t\t\t\twhile (get(pos) != \"h\".code) {\n\t\t\t\t\tvar s = unserialize();\n\t\t\t\t\th.set(s, unserialize());\n\t\t\t\t}\n\t\t\t\tpos++;\n\t\t\t\treturn h;\n\t\t\tcase \"q\".code:\n\t\t\t\tvar h = new haxe.ds.IntMap();\n\t\t\t\tcache.push(h);\n\t\t\t\tvar buf = buf;\n\t\t\t\tvar c = get(pos++);\n\t\t\t\twhile (c == \":\".code) {\n\t\t\t\t\tvar i = readDigits();\n\t\t\t\t\th.set(i, unserialize());\n\t\t\t\t\tc = get(pos++);\n\t\t\t\t}\n\t\t\t\tif (c != \"h\".code)\n\t\t\t\t\tthrow \"Invalid IntMap format\";\n\t\t\t\treturn h;\n\t\t\tcase \"M\".code:\n\t\t\t\tvar h = new haxe.ds.ObjectMap();\n\t\t\t\tcache.push(h);\n\t\t\t\tvar buf = buf;\n\t\t\t\twhile (get(pos) != \"h\".code) {\n\t\t\t\t\tvar s = unserialize();\n\t\t\t\t\th.set(s, unserialize());\n\t\t\t\t}\n\t\t\t\tpos++;\n\t\t\t\treturn h;\n\t\t\tcase \"v\".code:\n\t\t\t\tvar d;\n\t\t\t\tif (get(pos) >= '0'.code && get(pos) <= '9'.code && get(pos + 1) >= '0'.code && get(pos + 1) <= '9'.code && get(pos + 2) >= '0'.code\n\t\t\t\t\t&& get(pos + 2) <= '9'.code && get(pos + 3) >= '0'.code && get(pos + 3) <= '9'.code && get(pos + 4) == '-'.code) {\n\t\t\t\t\t// Included for backwards compatibility\n\t\t\t\t\td = Date.fromString(buf.substr(pos, 19));\n\t\t\t\t\tpos += 19;\n\t\t\t\t} else\n\t\t\t\t\td = Date.fromTime(readFloat());\n\t\t\t\tcache.push(d);\n\t\t\t\treturn d;\n\t\t\tcase \"s\".code:\n\t\t\t\tvar len = readDigits();\n\t\t\t\tvar buf = buf;\n\t\t\t\tif (get(pos++) != \":\".code || length - pos < len)\n\t\t\t\t\tthrow \"Invalid bytes length\";\n\t\t\t\t#if neko\n\t\t\t\tvar bytes = haxe.io.Bytes.ofData(base_decode(untyped buf.substr(pos, len).__s, untyped BASE64.__s));\n\t\t\t\t#elseif php\n\t\t\t\tvar phpEncoded = php.Global.strtr(buf.substr(pos, len), '%:', '+/');\n\t\t\t\tvar bytes = haxe.io.Bytes.ofData(php.Global.base64_decode(phpEncoded));\n\t\t\t\t#else\n\t\t\t\tvar codes = CODES;\n\t\t\t\tif (codes == null) {\n\t\t\t\t\tcodes = initCodes();\n\t\t\t\t\tCODES = codes;\n\t\t\t\t}\n\t\t\t\tvar i = pos;\n\t\t\t\tvar rest = len & 3;\n\t\t\t\tvar size = (len >> 2) * 3 + ((rest >= 2) ? rest - 1 : 0);\n\t\t\t\tvar max = i + (len - rest);\n\t\t\t\tvar bytes = haxe.io.Bytes.alloc(size);\n\t\t\t\tvar bpos = 0;\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c1 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\tbytes.set(bpos++, (c1 << 2) | (c2 >> 4));\n\t\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\tbytes.set(bpos++, (c2 << 4) | (c3 >> 2));\n\t\t\t\t\tvar c4 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\tbytes.set(bpos++, (c3 << 6) | c4);\n\t\t\t\t}\n\t\t\t\tif (rest >= 2) {\n\t\t\t\t\tvar c1 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\tbytes.set(bpos++, (c1 << 2) | (c2 >> 4));\n\t\t\t\t\tif (rest == 3) {\n\t\t\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf, i++)];\n\t\t\t\t\t\tbytes.set(bpos++, (c2 << 4) | (c3 >> 2));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#end\n\t\t\t\tpos += len;\n\t\t\t\tcache.push(bytes);\n\t\t\t\treturn bytes;\n\t\t\tcase \"C\".code:\n\t\t\t\tvar name = unserialize();\n\t\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\t\tif (cl == null)\n\t\t\t\t\tthrow \"Class not found \" + name;\n\t\t\t\tvar o:Dynamic = Type.createEmptyInstance(cl);\n\t\t\t\tcache.push(o);\n\t\t\t\to.hxUnserialize(this);\n\t\t\t\tif (get(pos++) != \"g\".code)\n\t\t\t\t\tthrow \"Invalid custom data\";\n\t\t\t\treturn o;\n\t\t\tcase \"A\".code:\n\t\t\t\tvar name = unserialize();\n\t\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\t\tif (cl == null)\n\t\t\t\t\tthrow \"Class not found \" + name;\n\t\t\t\treturn cl;\n\t\t\tcase \"B\".code:\n\t\t\t\tvar name = unserialize();\n\t\t\t\tvar e = resolver.resolveEnum(name);\n\t\t\t\tif (e == null)\n\t\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\t\treturn e;\n\t\t\tdefault:\n\t\t}\n\t\tpos--;\n\t\tthrow(\"Invalid char \" + buf.charAt(pos) + \" at position \" + pos);\n\t}\n\n\t/**\n\t\tUnserializes `v` and returns the according value.\n\n\t\tThis is a convenience function for creating a new instance of\n\t\tUnserializer with `v` as buffer and calling its `unserialize()` method\n\t\tonce.\n\t**/\n\tpublic static function run(v:String):Dynamic {\n\t\treturn new Unserializer(v).unserialize();\n\t}\n\n\t#if neko\n\tstatic var base_decode = neko.Lib.load(\"std\", \"base_decode\", 2);\n\t#end\n}\n\nprivate class DefaultResolver {\n\tpublic function new() {}\n\n\tpublic inline function resolveClass(name:String):Class<Dynamic>\n\t\treturn Type.resolveClass(name);\n\n\tpublic inline function resolveEnum(name:String):Enum<Dynamic>\n\t\treturn Type.resolveEnum(name);\n}\n\nprivate class NullResolver {\n\tfunction new() {}\n\n\tpublic inline function resolveClass(name:String):Class<Dynamic>\n\t\treturn null;\n\n\tpublic inline function resolveEnum(name:String):Enum<Dynamic>\n\t\treturn null;\n\n\tpublic static var instance(get, null):NullResolver;\n\n\tinline static function get_instance():NullResolver {\n\t\tif (instance == null)\n\t\t\tinstance = new NullResolver();\n\t\treturn instance;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tAn abstract type that represents a Class.\n\n\tSee `Type` for the Haxe Reflection API.\n\n\t@see https://haxe.org/manual/types-class-instance.html\n**/\n@:coreType @:runtimeValue abstract Class<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tAn abstract type that represents an Enum type.\n\n\tThe corresponding enum instance type is `EnumValue`.\n\n\tSee `Type` for the Haxe Reflection API.\n\n\t@see https://haxe.org/manual/types-enum-instance.html\n**/\n@:coreType @:runtimeValue abstract Enum<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}