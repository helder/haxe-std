{"sourceRoot":"","names":[],"mappings":"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","version":3,"file":"Writer.js.map","sources":["../../../../../../../haxe/versions/4.2.1/std/haxe/io/BytesOutput.hx","../../../../../../../haxe/versions/4.2.1/std/js/_std/haxe/io/Bytes.hx","../../../../../../../haxe/versions/4.2.1/std/haxe/ds/List.hx","../../../../../../../haxe/versions/4.2.1/std/haxe/crypto/Crc32.hx","../../../../../../../haxe/versions/4.2.1/std/js/_std/haxe/Exception.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.2.1/std/haxe/zip/Writer.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\nclass BytesOutput extends Output {\n\t#if flash\n\tvar b:flash.utils.ByteArray;\n\t#else\n\tvar b:BytesBuffer;\n\t#end\n\n\t/** The length of the stream in bytes. **/\n\tpublic var length(get, never):Int;\n\n\tpublic function new() {\n\t\t#if flash\n\t\tb = new flash.utils.ByteArray();\n\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t#else\n\t\tb = new BytesBuffer();\n\t\t#end\n\t\t#if python\n\t\tbigEndian = false;\n\t\t#end\n\t}\n\n\tinline function get_length():Int {\n\t\treturn b.length;\n\t}\n\n\toverride function writeByte(c) {\n\t\t#if flash\n\t\tb.writeByte(c);\n\t\t#else\n\t\tb.addByte(c);\n\t\t#end\n\t}\n\n\toverride function writeBytes(buf:Bytes, pos, len):Int {\n\t\t#if flash\n\t\tif (pos < 0 || len < 0 || pos + len > buf.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tb.writeBytes(buf.getData(), pos, len);\n\t\t#else\n\t\tb.addBytes(buf, pos, len);\n\t\t#end\n\t\treturn len;\n\t}\n\n\t#if flash\n\t// optimized operations\n\n\t@:dox(hide)\n\toverride function set_bigEndian(e) {\n\t\tbigEndian = e;\n\t\tb.endian = e ? flash.utils.Endian.BIG_ENDIAN : flash.utils.Endian.LITTLE_ENDIAN;\n\t\treturn e;\n\t}\n\n\t@:dox(hide)\n\toverride function writeFloat(f:Float) {\n\t\tb.writeFloat(f);\n\t}\n\n\t@:dox(hide)\n\toverride function writeDouble(f:Float) {\n\t\tb.writeDouble(f);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt8(x:Int) {\n\t\tif (x < -0x80 || x >= 0x80)\n\t\t\tthrow Error.Overflow;\n\t\tb.writeByte(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt16(x:Int) {\n\t\tif (x < -0x8000 || x >= 0x8000)\n\t\t\tthrow Error.Overflow;\n\t\tb.writeShort(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeUInt16(x:Int) {\n\t\tif (x < 0 || x >= 0x10000)\n\t\t\tthrow Error.Overflow;\n\t\tb.writeShort(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt32(x:Int) {\n\t\tb.writeInt(x);\n\t}\n\n\t@:dox(hide)\n\toverride function prepare(size:Int) {\n\t\tif (size > 0)\n\t\t\tb[size - 1] = b[size - 1];\n\t}\n\n\t@:dox(hide)\n\toverride function writeString(s:String, ?encoding:Encoding) {\n\t\tif (encoding == RawNative)\n\t\t\tb.writeMultiByte(s, \"unicode\");\n\t\telse\n\t\t\tb.writeUTFBytes(s);\n\t}\n\t#end\n\n\t/**\n\t\tReturns the `Bytes` of this output.\n\n\t\tThis function should not be called more than once on a given\n\t\t`BytesOutput` instance.\n\t**/\n\tpublic function getBytes():Bytes {\n\t\t#if flash\n\t\tvar bytes = b;\n\t\tb = null;\n\t\treturn untyped new Bytes(bytes.length, bytes);\n\t\t#else\n\t\treturn b.getBytes();\n\t\t#end\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\n@:coreApi\nclass Bytes {\n\tpublic var length(default, null):Int;\n\n\tvar b:js.lib.Uint8Array;\n\tvar data:js.lib.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.lib.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get(pos:Int):Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set(pos:Int, v:Int):Void {\n\t\tb[pos] = v;\n\t}\n\n\tpublic function blit(pos:Int, src:Bytes, srcpos:Int, len:Int):Void {\n\t\tif (pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (srcpos == 0 && len == src.b.byteLength)\n\t\t\tb.set(src.b, pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos, srcpos + len), pos);\n\t}\n\n\tpublic function fill(pos:Int, len:Int, value:Int):Void {\n\t\tfor (i in 0...len)\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub(pos:Int, len:Int):Bytes {\n\t\tif (pos < 0 || len < 0 || pos + len > length)\n\t\t\tthrow Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos + b.byteOffset, pos + b.byteOffset + len));\n\t}\n\n\tpublic function compare(other:Bytes):Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor (i in 0...len)\n\t\t\tif (b1[i] != b2[i])\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData():Void {\n\t\tif (data == null)\n\t\t\tdata = new js.lib.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble(pos:Int):Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat(pos:Int):Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble(pos:Int, v:Float):Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat(pos:Int, v:Float):Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16(pos:Int):Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16(pos:Int, v:Int):Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32(pos:Int):Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32(pos:Int, v:Int):Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64(pos:Int):haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4), getInt32(pos));\n\t}\n\n\tpublic function setInt64(pos:Int, v:haxe.Int64):Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString(pos:Int, len:Int, ?encoding:Encoding):String {\n\t\tif (pos < 0 || len < 0 || pos + len > length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (encoding == null)\n\t\t\tencoding = UTF8;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar i = pos;\n\t\tvar max = pos + len;\n\t\tswitch (encoding) {\n\t\t\tcase UTF8:\n\t\t\t\tvar debug = pos > 0;\n\t\t\t\t// utf8-decode and utf16-encode\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c = b[i++];\n\t\t\t\t\tif (c < 0x80) {\n\t\t\t\t\t\tif (c == 0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t\t} else if (c < 0xE0)\n\t\t\t\t\t\ts += String.fromCharCode(((c & 0x3F) << 6) | (b[i++] & 0x7F));\n\t\t\t\t\telse if (c < 0xF0) {\n\t\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\t\ts += String.fromCharCode(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\t\tvar c3 = b[i++];\n\t\t\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t\t\ts += String.fromCharCode(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase RawNative:\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c = b[i++] | (b[i++] << 8);\n\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString():String {\n\t\treturn getString(0, length);\n\t}\n\n\tpublic function toHex():String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor (i in 0...str.length)\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor (i in 0...length) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData():BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static inline function alloc(length:Int):Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString(s:String, ?encoding:Encoding):Bytes {\n\t\tif (encoding == RawNative) {\n\t\t\tvar buf = new js.lib.Uint8Array(s.length << 1);\n\t\t\tfor (i in 0...s.length) {\n\t\t\t\tvar c:Int = StringTools.fastCodeAt(s, i);\n\t\t\t\tbuf[i << 1] = c & 0xFF;\n\t\t\t\tbuf[(i << 1) | 1] = c >> 8;\n\t\t\t}\n\t\t\treturn new Bytes(buf.buffer);\n\t\t}\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile (i < s.length) {\n\t\t\tvar c:Int = StringTools.fastCodeAt(s, i++);\n\t\t\t// surrogate pair\n\t\t\tif (0xD800 <= c && c <= 0xDBFF)\n\t\t\t\tc = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s, i++) & 0x3FF);\n\t\t\tif (c <= 0x7F)\n\t\t\t\ta.push(c);\n\t\t\telse if (c <= 0x7FF) {\n\t\t\t\ta.push(0xC0 | (c >> 6));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t} else if (c <= 0xFFFF) {\n\t\t\t\ta.push(0xE0 | (c >> 12));\n\t\t\t\ta.push(0x80 | ((c >> 6) & 63));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t} else {\n\t\t\t\ta.push(0xF0 | (c >> 18));\n\t\t\t\ta.push(0x80 | ((c >> 12) & 63));\n\t\t\t\ta.push(0x80 | ((c >> 6) & 63));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData(b:BytesData):Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif (hb != null)\n\t\t\treturn hb;\n\t\treturn new Bytes(b);\n\t}\n\n\tpublic static function ofHex(s:String):Bytes {\n\t\tif ((s.length & 1) != 0)\n\t\t\tthrow \"Not a hex string (odd number of digits)\";\n\t\tvar a = new Array();\n\t\tvar i = 0;\n\t\tvar len = s.length >> 1;\n\t\twhile (i < len) {\n\t\t\tvar high = StringTools.fastCodeAt(s, i * 2);\n\t\t\tvar low = StringTools.fastCodeAt(s, i * 2 + 1);\n\t\t\thigh = (high & 0xF) + ((high & 0x40) >> 6) * 9;\n\t\t\tlow = (low & 0xF) + ((low & 0x40) >> 6) * 9;\n\t\t\ta.push(((high << 4) | low) & 0xFF);\n\t\t\ti++;\n\t\t}\n\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic inline static function fastGet(b:BytesData, pos:Int):Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n/**\n\tA linked-list of elements. The list is composed of element container objects\n\tthat are chained together. It is optimized so that adding or removing an\n\telement does not imply copying the whole list content every time.\n\n\t@see https://haxe.org/manual/std-List.html\n**/\nclass List<T> {\n\tprivate var h:ListNode<T>;\n\tprivate var q:ListNode<T>;\n\n\t/**\n\t\tThe length of `this` List.\n\t**/\n\tpublic var length(default, null):Int;\n\n\t/**\n\t\tCreates a new empty list.\n\t**/\n\tpublic function new() {\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tAdds element `item` at the end of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function add(item:T) {\n\t\tvar x = ListNode.create(item, null);\n\t\tif (h == null)\n\t\t\th = x;\n\t\telse\n\t\t\tq.next = x;\n\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tAdds element `item` at the beginning of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function push(item:T) {\n\t\tvar x = ListNode.create(item, h);\n\t\th = x;\n\t\tif (q == null)\n\t\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function first():Null<T> {\n\t\treturn if (h == null) null else h.item;\n\t}\n\n\t/**\n\t\tReturns the last element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function last():Null<T> {\n\t\treturn if (q == null) null else q.item;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThe element is removed from `this` List.\n\t**/\n\tpublic function pop():Null<T> {\n\t\tif (h == null)\n\t\t\treturn null;\n\t\tvar x = h.item;\n\t\th = h.next;\n\t\tif (h == null)\n\t\t\tq = null;\n\t\tlength--;\n\t\treturn x;\n\t}\n\n\t/**\n\t\tTells if `this` List is empty.\n\t**/\n\tpublic function isEmpty():Bool {\n\t\treturn (h == null);\n\t}\n\n\t/**\n\t\tEmpties `this` List.\n\n\t\tThis function does not traverse the elements, but simply sets the\n\t\tinternal references to null and `this.length` to 0.\n\t**/\n\tpublic function clear():Void {\n\t\th = null;\n\t\tq = null;\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tRemoves the first occurrence of `v` in `this` List.\n\n\t\tIf `v` is found by checking standard equality, it is removed from `this`\n\t\tList and the function returns true.\n\n\t\tOtherwise, false is returned.\n\t**/\n\tpublic function remove(v:T):Bool {\n\t\tvar prev:ListNode<T> = null;\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tif (l.item == v) {\n\t\t\t\tif (prev == null)\n\t\t\t\t\th = l.next;\n\t\t\t\telse\n\t\t\t\t\tprev.next = l.next;\n\t\t\t\tif (q == l)\n\t\t\t\t\tq = prev;\n\t\t\t\tlength--;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l.next;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tReturns an iterator on the elements of the list.\n\t**/\n\tpublic inline function iterator():ListIterator<T> {\n\t\treturn new ListIterator<T>(h);\n\t}\n\n\t/**\n\t\tReturns an iterator of the List indices and values.\n\t**/\n\t@:pure @:runtime public inline function keyValueIterator():ListKeyValueIterator<T> {\n\t\treturn new ListKeyValueIterator(h);\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List.\n\n\t\tThe result is enclosed in { } with the individual elements being\n\t\tseparated by a comma.\n\t**/\n\tpublic function toString() {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\ts.add(\"{\");\n\t\twhile (l != null) {\n\t\t\tif (first)\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(\", \");\n\t\t\ts.add(Std.string(l.item));\n\t\t\tl = l.next;\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List, with `sep` separating\n\t\teach element.\n\t**/\n\tpublic function join(sep:String) {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tif (first)\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(sep);\n\t\t\ts.add(l.item);\n\t\t\tl = l.next;\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a list filtered with `f`. The returned list will contain all\n\t\telements for which `f(x) == true`.\n\t**/\n\tpublic function filter(f:T->Bool) {\n\t\tvar l2 = new List();\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tif (f(v))\n\t\t\t\tl2.add(v);\n\t\t}\n\t\treturn l2;\n\t}\n\n\t/**\n\t\tReturns a new list where all elements have been converted by the\n\t\tfunction `f`.\n\t**/\n\tpublic function map<X>(f:T->X):List<X> {\n\t\tvar b = new List();\n\t\tvar l = h;\n\t\twhile (l != null) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tb.add(f(v));\n\t\t}\n\t\treturn b;\n\t}\n}\n\n#if neko\nprivate extern class ListNode<T> extends neko.NativeArray<Dynamic> {\n\tvar item(get, set):T;\n\tvar next(get, set):ListNode<T>;\n\tprivate inline function get_item():T\n\t\treturn this[0];\n\tprivate inline function set_item(v:T):T\n\t\treturn this[0] = v;\n\tprivate inline function get_next():ListNode<T>\n\t\treturn this[1];\n\tprivate inline function set_next(v:ListNode<T>):ListNode<T>\n\t\treturn this[1] = v;\n\tinline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn untyped __dollar__array(item, next);\n\t}\n}\n#else\nprivate class ListNode<T> {\n\tpublic var item:T;\n\tpublic var next:ListNode<T>;\n\n\tpublic function new(item:T, next:ListNode<T>) {\n\t\tthis.item = item;\n\t\tthis.next = next;\n\t}\n\n\textern public inline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn new ListNode(item, next);\n\t}\n}\n#end\n\nprivate class ListIterator<T> {\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():T {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn val;\n\t}\n}\n\nprivate class ListKeyValueIterator<T> {\n\tvar idx:Int;\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t\tthis.idx = 0;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():{key:Int, value:T} {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn {value: val, key: idx++};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.crypto;\n\n/**\n\tCalculates the Crc32 of the given Bytes.\n */\nclass Crc32 {\n\tvar crc:Int;\n\n\tpublic inline function new() {\n\t\tcrc = 0xFFFFFFFF;\n\t}\n\n\tpublic inline function byte(b:Int) {\n\t\tvar tmp = (crc ^ b) & 0xFF;\n\t\tfor (j in 0...8)\n\t\t\ttmp = (tmp >>> 1) ^ (-(tmp & 1) & 0xEDB88320);\n\t\tcrc = (crc >>> 8) ^ tmp;\n\t}\n\n\tpublic inline function update(b:haxe.io.Bytes, pos, len) {\n\t\tvar b = b.getData();\n\t\tfor (i in pos...pos + len) {\n\t\t\tvar tmp = (crc ^ haxe.io.Bytes.fastGet(b, i)) & 0xFF;\n\t\t\tfor (j in 0...8)\n\t\t\t\ttmp = (tmp >>> 1) ^ (-(tmp & 1) & 0xEDB88320);\n\t\t\tcrc = (crc >>> 8) ^ tmp;\n\t\t}\n\t}\n\n\tpublic inline function get() {\n\t\treturn crc ^ 0xFFFFFFFF;\n\t}\n\n\t/**\n\t\tCalculates the CRC32 of the given data bytes\n\t**/\n\tpublic static function make(data:haxe.io.Bytes):Int {\n\t\tvar c = new Crc32();\n\t\tc.update(data, 0, data.length);\n\t\treturn c.get();\n\t}\n}\n","package haxe;\n\nimport js.lib.Error;\n\n@:coreApi\nclass Exception extends NativeException {\n\tpublic var message(get,never):String;\n\tpublic var stack(get,never):CallStack;\n\tpublic var previous(get,never):Null<Exception>;\n\tpublic var native(get,never):Any;\n\n\t@:ifFeature(\"haxe.Exception.get_stack\")\n\t@:noCompletion var __skipStack:Int;\n\t@:noCompletion var __exceptionStack(get,set):Null<CallStack>;\n\t@:noCompletion var __nativeException:Any;\n\t@:noCompletion var __previousException:Null<Exception>;\n\n\tstatic function caught(value:Any):Exception {\n\t\tif(Std.isOfType(value, Exception)) {\n\t\t\treturn value;\n\t\t} else if(Std.isOfType(value, Error)) {\n\t\t\treturn new Exception((cast value:Error).message, null, value);\n\t\t} else {\n\t\t\treturn new ValueException(value, null, value);\n\t\t}\n\t}\n\n\tstatic function thrown(value:Any):Any {\n\t\tif(Std.isOfType(value, Exception)) {\n\t\t\treturn (value:Exception).native;\n\t\t} else if(Std.isOfType(value, Error)) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tvar e = new ValueException(value);\n\t\t\tuntyped __feature__(\"haxe.Exception.get_stack\", e.__shiftStack());\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tpublic function new(message:String, ?previous:Exception, ?native:Any) {\n\t\tsuper(message);\n\t\t(cast this).message = message;\n\t\t__previousException = previous;\n\t\t__nativeException = native != null ? native : this;\n\t\tuntyped __feature__('haxe.Exception.stack', {\n\t\t\t__skipStack = 0;\n\t\t\tvar old = js.Syntax.code('Error.prepareStackTrace');\n\t\t\tjs.Syntax.code('Error.prepareStackTrace = function(e) { return e.stack; }');\n\t\t\tif(Std.isOfType(native, Error)) {\n\t\t\t\t(cast this).stack = native.stack;\n\t\t\t} else {\n\t\t\t\tvar e:Error = null;\n\t\t\t\tif ((cast Error).captureStackTrace) {\n\t\t\t\t\t(cast Error).captureStackTrace(this, Exception);\n\t\t\t\t\te = cast this;\n\t\t\t\t} else {\n\t\t\t\t\te = new Error();\n\t\t\t\t\t//Internet Explorer provides call stack only if error was thrown\n\t\t\t\t\tif(js.Syntax.typeof(e.stack) == \"undefined\") {\n\t\t\t\t\t\tjs.Syntax.code('try { throw {0}; } catch(_) {}', e);\n\t\t\t\t\t\t__skipStack++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t(cast this).stack = e.stack;\n\t\t\t}\n\t\t\tjs.Syntax.code('Error.prepareStackTrace = {0}', old);\n\t\t});\n\t}\n\n\tfunction unwrap():Any {\n\t\treturn __nativeException;\n\t}\n\n\tpublic function toString():String {\n\t\treturn message;\n\t}\n\n\tpublic function details():String {\n\t\treturn inline CallStack.exceptionToString(this);\n\t}\n\n\t@:noCompletion\n\t@:ifFeature(\"haxe.Exception.get_stack\")\n\tinline function __shiftStack():Void {\n\t\t__skipStack++;\n\t}\n\n\tfunction get_message():String {\n\t\treturn (cast this:Error).message;\n\t}\n\n\tfunction get_previous():Null<Exception> {\n\t\treturn __previousException;\n\t}\n\n\tfinal function get_native():Any {\n\t\treturn __nativeException;\n\t}\n\n\t@:ifFeature('haxe.NativeStackTrace.exceptionStack')\n\tfunction get_stack():CallStack {\n\t\treturn switch __exceptionStack {\n\t\t\tcase null:\n\t\t\t\t__exceptionStack = NativeStackTrace.toHaxe(NativeStackTrace.normalize((cast this).stack), __skipStack);\n\t\t\tcase s: s;\n\t\t}\n\t}\n\n\t@:noCompletion\n\tfunction setProperty(name:String, value:Any):Void {\n\t\ttry {\n\t\t\tjs.lib.Object.defineProperty(this, name, {value:value});\n\t\t} catch(e:Exception) {\n\t\t\tjs.Syntax.code('{0}[{1}] = {2}', this, name, value);\n\t\t}\n\t}\n\n\t@:noCompletion\n\tinline function get___exceptionStack():CallStack {\n\t\treturn (cast this).__exceptionStack;\n\t}\n\n\t@:noCompletion\n\tinline function set___exceptionStack(value:CallStack):CallStack {\n\t\tsetProperty('__exceptionStack', value);\n\t\treturn value;\n\t}\n\n\t@:noCompletion\n\tinline function get___skipStack():Int {\n\t\treturn (cast this).__skipStack;\n\t}\n\n\t@:noCompletion\n\tinline function set___skipStack(value:Int):Int {\n\t\tsetProperty('__skipStack', value);\n\t\treturn value;\n\t}\n\n\t@:noCompletion\n\tinline function get___nativeException():Any {\n\t\treturn (cast this).__nativeException;\n\t}\n\n\t@:noCompletion\n\tinline function set___nativeException(value:Any):Any {\n\t\tsetProperty('__nativeException', value);\n\t\treturn value;\n\t}\n\n\t@:noCompletion\n\tinline function get___previousException():Null<Exception> {\n\t\treturn (cast this).__previousException;\n\t}\n\n\t@:noCompletion\n\tinline function set___previousException(value:Null<Exception>):Null<Exception> {\n\t\tsetProperty('__previousException', value);\n\t\treturn value;\n\t}\n}\n\n@:dox(hide)\n@:noCompletion\n@:native('Error')\nprivate extern class NativeException {\n\t// private var message:String; //redefined in haxe.Exception\n\t// private var stack(default, null):String; //redefined in haxe.Exception\n\n\tfunction new(?message:String);\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.zip;\n\nimport haxe.ds.List;\n\nclass Writer {\n\t/**\n\t\tThe next constant is required for computing the Central\n\t\tDirectory Record(CDR) size. CDR consists of some fields\n\t\tof constant size and a filename. Constant represents\n\t\ttotal length of all fields with constant size for each\n\t\tfile in archive\n\t**/\n\tinline static var CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE = 46;\n\n\t/**\n\t\tThe following constant is the total size of all fields\n\t\tof Local File Header. It's required for calculating\n\t\toffset of start of central directory record\n\t**/\n\tinline static var LOCAL_FILE_HEADER_FIELDS_SIZE = 30;\n\n\tvar o:haxe.io.Output;\n\tvar files:List<{\n\t\tname:String,\n\t\tcompressed:Bool,\n\t\tclen:Int,\n\t\tsize:Int,\n\t\tcrc:Int,\n\t\tdate:Date,\n\t\tfields:haxe.io.Bytes\n\t}>;\n\n\tpublic function new(o:haxe.io.Output) {\n\t\tthis.o = o;\n\t\tfiles = new List();\n\t}\n\n\tfunction writeZipDate(date:Date) {\n\t\tvar hour = date.getHours();\n\t\tvar min = date.getMinutes();\n\t\tvar sec = date.getSeconds() >> 1;\n\t\to.writeUInt16((hour << 11) | (min << 5) | sec);\n\t\tvar year = date.getFullYear() - 1980;\n\t\tvar month = date.getMonth() + 1;\n\t\tvar day = date.getDate();\n\t\to.writeUInt16((year << 9) | (month << 5) | day);\n\t}\n\n\tpublic function writeEntryHeader(f:Entry) {\n\t\tvar o = this.o;\n\t\tvar flags = 0;\n\t\tif (f.extraFields != null) {\n\t\t\tfor (e in f.extraFields)\n\t\t\t\tswitch (e) {\n\t\t\t\t\tcase FUtf8:\n\t\t\t\t\t\tflags |= 0x800;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t}\n\t\to.writeInt32(0x04034B50);\n\t\to.writeUInt16(0x0014); // version\n\t\to.writeUInt16(flags); // flags\n\t\tif (f.data == null) {\n\t\t\tf.fileSize = 0;\n\t\t\tf.dataSize = 0;\n\t\t\tf.crc32 = 0;\n\t\t\tf.compressed = false;\n\t\t\tf.data = haxe.io.Bytes.alloc(0);\n\t\t} else {\n\t\t\tif (f.crc32 == null) {\n\t\t\t\tif (f.compressed)\n\t\t\t\t\tthrow \"CRC32 must be processed before compression\";\n\t\t\t\tf.crc32 = haxe.crypto.Crc32.make(f.data);\n\t\t\t}\n\t\t\tif (!f.compressed)\n\t\t\t\tf.fileSize = f.data.length;\n\t\t\tf.dataSize = f.data.length;\n\t\t}\n\t\to.writeUInt16(f.compressed ? 8 : 0);\n\t\twriteZipDate(f.fileTime);\n\t\to.writeInt32(f.crc32);\n\t\to.writeInt32(f.dataSize);\n\t\to.writeInt32(f.fileSize);\n\t\to.writeUInt16(f.fileName.length);\n\t\tvar e = new haxe.io.BytesOutput();\n\t\tif (f.extraFields != null) {\n\t\t\tfor (f in f.extraFields)\n\t\t\t\tswitch (f) {\n\t\t\t\t\tcase FInfoZipUnicodePath(name, crc):\n\t\t\t\t\t\tvar namebytes = haxe.io.Bytes.ofString(name);\n\t\t\t\t\t\te.writeUInt16(0x7075);\n\t\t\t\t\t\te.writeUInt16(namebytes.length + 5);\n\t\t\t\t\t\te.writeByte(1); // version\n\t\t\t\t\t\te.writeInt32(crc);\n\t\t\t\t\t\te.write(namebytes);\n\t\t\t\t\tcase FUnknown(tag, bytes):\n\t\t\t\t\t\te.writeUInt16(tag);\n\t\t\t\t\t\te.writeUInt16(bytes.length);\n\t\t\t\t\t\te.write(bytes);\n\t\t\t\t\tcase FUtf8:\n\t\t\t\t\t\t// nothing\n\t\t\t\t}\n\t\t}\n\t\tvar ebytes = e.getBytes();\n\t\to.writeUInt16(ebytes.length);\n\t\to.writeString(f.fileName);\n\t\to.write(ebytes);\n\t\tfiles.add({\n\t\t\tname: f.fileName,\n\t\t\tcompressed: f.compressed,\n\t\t\tclen: f.data.length,\n\t\t\tsize: f.fileSize,\n\t\t\tcrc: f.crc32,\n\t\t\tdate: f.fileTime,\n\t\t\tfields: ebytes\n\t\t});\n\t}\n\n\tpublic function write(files:List<Entry>) {\n\t\tfor (f in files) {\n\t\t\twriteEntryHeader(f);\n\t\t\to.writeFullBytes(f.data, 0, f.data.length);\n\t\t}\n\t\twriteCDR();\n\t}\n\n\tpublic function writeCDR() {\n\t\tvar cdr_size = 0;\n\t\tvar cdr_offset = 0;\n\t\tfor (f in files) {\n\t\t\tvar namelen = f.name.length;\n\t\t\tvar extraFieldsLength = f.fields.length;\n\t\t\to.writeInt32(0x02014B50); // header\n\t\t\to.writeUInt16(0x0014); // version made-by\n\t\t\to.writeUInt16(0x0014); // version\n\t\t\to.writeUInt16(0); // flags\n\t\t\to.writeUInt16(f.compressed ? 8 : 0);\n\t\t\twriteZipDate(f.date);\n\t\t\to.writeInt32(f.crc);\n\t\t\to.writeInt32(f.clen);\n\t\t\to.writeInt32(f.size);\n\t\t\to.writeUInt16(namelen);\n\t\t\to.writeUInt16(extraFieldsLength);\n\t\t\to.writeUInt16(0); // comment length always 0\n\t\t\to.writeUInt16(0); // disk number start\n\t\t\to.writeUInt16(0); // internal file attributes\n\t\t\to.writeInt32(0); // external file attributes\n\t\t\to.writeInt32(cdr_offset); // relative offset of local header\n\t\t\to.writeString(f.name);\n\t\t\to.write(f.fields);\n\t\t\tcdr_size += CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE + namelen + extraFieldsLength;\n\t\t\tcdr_offset += LOCAL_FILE_HEADER_FIELDS_SIZE + namelen + extraFieldsLength + f.clen;\n\t\t}\n\t\t// end of central dir signature\n\t\to.writeInt32(0x06054B50);\n\t\t// number of this disk\n\t\to.writeUInt16(0);\n\t\t// number of the disk with the start of the central directory\n\t\to.writeUInt16(0);\n\t\t// total number of entries in the central directory on this disk\n\t\to.writeUInt16(files.length);\n\t\t// total number of entries in the central directory\n\t\to.writeUInt16(files.length);\n\t\t// size of the central directory record\n\t\to.writeInt32(cdr_size);\n\t\t// offset of start of central directory with respect to the starting disk number\n\t\to.writeInt32(cdr_offset);\n\t\t// .ZIP file comment length\n\t\to.writeUInt16(0);\n\t}\n}\n"]}