{"sourceRoot":"","names":[],"mappings":"QAiFA;QCkCA;QC9FU;;ACGV;CAIC,2CDPS;8BAAA,SCGV;CACC;;CAEA,2CCFM,ACJU;8BDIV,ACJU,aFGjB;CAEC;;;;oBAFD;UAIC;UAHA;UAEA;UADA;;AAKD;CACC,uCEXgB,gBJ6DjB,OE1DA,kBF0DA,OI7DiB;0BAAA,gBJ6DjB,OE1DA,kBF0DA,OI7DiB,WFUjB;;;oBAAA;UACC;;AAGD;CAMC,6CAND;gCAAA;CACC,yCEfgB,iBJ6DjB,OGzDO,ADMP,kBFmDA,OE/CA;4BEdiB,iBJ6DjB,OGzDO,ADMP,kBFmDA,OE/CA;CAGC,0CAHD,kBF+CA,OAWoC;6BE1DpC,kBF+CA,OAWoC,YE1DpC;CAIC,0CCdM,ADUP,iBF+CA,OAWoC;6BGpE7B,ADUP,iBF+CA,OAWoC,YE1DpC;CAEC,2CF6CD,OE1DA;8BF0DA,OE1DA,WAWA;CAKC,8CCfM,ADUP;iCCVO,ADUP;;;oBAAA;QAMC;QALA;QAEA;QACA;QAFA;QAGA;;AAIO;CAOP,iDE9BgB,WL4DjB;oCK5DiB,WL4DjB,QGrCQ;CAEP,yCAXD;4BAAA,SASQ;CACP;;CAQA,6CH4BD,QGzDA;gCHyDA,QGzDA,WAoBQ;CAQP,iDE/BgB,WL4DjB,QGzDA;oCEHiB,WL4DjB,QGzDA,WAoBQ;CAUP,2CH2BD,QGrCQ;8BHqCR,QGrCQ;CAMP,+CE7BgB,WL4DjB;kCK5DiB,WL4DjB,QGrCQ;CAGP,uCHkCD;0BAAA,QGrCQ;CAIP,oDE3BgB,WL4DjB;uCK5DiB,WL4DjB,QGrCQ;CAKP,8CHgCD;iCAAA,QGrCQ;;;oBAAA;eAOP;eALA;eADA;eAQA;eADA;eAEA;eAJA;eAHA;eACA;eACA;;AAQD;QAgQC,aHxOD,QG9CA,OFJW;QEiSV,iBH/OD,QG9CA,OFJW","version":3,"file":"Check.d.ts.map","sources":["../../../../../../../haxe/versions/4.2.2/std/Xml.hx","../../../../../../../haxe/versions/4.2.2/std/StdTypes.hx","../../../../../../../haxe/versions/4.2.2/std/js/_std/EReg.hx","../../../../../../../haxe/versions/4.2.2/std/haxe/xml/Check.hx","../../../../../../../haxe/versions/4.2.2/std/js/_std/Array.hx","../../../../../../../haxe/versions/4.2.2/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tXml node types.\n\n\t@see https://haxe.org/manual/std-Xml.html\n**/\nenum abstract XmlType(Int) {\n\t/**\n\t\tRepresents an XML element type.\n\t**/\n\tvar Element = 0;\n\n\t/**\n\t\tRepresents XML parsed character data type.\n\t**/\n\tvar PCData = 1;\n\n\t/**\n\t\tRepresents XML character data type.\n\t**/\n\tvar CData = 2;\n\n\t/**\n\t\tRepresents an XML comment type.\n\t**/\n\tvar Comment = 3;\n\n\t/**\n\t\tRepresents an XML doctype element type.\n\t**/\n\tvar DocType = 4;\n\n\t/**\n\t\tRepresents an XML processing instruction type.\n\t**/\n\tvar ProcessingInstruction = 5;\n\n\t/**\n\t\tRepresents an XML document type.\n\t**/\n\tvar Document = 6;\n\n\tpublic function toString():String {\n\t\treturn switch (cast this : XmlType) {\n\t\t\tcase Element: \"Element\";\n\t\t\tcase PCData: \"PCData\";\n\t\t\tcase CData: \"CData\";\n\t\t\tcase Comment: \"Comment\";\n\t\t\tcase DocType: \"DocType\";\n\t\t\tcase ProcessingInstruction: \"ProcessingInstruction\";\n\t\t\tcase Document: \"Document\";\n\t\t};\n\t}\n}\n\n/**\n\tCross-platform Xml API.\n\n\t@see https://haxe.org/manual/std-Xml.html\n**/\nclass Xml {\n\t/**\n\t\tXML element type.\n\t**/\n\tstatic public var Element(default, never) = XmlType.Element;\n\n\t/**\n\t\tXML parsed character data type.\n\t**/\n\tstatic public var PCData(default, never) = XmlType.PCData;\n\n\t/**\n\t\tXML character data type.\n\t**/\n\tstatic public var CData(default, never) = XmlType.CData;\n\n\t/**\n\t\tXML comment type.\n\t**/\n\tstatic public var Comment(default, never) = XmlType.Comment;\n\n\t/**\n\t\tXML doctype element type.\n\t**/\n\tstatic public var DocType(default, never) = XmlType.DocType;\n\n\t/**\n\t\tXML processing instruction type.\n\t**/\n\tstatic public var ProcessingInstruction(default, never) = XmlType.ProcessingInstruction;\n\n\t/**\n\t\tXML document type.\n\t**/\n\tstatic public var Document(default, never) = XmlType.Document;\n\n\t/**\n\t\tParses the String into an Xml document.\n\t**/\n\tstatic public function parse(str:String):Xml {\n\t\treturn haxe.xml.Parser.parse(str);\n\t}\n\n\t/**\n\t\tReturns the type of the Xml Node. This should be used before\n\t\taccessing other functions since some might raise an exception\n\t\tif the node type is not correct.\n\t**/\n\tpublic var nodeType(default, null):XmlType;\n\n\t/**\n\t\tReturns the node name of an Element.\n\t**/\n\t@:isVar public var nodeName(get, set):String;\n\n\t/**\n\t\tReturns the node value. Only works if the Xml node is not an Element or a Document.\n\t**/\n\t@:isVar public var nodeValue(get, set):String;\n\n\t/**\n\t\tReturns the parent object in the Xml hierarchy.\n\t\tThe parent can be `null`, an Element or a Document.\n\t**/\n\tpublic var parent(default, null):Xml;\n\n\tvar children:Array<Xml>;\n\tvar attributeMap:Map<String, String>;\n\n\t#if !cppia inline #end function get_nodeName() {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn nodeName;\n\t}\n\n\t#if !cppia inline #end function set_nodeName(v) {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn this.nodeName = v;\n\t}\n\n\t#if !cppia inline #end function get_nodeValue() {\n\t\tif (nodeType == Document || nodeType == Element) {\n\t\t\tthrow 'Bad node type, unexpected $nodeType';\n\t\t}\n\t\treturn nodeValue;\n\t}\n\n\t#if !cppia inline #end function set_nodeValue(v) {\n\t\tif (nodeType == Document || nodeType == Element) {\n\t\t\tthrow 'Bad node type, unexpected $nodeType';\n\t\t}\n\t\treturn this.nodeValue = v;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createElement(name:String):Xml {\n\t\tvar xml = new Xml(Element);\n\t\txml.nodeName = name;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createPCData(data:String):Xml {\n\t\tvar xml = new Xml(PCData);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createCData(data:String):Xml {\n\t\tvar xml = new Xml(CData);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createComment(data:String):Xml {\n\t\tvar xml = new Xml(Comment);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createDocType(data:String):Xml {\n\t\tvar xml = new Xml(DocType);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createProcessingInstruction(data:String):Xml {\n\t\tvar xml = new Xml(ProcessingInstruction);\n\t\txml.nodeValue = data;\n\t\treturn xml;\n\t}\n\n\t/**\n\t\tCreates a node of the given type.\n\t**/\n\tstatic public function createDocument():Xml {\n\t\treturn new Xml(Document);\n\t}\n\n\t/**\n\t\tGet the given attribute of an Element node. Returns `null` if not found.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function get(att:String):String {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn attributeMap[att];\n\t}\n\n\t/**\n\t\tSet the given attribute value for an Element node.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function set(att:String, value:String):Void {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\tattributeMap.set(att, value);\n\t}\n\n\t/**\n\t\tRemoves an attribute for an Element node.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function remove(att:String):Void {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\tattributeMap.remove(att);\n\t}\n\n\t/**\n\t\tTells if the Element node has a given attribute.\n\t\tAttributes are case-sensitive.\n\t**/\n\tpublic function exists(att:String):Bool {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn attributeMap.exists(att);\n\t}\n\n\t/**\n\t\tReturns an `Iterator` on all the attribute names.\n\t**/\n\tpublic function attributes():Iterator<String> {\n\t\tif (nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element but found $nodeType';\n\t\t}\n\t\treturn attributeMap.keys();\n\t}\n\n\t/**\n\t\tReturns an iterator of all child nodes.\n\t\tOnly works if the current node is an Element or a Document.\n\t**/\n\tpublic #if !cppia inline #end function iterator():Iterator<Xml> {\n\t\tensureElementType();\n\t\treturn children.iterator();\n\t}\n\n\t/**\n\t\tReturns an iterator of all child nodes which are Elements.\n\t\tOnly works if the current node is an Element or a Document.\n\t**/\n\tpublic function elements():Iterator<Xml> {\n\t\tensureElementType();\n\t\tvar ret = [for (child in children) if (child.nodeType == Element) child];\n\t\treturn ret.iterator();\n\t}\n\n\t/**\n\t\tReturns an iterator of all child nodes which are Elements with the given nodeName.\n\t\tOnly works if the current node is an Element or a Document.\n\t**/\n\tpublic function elementsNamed(name:String):Iterator<Xml> {\n\t\tensureElementType();\n\t\tvar ret = [\n\t\t\tfor (child in children)\n\t\t\t\tif (child.nodeType == Element && child.nodeName == name) child\n\t\t];\n\t\treturn ret.iterator();\n\t}\n\n\t/**\n\t\tReturns the first child node.\n\t**/\n\tpublic #if !cppia inline #end function firstChild():Xml {\n\t\tensureElementType();\n\t\treturn children[0];\n\t}\n\n\t/**\n\t\tReturns the first child node which is an Element.\n\t**/\n\tpublic function firstElement():Xml {\n\t\tensureElementType();\n\t\tfor (child in children) {\n\t\t\tif (child.nodeType == Element) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tAdds a child node to the Document or Element.\n\t\tA child node can only be inside one given parent node, which is indicated by the `parent` property.\n\t\tIf the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.\n\t\tIf the child node was previously inside a different node, it will be moved to this Document or Element.\n\t**/\n\tpublic function addChild(x:Xml):Void {\n\t\tensureElementType();\n\t\tif (x.parent != null) {\n\t\t\tx.parent.removeChild(x);\n\t\t}\n\t\tchildren.push(x);\n\t\tx.parent = this;\n\t}\n\n\t/**\n\t\tRemoves a child from the Document or Element.\n\t\tReturns true if the child was successfuly removed.\n\t**/\n\tpublic function removeChild(x:Xml):Bool {\n\t\tensureElementType();\n\t\tif (children.remove(x)) {\n\t\t\tx.parent = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tInserts a child at the given position among the other childs.\n\t\tA child node can only be inside one given parent node, which is indicated by the [parent] property.\n\t\tIf the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.\n\t\tIf the child node was previously inside a different node, it will be moved to this Document or Element.\n\t**/\n\tpublic function insertChild(x:Xml, pos:Int):Void {\n\t\tensureElementType();\n\t\tif (x.parent != null) {\n\t\t\tx.parent.children.remove(x);\n\t\t}\n\t\tchildren.insert(pos, x);\n\t\tx.parent = this;\n\t}\n\n\t/**\n\t\tReturns a String representation of the Xml node.\n\t**/\n\tpublic #if !cppia inline #end function toString():String {\n\t\treturn haxe.xml.Printer.print(this);\n\t}\n\n\tfunction new(nodeType:XmlType) {\n\t\tthis.nodeType = nodeType;\n\t\tchildren = [];\n\t\tattributeMap = new Map();\n\t}\n\n\tinline function ensureElementType() {\n\t\tif (nodeType != Document && nodeType != Element) {\n\t\t\tthrow 'Bad node type, expected Element or Document but found $nodeType';\n\t\t}\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class EReg {\n\tvar r:HaxeRegExp;\n\n\tpublic inline function new(r:String, opt:String):Void {\n\t\tthis.r = new HaxeRegExp(r, opt.split(\"u\").join(\"\")); // 'u' (utf8) depends on page encoding\n\t}\n\n\tpublic function match(s:String):Bool {\n\t\tif (r.global)\n\t\t\tr.lastIndex = 0;\n\t\tr.m = r.exec(s);\n\t\tr.s = s;\n\t\treturn (r.m != null);\n\t}\n\n\tpublic function matched(n:Int):String {\n\t\treturn if (r.m != null && n >= 0 && n < r.m.length) r.m[n] else throw \"EReg::matched\";\n\t}\n\n\tpublic function matchedLeft():String {\n\t\tif (r.m == null)\n\t\t\tthrow \"No string matched\";\n\t\treturn r.s.substr(0, r.m.index);\n\t}\n\n\tpublic function matchedRight():String {\n\t\tif (r.m == null)\n\t\t\tthrow \"No string matched\";\n\t\tvar sz = r.m.index + r.m[0].length;\n\t\treturn r.s.substr(sz, r.s.length - sz);\n\t}\n\n\tpublic function matchedPos():{pos:Int, len:Int} {\n\t\tif (r.m == null)\n\t\t\tthrow \"No string matched\";\n\t\treturn {pos: r.m.index, len: r.m[0].length};\n\t}\n\n\tpublic function matchSub(s:String, pos:Int, len:Int = -1):Bool {\n\t\treturn if (r.global) {\n\t\t\tr.lastIndex = pos;\n\t\t\tr.m = r.exec(len < 0 ? s : s.substr(0, pos + len));\n\t\t\tvar b = r.m != null;\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t}\n\t\t\tb;\n\t\t} else {\n\t\t\t// TODO: check some ^/$ related corner cases\n\t\t\tvar b = match(len < 0 ? s.substr(pos) : s.substr(pos, len));\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t\tr.m.index += pos;\n\t\t\t}\n\t\t\tb;\n\t\t}\n\t}\n\n\tpublic function split(s:String):Array<String> {\n\t\t// we can't use directly s.split because it's ignoring the 'g' flag\n\t\tvar d = \"#__delim__#\";\n\t\treturn replace(s, d).split(d);\n\t}\n\n\tpublic inline function replace(s:String, by:String):String {\n\t\treturn (cast s).replace(r, by);\n\t}\n\n\tpublic function map(s:String, f:EReg->String):String {\n\t\tvar offset = 0;\n\t\tvar buf = new StringBuf();\n\t\tdo {\n\t\t\tif (offset >= s.length)\n\t\t\t\tbreak;\n\t\t\telse if (!matchSub(s, offset)) {\n\t\t\t\tbuf.add(s.substr(offset));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar p = matchedPos();\n\t\t\tbuf.add(s.substr(offset, p.pos - offset));\n\t\t\tbuf.add(f(this));\n\t\t\tif (p.len == 0) {\n\t\t\t\tbuf.add(s.substr(p.pos, 1));\n\t\t\t\toffset = p.pos + 1;\n\t\t\t} else\n\t\t\t\toffset = p.pos + p.len;\n\t\t} while (r.global);\n\t\tif (!r.global && offset > 0 && offset < s.length)\n\t\t\tbuf.add(s.substr(offset));\n\t\treturn buf.toString();\n\t}\n\n\tpublic static inline function escape(s:String):String {\n\t\treturn (cast s).replace(escapeRe, \"\\\\$&\");\n\t}\n\n\tstatic var escapeRe = new js.lib.RegExp(\"[.*+?^${}()|[\\\\]\\\\\\\\]\", \"g\");\n}\n\n@:native(\"RegExp\")\nprivate extern class HaxeRegExp extends js.lib.RegExp {\n\tvar m:js.lib.RegExp.RegExpMatch;\n\tvar s:String;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.xml;\n\nenum Filter {\n\tFInt;\n\tFBool;\n\tFEnum(values:Array<String>);\n\tFReg(matcher:EReg);\n}\n\nenum Attrib {\n\tAtt(name:String, ?filter:Filter, ?defvalue:String);\n}\n\nenum Rule {\n\tRNode(name:String, ?attribs:Array<Attrib>, ?childs:Rule);\n\tRData(?filter:Filter);\n\tRMulti(rule:Rule, ?atLeastOne:Bool);\n\tRList(rules:Array<Rule>, ?ordered:Bool);\n\tRChoice(choices:Array<Rule>);\n\tROptional(rule:Rule);\n}\n\nprivate enum CheckResult {\n\tCMatch;\n\tCMissing(r:Rule);\n\tCExtra(x:Xml);\n\tCElementExpected(name:String, x:Xml);\n\tCDataExpected(x:Xml);\n\tCExtraAttrib(att:String, x:Xml);\n\tCMissingAttrib(att:String, x:Xml);\n\tCInvalidAttrib(att:String, x:Xml, f:Filter);\n\tCInvalidData(x:Xml, f:Filter);\n\tCInElement(x:Xml, r:CheckResult);\n}\n\nclass Check {\n\tstatic var blanks = ~/^[ \\r\\n\\t]*$/;\n\n\tstatic function isBlank(x:Xml) {\n\t\treturn (x.nodeType == Xml.PCData && blanks.match(x.nodeValue)) || x.nodeType == Xml.Comment;\n\t}\n\n\tstatic function filterMatch(s:String, f:Filter) {\n\t\tswitch (f) {\n\t\t\tcase FInt:\n\t\t\t\treturn filterMatch(s, FReg(~/[0-9]+/));\n\t\t\tcase FBool:\n\t\t\t\treturn filterMatch(s, FEnum([\"true\", \"false\", \"0\", \"1\"]));\n\t\t\tcase FEnum(values):\n\t\t\t\tfor (v in values)\n\t\t\t\t\tif (s == v)\n\t\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\tcase FReg(r):\n\t\t\t\treturn r.match(s);\n\t\t}\n\t}\n\n\tstatic function isNullable(r:Rule) {\n\t\tswitch (r) {\n\t\t\tcase RMulti(r, one):\n\t\t\t\treturn (one != true || isNullable(r));\n\t\t\tcase RList(rl, _):\n\t\t\t\tfor (r in rl)\n\t\t\t\t\tif (!isNullable(r))\n\t\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\tcase RChoice(rl):\n\t\t\t\tfor (r in rl)\n\t\t\t\t\tif (isNullable(r))\n\t\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\tcase RData(_):\n\t\t\t\treturn false;\n\t\t\tcase RNode(_, _, _):\n\t\t\t\treturn false;\n\t\t\tcase ROptional(_):\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\tstatic function check(x:Xml, r:Rule) {\n\t\tswitch (r) {\n\t\t\t// check the node validity\n\t\t\tcase RNode(name, attribs, childs):\n\t\t\t\tif (x.nodeType != Xml.Element || x.nodeName != name)\n\t\t\t\t\treturn CElementExpected(name, x);\n\t\t\t\tvar attribs = if (attribs == null) new Array() else attribs.copy();\n\t\t\t\t// check defined attributes\n\t\t\t\tfor (xatt in x.attributes()) {\n\t\t\t\t\tvar found = false;\n\t\t\t\t\tfor (att in attribs)\n\t\t\t\t\t\tswitch (att) {\n\t\t\t\t\t\t\tcase Att(name, filter, _):\n\t\t\t\t\t\t\t\tif (xatt != name)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\tif (filter != null && !filterMatch(x.get(xatt), filter))\n\t\t\t\t\t\t\t\t\treturn CInvalidAttrib(name, x, filter);\n\t\t\t\t\t\t\t\tattribs.remove(att);\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\tif (!found)\n\t\t\t\t\t\treturn CExtraAttrib(xatt, x);\n\t\t\t\t}\n\t\t\t\t// check remaining unchecked attributes\n\t\t\t\tfor (att in attribs)\n\t\t\t\t\tswitch (att) {\n\t\t\t\t\t\tcase Att(name, _, defvalue):\n\t\t\t\t\t\t\tif (defvalue == null)\n\t\t\t\t\t\t\t\treturn CMissingAttrib(name, x);\n\t\t\t\t\t}\n\t\t\t\t// check childs\n\t\t\t\tif (childs == null)\n\t\t\t\t\tchilds = RList([]);\n\t\t\t\tvar m = checkList(x.iterator(), childs);\n\t\t\t\tif (m != CMatch)\n\t\t\t\t\treturn CInElement(x, m);\n\t\t\t\t// set default attribs values\n\t\t\t\tfor (att in attribs)\n\t\t\t\t\tswitch (att) {\n\t\t\t\t\t\tcase Att(name, _, defvalue):\n\t\t\t\t\t\t\tx.set(name, defvalue);\n\t\t\t\t\t}\n\t\t\t\treturn CMatch;\n\t\t\t// check the data validity\n\t\t\tcase RData(filter):\n\t\t\t\tif (x.nodeType != Xml.PCData && x.nodeType != Xml.CData)\n\t\t\t\t\treturn CDataExpected(x);\n\t\t\t\tif (filter != null && !filterMatch(x.nodeValue, filter))\n\t\t\t\t\treturn CInvalidData(x, filter);\n\t\t\t\treturn CMatch;\n\t\t\t// several choices\n\t\t\tcase RChoice(choices):\n\t\t\t\tif (choices.length == 0)\n\t\t\t\t\tthrow \"No choice possible\";\n\t\t\t\tfor (c in choices)\n\t\t\t\t\tif (check(x, c) == CMatch)\n\t\t\t\t\t\treturn CMatch;\n\t\t\t\treturn check(x, choices[0]);\n\t\t\tcase ROptional(r):\n\t\t\t\treturn check(x, r);\n\t\t\tdefault:\n\t\t\t\tthrow \"Unexpected \" + Std.string(r);\n\t\t}\n\t}\n\n\tstatic function checkList(it:Iterator<Xml>, r:Rule) {\n\t\tswitch (r) {\n\t\t\tcase RList(rules, ordered):\n\t\t\t\tvar rules = rules.copy();\n\t\t\t\tfor (x in it) {\n\t\t\t\t\tif (isBlank(x))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar found = false;\n\t\t\t\t\tfor (r in rules) {\n\t\t\t\t\t\tvar m = checkList([x].iterator(), r);\n\t\t\t\t\t\tif (m == CMatch) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tswitch (r) {\n\t\t\t\t\t\t\t\tcase RMulti(rsub, one):\n\t\t\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\t\t\tvar i;\n\t\t\t\t\t\t\t\t\t\tfor (i in 0...rules.length)\n\t\t\t\t\t\t\t\t\t\t\tif (rules[i] == r)\n\t\t\t\t\t\t\t\t\t\t\t\trules[i] = RMulti(rsub);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\trules.remove(r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (ordered && !isNullable(r))\n\t\t\t\t\t\t\treturn m;\n\t\t\t\t\t}\n\t\t\t\t\tif (!found)\n\t\t\t\t\t\treturn CExtra(x);\n\t\t\t\t}\n\t\t\t\tfor (r in rules)\n\t\t\t\t\tif (!isNullable(r))\n\t\t\t\t\t\treturn CMissing(r);\n\t\t\t\treturn CMatch;\n\t\t\tcase RMulti(r, one):\n\t\t\t\tvar found = false;\n\t\t\t\tfor (x in it) {\n\t\t\t\t\tif (isBlank(x))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar m = checkList([x].iterator(), r);\n\t\t\t\t\tif (m != CMatch)\n\t\t\t\t\t\treturn m;\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t\tif (one && !found)\n\t\t\t\t\treturn CMissing(r);\n\t\t\t\treturn CMatch;\n\t\t\tdefault:\n\t\t\t\tvar found = false;\n\t\t\t\tfor (x in it) {\n\t\t\t\t\tif (isBlank(x))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar m = check(x, r);\n\t\t\t\t\tif (m != CMatch)\n\t\t\t\t\t\treturn m;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!found) {\n\t\t\t\t\tswitch (r) {\n\t\t\t\t\t\tcase ROptional(_):\n\t\t\t\t\t\tdefault: return CMissing(r);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (x in it) {\n\t\t\t\t\tif (isBlank(x))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\treturn CExtra(x);\n\t\t\t\t}\n\t\t\t\treturn CMatch;\n\t\t}\n\t}\n\n\tstatic function makeWhere(path:Array<Xml>) {\n\t\tif (path.length == 0)\n\t\t\treturn \"\";\n\t\tvar s = \"In \";\n\t\tvar first = true;\n\t\tfor (x in path) {\n\t\t\tif (first)\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts += \".\";\n\t\t\ts += x.nodeName;\n\t\t}\n\t\treturn s + \": \";\n\t}\n\n\tstatic function makeString(x:Xml) {\n\t\tif (x.nodeType == Xml.Element)\n\t\t\treturn \"element \" + x.nodeName;\n\t\tvar s = x.nodeValue.split(\"\\r\").join(\"\\\\r\").split(\"\\n\").join(\"\\\\n\").split(\"\\t\").join(\"\\\\t\");\n\t\tif (s.length > 20)\n\t\t\treturn s.substr(0, 17) + \"...\";\n\t\treturn s;\n\t}\n\n\tstatic function makeRule(r:Rule) {\n\t\tswitch (r) {\n\t\t\tcase RNode(name, _, _):\n\t\t\t\treturn \"element \" + name;\n\t\t\tcase RData(_):\n\t\t\t\treturn \"data\";\n\t\t\tcase RMulti(r, _):\n\t\t\t\treturn makeRule(r);\n\t\t\tcase RList(rules, _):\n\t\t\t\treturn makeRule(rules[0]);\n\t\t\tcase RChoice(choices):\n\t\t\t\treturn makeRule(choices[0]);\n\t\t\tcase ROptional(r):\n\t\t\t\treturn makeRule(r);\n\t\t}\n\t}\n\n\tstatic function makeError(m, ?path) {\n\t\tif (path == null)\n\t\t\tpath = new Array();\n\t\tswitch (m) {\n\t\t\tcase CMatch:\n\t\t\t\tthrow \"assert\";\n\t\t\tcase CMissing(r):\n\t\t\t\treturn makeWhere(path) + \"Missing \" + makeRule(r);\n\t\t\tcase CExtra(x):\n\t\t\t\treturn makeWhere(path) + \"Unexpected \" + makeString(x);\n\t\t\tcase CElementExpected(name, x):\n\t\t\t\treturn makeWhere(path) + makeString(x) + \" while expected element \" + name;\n\t\t\tcase CDataExpected(x):\n\t\t\t\treturn makeWhere(path) + makeString(x) + \" while data expected\";\n\t\t\tcase CExtraAttrib(att, x):\n\t\t\t\tpath.push(x);\n\t\t\t\treturn makeWhere(path) + \"unexpected attribute \" + att;\n\t\t\tcase CMissingAttrib(att, x):\n\t\t\t\tpath.push(x);\n\t\t\t\treturn makeWhere(path) + \"missing required attribute \" + att;\n\t\t\tcase CInvalidAttrib(att, x, _):\n\t\t\t\tpath.push(x);\n\t\t\t\treturn makeWhere(path) + \"invalid attribute value for \" + att;\n\t\t\tcase CInvalidData(x, _):\n\t\t\t\treturn makeWhere(path) + \"invalid data format for \" + makeString(x);\n\t\t\tcase CInElement(x, m):\n\t\t\t\tpath.push(x);\n\t\t\t\treturn makeError(m, path);\n\t\t}\n\t}\n\n\tpublic static function checkNode(x:Xml, r:Rule) {\n\t\tvar m = checkList([x].iterator(), r);\n\t\tif (m == CMatch)\n\t\t\treturn;\n\t\tthrow makeError(m);\n\t}\n\n\tpublic static function checkDocument(x:Xml, r:Rule) {\n\t\tif (x.nodeType != Xml.Document)\n\t\t\tthrow \"Document expected\";\n\t\tvar m = checkList(x.iterator(), r);\n\t\tif (m == CMatch)\n\t\t\treturn;\n\t\tthrow makeError(m);\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}