{"sourceRoot":"","names":[],"mappings":"QAiCA;;ACDA;;;;;;;;;;;;;;;;;;;;QAWC,yBCuCD,uDC7DiB","version":3,"file":"JsonPrinter.d.ts.map","sources":["../../../../../../../haxe/versions/4.0.0/std/StringBuf.hx","../../../../../../../haxe/versions/4.0.0/std/haxe/format/JsonPrinter.hx","../../../../../../../haxe/versions/4.0.0/std/StdTypes.hx","../../../../../../../haxe/versions/4.0.0/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tIts cross-platform implementation uses String concatenation internally, but\n\tStringBuf may be optimized for different targets.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues. However, the internal buffer cannot be modified.\n**/\nclass StringBuf {\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get, never):Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length():Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>(x:T):Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar(c:Int):Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub(s:String, pos:Int, ?len:Int):Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString():String {\n\t\treturn b;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.format;\n\n/**\n\tAn implementation of JSON printer in Haxe.\n\n\tThis class is used by `haxe.Json` when native JSON implementation\n\tis not available.\n\n\t@see https://haxe.org/manual/std-Json-encoding.html\n**/\nclass JsonPrinter {\n\t/**\n\t\tEncodes `o`'s value and returns the resulting JSON string.\n\n\t\tIf `replacer` is given and is not null, it is used to retrieve\n\t\tactual object to be encoded. The `replacer` function takes two parameters,\n\t\tthe key and the value being encoded. Initial key value is an empty string.\n\n\t\tIf `space` is given and is not null, the result will be pretty-printed.\n\t\tSuccessive levels will be indented by this string.\n\t**/\n\tstatic public function print(o:Dynamic, ?replacer:(key:Dynamic, value:Dynamic) -> Dynamic, ?space:String):String {\n\t\tvar printer = new JsonPrinter(replacer, space);\n\t\tprinter.write(\"\", o);\n\t\treturn printer.buf.toString();\n\t}\n\n\tvar buf:#if flash flash.utils.ByteArray #else StringBuf #end;\n\tvar replacer:(key:Dynamic, value:Dynamic) -> Dynamic;\n\tvar indent:String;\n\tvar pretty:Bool;\n\tvar nind:Int;\n\n\tfunction new(replacer:(key:Dynamic, value:Dynamic) -> Dynamic, space:String) {\n\t\tthis.replacer = replacer;\n\t\tthis.indent = space;\n\t\tthis.pretty = space != null;\n\t\tthis.nind = 0;\n\n\t\t#if flash\n\t\tbuf = new flash.utils.ByteArray();\n\t\tbuf.endian = flash.utils.Endian.BIG_ENDIAN;\n\t\tbuf.position = 0;\n\t\t#else\n\t\tbuf = new StringBuf();\n\t\t#end\n\t}\n\n\tinline function ipad():Void {\n\t\tif (pretty)\n\t\t\tadd(StringTools.lpad('', indent, nind * indent.length));\n\t}\n\n\tinline function newl():Void {\n\t\tif (pretty)\n\t\t\taddChar('\\n'.code);\n\t}\n\n\tfunction write(k:Dynamic, v:Dynamic) {\n\t\tif (replacer != null)\n\t\t\tv = replacer(k, v);\n\t\tswitch (Type.typeof(v)) {\n\t\t\tcase TUnknown:\n\t\t\t\tadd('\"???\"');\n\t\t\tcase TObject:\n\t\t\t\tobjString(v);\n\t\t\tcase TInt:\n\t\t\t\tadd(#if (as3 || jvm) Std.string(v) #else v #end);\n\t\t\tcase TFloat:\n\t\t\t\tadd(Math.isFinite(v) ? Std.string(v) : 'null');\n\t\t\tcase TFunction:\n\t\t\t\tadd('\"<fun>\"');\n\t\t\tcase TClass(c):\n\t\t\t\tif (c == String)\n\t\t\t\t\tquote(v);\n\t\t\t\telse if (c == Array) {\n\t\t\t\t\tvar v:Array<Dynamic> = v;\n\t\t\t\t\taddChar('['.code);\n\n\t\t\t\t\tvar len = v.length;\n\t\t\t\t\tvar last = len - 1;\n\t\t\t\t\tfor (i in 0...len) {\n\t\t\t\t\t\tif (i > 0)\n\t\t\t\t\t\t\taddChar(','.code)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tnind++;\n\t\t\t\t\t\tnewl();\n\t\t\t\t\t\tipad();\n\t\t\t\t\t\twrite(i, v[i]);\n\t\t\t\t\t\tif (i == last) {\n\t\t\t\t\t\t\tnind--;\n\t\t\t\t\t\t\tnewl();\n\t\t\t\t\t\t\tipad();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\taddChar(']'.code);\n\t\t\t\t} else if (c == haxe.ds.StringMap) {\n\t\t\t\t\tvar v:haxe.ds.StringMap<Dynamic> = v;\n\t\t\t\t\tvar o = {};\n\t\t\t\t\tfor (k in v.keys())\n\t\t\t\t\t\tReflect.setField(o, k, v.get(k));\n\t\t\t\t\tobjString(o);\n\t\t\t\t} else if (c == Date) {\n\t\t\t\t\tvar v:Date = v;\n\t\t\t\t\tquote(v.toString());\n\t\t\t\t} else\n\t\t\t\t\tclassString(v);\n\t\t\tcase TEnum(_):\n\t\t\t\tvar i:Dynamic = Type.enumIndex(v);\n\t\t\t\tadd(i);\n\t\t\tcase TBool:\n\t\t\t\tadd(#if (php || as3 || jvm) (v ? 'true' : 'false') #else v #end);\n\t\t\tcase TNull:\n\t\t\t\tadd('null');\n\t\t}\n\t}\n\n\textern inline function addChar(c:Int) {\n\t\t#if flash\n\t\tbuf.writeByte(c);\n\t\t#else\n\t\tbuf.addChar(c);\n\t\t#end\n\t}\n\n\textern inline function add(v:String) {\n\t\t#if flash\n\t\t// argument is not always a string but will be automatically casted\n\t\tbuf.writeUTFBytes(v);\n\t\t#else\n\t\tbuf.add(v);\n\t\t#end\n\t}\n\n\tfunction classString(v:Dynamic) {\n\t\tfieldsString(v, Type.getInstanceFields(Type.getClass(v)));\n\t}\n\n\tinline function objString(v:Dynamic) {\n\t\tfieldsString(v, Reflect.fields(v));\n\t}\n\n\tfunction fieldsString(v:Dynamic, fields:Array<String>) {\n\t\taddChar('{'.code);\n\t\tvar len = fields.length;\n\t\tvar last = len - 1;\n\t\tvar first = true;\n\t\tfor (i in 0...len) {\n\t\t\tvar f = fields[i];\n\t\t\tvar value = Reflect.field(v, f);\n\t\t\tif (Reflect.isFunction(value))\n\t\t\t\tcontinue;\n\t\t\tif (first) {\n\t\t\t\tnind++;\n\t\t\t\tfirst = false;\n\t\t\t} else\n\t\t\t\taddChar(','.code);\n\t\t\tnewl();\n\t\t\tipad();\n\t\t\tquote(f);\n\t\t\taddChar(':'.code);\n\t\t\tif (pretty)\n\t\t\t\taddChar(' '.code);\n\t\t\twrite(f, value);\n\t\t\tif (i == last) {\n\t\t\t\tnind--;\n\t\t\t\tnewl();\n\t\t\t\tipad();\n\t\t\t}\n\t\t}\n\t\taddChar('}'.code);\n\t}\n\n\tfunction quote(s:String) {\n\t\t#if neko\n\t\tif (s.length != neko.Utf8.length(s)) {\n\t\t\tquoteUtf8(s);\n\t\t\treturn;\n\t\t}\n\t\t#end\n\t\taddChar('\"'.code);\n\t\tvar i = 0;\n\t\t#if hl\n\t\tvar prev = -1;\n\t\t#end\n\t\twhile (true) {\n\t\t\tvar c = StringTools.fastCodeAt(s, i++);\n\t\t\tif (StringTools.isEof(c))\n\t\t\t\tbreak;\n\t\t\tswitch (c) {\n\t\t\t\tcase '\"'.code:\n\t\t\t\t\tadd('\\\\\"');\n\t\t\t\tcase '\\\\'.code:\n\t\t\t\t\tadd('\\\\\\\\');\n\t\t\t\tcase '\\n'.code:\n\t\t\t\t\tadd('\\\\n');\n\t\t\t\tcase '\\r'.code:\n\t\t\t\t\tadd('\\\\r');\n\t\t\t\tcase '\\t'.code:\n\t\t\t\t\tadd('\\\\t');\n\t\t\t\tcase 8:\n\t\t\t\t\tadd('\\\\b');\n\t\t\t\tcase 12:\n\t\t\t\t\tadd('\\\\f');\n\t\t\t\tdefault:\n\t\t\t\t\t#if flash\n\t\t\t\t\tif (c >= 128)\n\t\t\t\t\t\tadd(String.fromCharCode(c))\n\t\t\t\t\telse\n\t\t\t\t\t\taddChar(c);\n\t\t\t\t\t#elseif hl\n\t\t\t\t\tif (prev >= 0) {\n\t\t\t\t\t\tif (c >= 0xD800 && c <= 0xDFFF) {\n\t\t\t\t\t\t\taddChar((((prev - 0xD800) << 10) | (c - 0xDC00)) + 0x10000);\n\t\t\t\t\t\t\tprev = -1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taddChar(\"□\".code);\n\t\t\t\t\t\t\tprev = c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (c >= 0xD800 && c <= 0xDFFF)\n\t\t\t\t\t\t\tprev = c;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\taddChar(c);\n\t\t\t\t\t}\n\t\t\t\t\t#else\n\t\t\t\t\taddChar(c);\n\t\t\t\t\t#end\n\t\t\t}\n\t\t}\n\t\t#if hl\n\t\tif (prev >= 0)\n\t\t\taddChar(\"□\".code);\n\t\t#end\n\t\taddChar('\"'.code);\n\t}\n\n\t#if neko\n\tfunction quoteUtf8(s:String) {\n\t\tvar u = new neko.Utf8();\n\t\tneko.Utf8.iter(s, function(c) {\n\t\t\tswitch (c) {\n\t\t\t\tcase '\\\\'.code, '\"'.code:\n\t\t\t\t\tu.addChar('\\\\'.code);\n\t\t\t\t\tu.addChar(c);\n\t\t\t\tcase '\\n'.code:\n\t\t\t\t\tu.addChar('\\\\'.code);\n\t\t\t\t\tu.addChar('n'.code);\n\t\t\t\tcase '\\r'.code:\n\t\t\t\t\tu.addChar('\\\\'.code);\n\t\t\t\t\tu.addChar('r'.code);\n\t\t\t\tcase '\\t'.code:\n\t\t\t\t\tu.addChar('\\\\'.code);\n\t\t\t\t\tu.addChar('t'.code);\n\t\t\t\tcase 8:\n\t\t\t\t\tu.addChar('\\\\'.code);\n\t\t\t\t\tu.addChar('b'.code);\n\t\t\t\tcase 12:\n\t\t\t\t\tu.addChar('\\\\'.code);\n\t\t\t\t\tu.addChar('f'.code);\n\t\t\t\tdefault:\n\t\t\t\t\tu.addChar(c);\n\t\t\t}\n\t\t});\n\t\tbuf.add('\"');\n\t\tbuf.add(u.toString());\n\t\tbuf.add('\"');\n\t}\n\t#end\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}