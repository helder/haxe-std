{"sourceRoot":"","names":[],"mappings":"QA6BO;OCMA;OCiBA;QC3BP;QCeA;QCnCA;QCsCO;QCjBG;QCLA;;;;ACOV;AAAA;CAGiC,SAC/B;EAAA,UAAM;;;;;;;CAOP,SAAyB,CACxB;EAAA,GAAI,aAAO,MACV;GAAA;IACD;EAAA,iBACA;EAAA,WAAM;;CAGP,cAA6C;EAAA,kBAC5C;EAAA,wBAAmB,KACnB;EAAA,qBAAgB,KAChB;EAAA,gBAAgB,QAAoB,UACpC;EAAA,aAAa,AAAC,sBAAsB,SACpC;EAAA,WAAW,mBACX;EAAA,WAAW,mBACX;EAAA,WAAW,AAAI,mBAAkB,QAAM,aAAa,kBAAqB,AAAC,WAAS,MAAM,GACzF;EAAA,QAAgB,GAChB;EAAA;EAAA,UAAU,aAAV;EAAA,YAAU,YAAV,CAAK;GAAA,QAAL,AAAU,IAAV;GAAA,KACC;GAAA,UAAU,iBAAc,GAAG,QAC3B;GAAA,GAAI,QAAO,MAAM,CAChB;IAAA,MAAM,YACN;IAAA,AAAiB,EAAjB,AAAoB,UAAQ;KAG7B;GAAA,SAAS;IAEV;EAAA,GAAI,kBAAY,QAAQ,kBAAa,MACpC;GAAA,OAAO;IACR;EAAA,UAAU,KACV;EAAA;EAAA,UAAU,YAAV;EAAA,YAAU,YAAV,CAAK;GAAA,QAAL,AAAU,IAAV;GAAA,KACC;GAAA,GAAI,QAAO,MACV;IAAA,MAAM;IAEN;IAAA,OAAO;KACD;GAAA,QAAsB,OAAtB;GAAA,mCAAgC,IAAM;GAAA,SAAsB,QAAnE;GAAA,OAAO,OAAsC;IAE9C;EAAA,eAAe,WAAW,eAAe,EACzC;EAAA,GAAI,QAAO,MACV;GAAA,QAAQ,CAAK,aAAU,MAAS,OAAO;IAExC;EAAA,WAAW,CACA,gCACA,kBACJ,cACE,mBAAQ,SAAS,OACnB,cACG,cAEV;EAAA,kCAA2B,CAC1B;GAAA,gBAAiB,UACjB;GAAA,QAAQ,eACR;GAAA,GAAI,MAAK,MACR;IAAA,gBAAS;KACV;GAAA,WAAW,GACX;GAAA,OAAQ,QAAO,iBACd;IAAA,UAAU,YAAY,OAAQ;MAE/B;GAAA,OAAQ,OAAM,aAAY,CACzB;IAAA,UAAU,AAAC,gBAAe,KAAI,KAAK,KAAK,cAAc,MACzB;IAAA,oCAAiB,gBAAgB,iBAAiB,gBAA/E;IAAA,uBAAgB,aAAa,cAC7B;IAAA,aAAM,KACN;IAAA,GAAI,MAAK,QAAQ,KAAK,OAAO,IAAI,KAChC;KAAA,eAAQ;KAER;KAAA,eAAQ,iBAAiB;;;IAI5B;EAAA,WAAM,WAAS,cAA8B,MAAM,gBAAgB,aAA6B,MAAM,cACtG;EAAA,GAAI,OACH;GAAA,GAAI,kBAAY,MACf;IAAA,eAAU;IACJ,SAAG,mBAAa,MAAM,CAC5B;IAAA,mBAAc,kBAAmB,KAAE,uBACnC;IAAA,eAAU,YAAY;;IAGxB;EAAA","version":3,"file":"HttpNodeJs.js.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/url/URL.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Https.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Http.hx","../../../../../../../haxe/versions/4.2.3/std/js/_std/haxe/io/Bytes.hx","../../../../../../../haxe/versions/4.2.3/std/haxe/http/HttpBase.hx","../../../../../../../haxe/haxe_libraries/genes/0.4.1/github/179cb495c2d785321879e8afe765aa04d639783d/src/genes/Register.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx","../../../../../../../haxe/versions/4.2.3/std/js/_std/Std.hx","../../../../../../../haxe/versions/4.2.3/std/js/_std/Reflect.hx","../../../../../../../haxe/versions/4.2.3/std/haxe/http/HttpNodeJs.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.url;\r\n\r\n/**\r\n\tBrowser-compatible URL class, implemented by following the WHATWG URL Standard.\r\n\t[Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.\r\n**/\r\n@:jsRequire(\"url\", \"URL\")\r\nextern class URL {\r\n\t/**\r\n\t\tCreates a new `URL` object by parsing the `input` relative to the `base`.\r\n\t\tIf `base` is passed as a string, it will be parsed equivalent to `new URL(base)`.\r\n\t**/\r\n\t@:overload(function(input:String, ?base:URL):Void {})\r\n\tfunction new(input:String, ?base:String):Void;\r\n\r\n\t/**\r\n\t\tGets and sets the fragment portion of the URL.\r\n\t**/\r\n\tvar hash:String;\r\n\r\n\t/**\r\n\t\tGets and sets the host portion of the URL.\r\n\t**/\r\n\tvar host:String;\r\n\r\n\t/**\r\n\t\tGets and sets the hostname portion of the URL\r\n\t\tThe key difference between `url.host` and `url.hostname` is that `url.hostname` does not include the port.\r\n\t**/\r\n\tvar hostname:String;\r\n\r\n\t/**\r\n\t\tGets and sets the serialized URL.\r\n\t**/\r\n\tvar href:String;\r\n\r\n\t/**\r\n\t\tGets the read-only serialization of the URL's origin.\r\n\t**/\r\n\tvar origin(default, null):String;\r\n\r\n\t/**\r\n\t\tGets and sets the password portion of the URL.\r\n\t**/\r\n\tvar password:String;\r\n\r\n\t/**\r\n\t\tGets and sets the path portion of the URL.\r\n\t**/\r\n\tvar pathname:String;\r\n\r\n\t/**\r\n\t\tGets and sets the port portion of the URL.\r\n\r\n\t\tThe port value may be a number or a string containing a number in the range `0` to `65535` (inclusive).\r\n\t\tSetting the value to the default port of the `URL` objects given `protocol` will result in the port value becoming the empty string (`''`).\r\n\t**/\r\n\tvar port:String;\r\n\r\n\t/**\r\n\t\tGets and sets the protocol portion of the URL.\r\n\t**/\r\n\tvar protocol:String;\r\n\r\n\t/**\r\n\t\tGets and sets the serialized query portion of the URL.\r\n\t**/\r\n\tvar search:String;\r\n\r\n\t/**\r\n\t\tGets the `URLSearchParams` object representing the query parameters of the URL.\r\n\t\tThis property is read-only; to replace the entirety of query parameters of the URL, use the `url.search` setter.\r\n\t\tSee [URLSearchParams](https://nodejs.org/api/url.html#url_class_urlsearchparams) documentation for details.\r\n\t**/\r\n\tvar searchParams(default, null):URLSearchParams;\r\n\r\n\t/**\r\n\t\tGets and sets the username portion of the URL.\r\n\t**/\r\n\tvar username:String;\r\n\r\n\t/**\r\n\t\tThe `toString()` method on the `URL` object returns the serialized URL.\r\n\t\tThe value returned is equivalent to that of `url.href` and `url.toJSON()`.\r\n\r\n\t\tBecause of the need for standard compliance, this method does not allow users to customize the serialization process of the URL.\r\n\t\tFor more flexibility, `require('url').format()` method might be of interest.\r\n\t**/\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tThe `toJSON()` method on the `URL` object returns the serialized URL.\r\n\t\tThe value returned is equivalent to that of `url.href` and `url.toString()`.\r\n\r\n\t\tThis method is automatically called when an `URL` object is serialized with `JSON.stringify()`.\r\n\t**/\r\n\tfunction toJSON():String;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport js.node.http.ClientRequest;\r\nimport js.node.http.IncomingMessage;\r\nimport js.node.http.ServerResponse;\r\nimport js.node.https.*;\r\nimport js.node.url.URL;\r\n\r\n/**\r\n\tHTTPS is the HTTP protocol over TLS/SSL.\r\n\tIn Node.js this is implemented as a separate module.\r\n**/\r\n@:jsRequire(\"https\")\r\nextern class Https {\r\n\t/**\r\n\t\tReturns a new HTTPS web server object.\r\n\t**/\r\n\t#if haxe4\r\n\t@:overload(function(options:HttpsCreateServerOptions, ?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server {})\r\n\tstatic function createServer(?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server;\r\n\t#else\r\n\t@:overload(function(options:HttpsCreateServerOptions, ?requestListener:IncomingMessage->ServerResponse->Void):Server {})\r\n\tstatic function createServer(?requestListener:IncomingMessage->ServerResponse->Void):Server;\r\n\t#end\r\n\r\n\t/**\r\n\t\tLike `Http.get` but for HTTPS.\r\n\r\n\t\t`options` can be an object, a string, or a `URL` object.\r\n\t\tIf `options` is a string, it is automatically parsed with `new URL()`.\r\n\t\tIf it is a `URL` object, it will be automatically converted to an ordinary `options` object.\r\n\t**/\r\n\t@:overload(function(url:URL, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(url:String, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function get(options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n\r\n\t/**\r\n\t\tGlobal instance of `https.Agent` for all HTTPS client requests.\r\n\t**/\r\n\tstatic var globalAgent:Agent;\r\n\r\n\t/**\r\n\t\tMakes a request to a secure web server.\r\n\r\n\t\tThe following additional `options` from `tls.connect()` are also accepted:\r\n\t\t`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`, `honorCipherOrder`, `key`, `passphrase`, `pfx`,\r\n\t\t`rejectUnauthorized`, `secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`.\r\n\r\n\t\t`options` can be an object, a string, or a `URL` object.\r\n\t\tIf `options` is a string, it is automatically parsed with `new URL()`.\r\n\t\tIf it is a `URL` object, it will be automatically converted to an ordinary `options` object.\r\n\t**/\r\n\t@:overload(function(options:URL, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(options:String, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function request(options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n}\r\n\r\ntypedef HttpsCreateServerOptions = {\r\n\t> js.node.Tls.TlsCreateServerOptions,\r\n\t> js.node.tls.SecureContext.SecureContextOptions,\r\n\t> js.node.Http.HttpCreateServerOptions,\r\n}\r\n\r\ntypedef HttpsRequestOptions = {\r\n\t> js.node.Http.HttpRequestOptions,\r\n\t> js.node.Tls.TlsConnectOptions,\r\n\t// TODO: clean those options up\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.DynamicAccess;\r\nimport haxe.extern.EitherType;\r\nimport js.node.http.*;\r\nimport js.node.net.Socket;\r\nimport js.node.stream.Duplex;\r\nimport js.node.url.URL;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tThe HTTP interfaces in Node are designed to support many features of the protocol\r\n\twhich have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages.\r\n\tThe interface is careful to never buffer entire requests or responses--the user is able to stream data.\r\n\r\n\tHTTP message headers are represented by an object like this:\r\n\t\t{ 'content-length': '123',\r\n\t\t  'content-type': 'text/plain',\r\n\t\t  'connection': 'keep-alive' }\r\n\tKeys are lowercased. Values are not modified.\r\n\r\n\tIn order to support the full spectrum of possible HTTP applications, Node's HTTP API is very low-level.\r\n\tIt deals with stream handling and message parsing only. It parses a message into headers and body but\r\n\tit does not parse the actual headers or the body.\r\n**/\r\n@:jsRequire(\"http\")\r\nextern class Http {\r\n\t/**\r\n\t\tA list of the HTTP methods that are supported by the parser.\r\n\t**/\r\n\tstatic var METHODS:Array<String>;\r\n\r\n\t/**\r\n\t\tA collection of all the standard HTTP response status codes, and the short description of each.\r\n\t\tFor example, `http.STATUS_CODES[404] === 'Not Found'`.\r\n\t**/\r\n\tstatic var STATUS_CODES(default, null):DynamicAccess<String>;\r\n\r\n\t/**\r\n\t\tReturns a new web server object.\r\n\r\n\t\tThe `requestListener` is a function which is automatically added to the `'request'` event.\r\n\t**/\r\n\t#if haxe4\r\n\t@:overload(function(options:HttpCreateServerOptions, ?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server {})\r\n\tstatic function createServer(?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server;\r\n\t#else\r\n\t@:overload(function(options:HttpCreateServerOptions, ?requestListener:IncomingMessage->ServerResponse->Void):Server {})\r\n\tstatic function createServer(?requestListener:IncomingMessage->ServerResponse->Void):Server;\r\n\t#end\r\n\r\n\t/**\r\n\t\tSince most requests are GET requests without bodies, Node.js provides this convenience method.\r\n\t\tThe only difference between this method and `request()` is that it sets the method to GET and calls `end()` automatically.\r\n\t\tThe callback must take care to consume the response data for reasons stated in `http.ClientRequest` section.\r\n\t**/\r\n\t@:overload(function(url:URL, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(url:String, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function get(options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n\r\n\t/**\r\n\t\tGlobal instance of Agent which is used as the default for all http client requests.\r\n\t**/\r\n\tstatic var globalAgent:Agent;\r\n\r\n\tstatic var maxHeaderSize:Int;\r\n\r\n\t/**\r\n\t\tNode.js maintains several connections per server to make HTTP requests.\r\n\t\tThis function allows one to transparently issue requests.\r\n\r\n\t\t`url` can be a string or a URL object.\r\n\t\tIf `url` is a string, it is automatically parsed with `new URL()`.\r\n\t\tIf it is a `URL` object, it will be automatically converted to an ordinary `options` object.\r\n\r\n\t\tIf both `url` and `options` are specified, the objects are merged, with the `options` properties taking precedence.\r\n\r\n\t\tThe optional `callback` parameter will be added as a one-time listener for the `'response'` event.\r\n\r\n\t\t`request()` returns an instance of the `http.ClientRequest` class.\r\n\t\tThe `ClientRequest` instance is a writable stream.\r\n\t\tIf one needs to upload a file with a POST request, then write to the `ClientRequest` object.\r\n\t**/\r\n\t@:overload(function(url:URL, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(url:String, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function request(options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n}\r\n\r\ntypedef HttpCreateServerOptions = {\r\n\t/**\r\n\t\tSpecifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.\r\n\r\n\t\tDefault: `js.node.http.IncomingMessage`.\r\n\t**/\r\n\t@:optional var IncomingMessage:Class<Dynamic>;\r\n\r\n\t/**\r\n\t\tSpecifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.\r\n\r\n\t\tDefault: `ServerResponse`.\r\n\t**/\r\n\t@:optional var ServerResponse:Class<Dynamic>;\r\n}\r\n\r\n/**\r\n\tType of the options object passed to `Http.request`.\r\n**/\r\ntypedef HttpRequestOptions = {\r\n\t/**\r\n\t\tControls Agent behavior.\r\n\r\n\t\tPossible values:\r\n\r\n\t\t- `undefined` (default): use http.globalAgent for this host and port.\r\n\t\t- `Agent` object: explicitly use the passed in `Agent`.\r\n\t\t- `false` : causes a new `Agent` with default values to be used.\r\n\t**/\r\n\t@:optional var agent:EitherType<Agent, Bool>;\r\n\r\n\t/**\r\n\t\tBasic authentication i.e. `'user:password'` to compute an Authorization header.\r\n\t**/\r\n\t@:optional var auth:String;\r\n\r\n\t/**\r\n\t\tA function that produces a socket/stream to use for the request when the `agent` option is not used.\r\n\t\tThis can be used to avoid creating a custom `Agent` class just to override the default `createConnection` function.\r\n\t\tSee [agent.createConnection()](https://nodejs.org/api/http.html#http_agent_createconnection_options_callback) for more details.\r\n\t\tAny `Duplex` stream is a valid return value.\r\n\t**/\r\n\t#if haxe4\r\n\t@:optional var createConnection:(options:SocketConnectOptionsTcp, ?callabck:(err:Error, stream:IDuplex) -> Void) -> IDuplex;\r\n\t#else\r\n\t@:optional var createConnection:SocketConnectOptionsTcp->?(Error->IDuplex->Void)->IDuplex;\r\n\t#end\r\n\r\n\t/**\r\n\t\tDefault port for the protocol.\r\n\r\n\t\tDefault: `agent.defaultPort` if an Agent is used, else `undefined`.\r\n\t**/\r\n\t@:optional var defaultPort:Int;\r\n\r\n\t/**\r\n\t\tIP address family to use when resolving `host` or `hostname`.\r\n\t\tValid values are `4` or `6`. When unspecified, both IP v4 and v6 will be used.\r\n\t**/\r\n\t@:optional var family:js.node.Dns.DnsAddressFamily;\r\n\r\n\t/**\r\n\t\tAn object containing request headers.\r\n\t**/\r\n\t@:optional var headers:DynamicAccess<EitherType<String, Array<String>>>;\r\n\r\n\t/**\r\n\t\tA domain name or IP address of the server to issue the request to.\r\n\r\n\t\tDefault: `'localhost'`.\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tAlias for `host`.\r\n\t\tTo support `url.parse()`, hostname will be used if both `host` and `hostname` are specified.\r\n\t**/\r\n\t@:optional var hostname:String;\r\n\r\n\t/**\r\n\t\tLocal interface to bind for network connections.\r\n\t**/\r\n\t@:optional var localAddress:String;\r\n\r\n\t/**\r\n\t\tA string specifying the HTTP request method.\r\n\r\n\t\tDefault: `'GET'`.\r\n\t**/\r\n\t@:optional var method:Method;\r\n\r\n\t/**\r\n\t\tRequest path. Should include query string if any. E.G. `'/index.html?page=12'`.\r\n\t\tAn exception is thrown when the request path contains illegal characters.\r\n\t\tCurrently, only spaces are rejected but that may change in the future.\r\n\r\n\t\tDefault: `'/'`.\r\n\t**/\r\n\t@:optional var path:String;\r\n\r\n\t/**\r\n\t\tPort of remote server.\r\n\r\n\t\tDefault: `defaultPort` if set, else `80`.\r\n\t**/\r\n\t@:optional var port:Int;\r\n\r\n\t/**\r\n\t\tProtocol to use.\r\n\r\n\t\tDefault: `'http:'`.\r\n\t**/\r\n\t@:optional var protocol:String;\r\n\r\n\t/**\r\n\t\tSpecifies whether or not to automatically add the Host header.\r\n\t\tDefaults to `true`.\r\n\t**/\r\n\t@:optional var setHost:Bool;\r\n\r\n\t/**\r\n\t\tUnix Domain Socket (cannot be used if one of host or port is specified, those specify a TCP Socket).\r\n\t**/\r\n\t@:optional var socketPath:String;\r\n\r\n\t/**\r\n\t\tA number specifying the socket timeout in milliseconds.\r\n\t\tThis will set the timeout before the socket is connected.\r\n\t**/\r\n\t@:optional var timeout:Int;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.io;\n\n@:coreApi\nclass Bytes {\n\tpublic var length(default, null):Int;\n\n\tvar b:js.lib.Uint8Array;\n\tvar data:js.lib.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.lib.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get(pos:Int):Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set(pos:Int, v:Int):Void {\n\t\tb[pos] = v;\n\t}\n\n\tpublic function blit(pos:Int, src:Bytes, srcpos:Int, len:Int):Void {\n\t\tif (pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (srcpos == 0 && len == src.b.byteLength)\n\t\t\tb.set(src.b, pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos, srcpos + len), pos);\n\t}\n\n\tpublic function fill(pos:Int, len:Int, value:Int):Void {\n\t\tfor (i in 0...len)\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub(pos:Int, len:Int):Bytes {\n\t\tif (pos < 0 || len < 0 || pos + len > length)\n\t\t\tthrow Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos + b.byteOffset, pos + b.byteOffset + len));\n\t}\n\n\tpublic function compare(other:Bytes):Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor (i in 0...len)\n\t\t\tif (b1[i] != b2[i])\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData():Void {\n\t\tif (data == null)\n\t\t\tdata = new js.lib.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble(pos:Int):Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat(pos:Int):Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble(pos:Int, v:Float):Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat(pos:Int, v:Float):Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16(pos:Int):Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16(pos:Int, v:Int):Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32(pos:Int):Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32(pos:Int, v:Int):Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64(pos:Int):haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4), getInt32(pos));\n\t}\n\n\tpublic function setInt64(pos:Int, v:haxe.Int64):Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString(pos:Int, len:Int, ?encoding:Encoding):String {\n\t\tif (pos < 0 || len < 0 || pos + len > length)\n\t\t\tthrow Error.OutsideBounds;\n\t\tif (encoding == null)\n\t\t\tencoding = UTF8;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar i = pos;\n\t\tvar max = pos + len;\n\t\tswitch (encoding) {\n\t\t\tcase UTF8:\n\t\t\t\tvar debug = pos > 0;\n\t\t\t\t// utf8-decode and utf16-encode\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c = b[i++];\n\t\t\t\t\tif (c < 0x80) {\n\t\t\t\t\t\tif (c == 0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t\t} else if (c < 0xE0)\n\t\t\t\t\t\ts += String.fromCharCode(((c & 0x3F) << 6) | (b[i++] & 0x7F));\n\t\t\t\t\telse if (c < 0xF0) {\n\t\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\t\ts += String.fromCharCode(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\t\tvar c3 = b[i++];\n\t\t\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t\t\ts += String.fromCharCode(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase RawNative:\n\t\t\t\twhile (i < max) {\n\t\t\t\t\tvar c = b[i++] | (b[i++] << 8);\n\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString():String {\n\t\treturn getString(0, length);\n\t}\n\n\tpublic function toHex():String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor (i in 0...str.length)\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor (i in 0...length) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData():BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static inline function alloc(length:Int):Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString(s:String, ?encoding:Encoding):Bytes {\n\t\tif (encoding == RawNative) {\n\t\t\tvar buf = new js.lib.Uint8Array(s.length << 1);\n\t\t\tfor (i in 0...s.length) {\n\t\t\t\tvar c:Int = StringTools.fastCodeAt(s, i);\n\t\t\t\tbuf[i << 1] = c & 0xFF;\n\t\t\t\tbuf[(i << 1) | 1] = c >> 8;\n\t\t\t}\n\t\t\treturn new Bytes(buf.buffer);\n\t\t}\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile (i < s.length) {\n\t\t\tvar c:Int = StringTools.fastCodeAt(s, i++);\n\t\t\t// surrogate pair\n\t\t\tif (0xD800 <= c && c <= 0xDBFF)\n\t\t\t\tc = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s, i++) & 0x3FF);\n\t\t\tif (c <= 0x7F)\n\t\t\t\ta.push(c);\n\t\t\telse if (c <= 0x7FF) {\n\t\t\t\ta.push(0xC0 | (c >> 6));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t} else if (c <= 0xFFFF) {\n\t\t\t\ta.push(0xE0 | (c >> 12));\n\t\t\t\ta.push(0x80 | ((c >> 6) & 63));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t} else {\n\t\t\t\ta.push(0xF0 | (c >> 18));\n\t\t\t\ta.push(0x80 | ((c >> 12) & 63));\n\t\t\t\ta.push(0x80 | ((c >> 6) & 63));\n\t\t\t\ta.push(0x80 | (c & 63));\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData(b:BytesData):Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif (hb != null)\n\t\t\treturn hb;\n\t\treturn new Bytes(b);\n\t}\n\n\tpublic static function ofHex(s:String):Bytes {\n\t\tif ((s.length & 1) != 0)\n\t\t\tthrow \"Not a hex string (odd number of digits)\";\n\t\tvar a = new Array();\n\t\tvar i = 0;\n\t\tvar len = s.length >> 1;\n\t\twhile (i < len) {\n\t\t\tvar high = StringTools.fastCodeAt(s, i * 2);\n\t\t\tvar low = StringTools.fastCodeAt(s, i * 2 + 1);\n\t\t\thigh = (high & 0xF) + ((high & 0x40) >> 6) * 9;\n\t\t\tlow = (low & 0xF) + ((low & 0x40) >> 6) * 9;\n\t\t\ta.push(((high << 4) | low) & 0xFF);\n\t\t\ti++;\n\t\t}\n\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic inline static function fastGet(b:BytesData, pos:Int):Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.http;\n\nimport haxe.io.Bytes;\n\nprivate typedef StringKeyValue = {\n\tvar name:String;\n\tvar value:String;\n}\n\n/**\n\tThis class can be used to handle Http requests consistently across\n\tplatforms. There are two intended usages:\n\n\t- call `haxe.Http.requestUrl(url)` and receive the result as a `String`\n\t(only available on `sys` targets)\n\t- create a `new haxe.Http(url)`, register your callbacks for `onData`,\n\t`onError` and `onStatus`, then call `request()`.\n**/\nclass HttpBase {\n\t/**\n\t\tThe url of `this` request. It is used only by the `request()` method and\n\t\tcan be changed in order to send the same request to different target\n\t\tUrls.\n\t**/\n\tpublic var url:String;\n\n\tpublic var responseData(get,never):Null<String>;\n\tpublic var responseBytes(default,null):Null<Bytes>;\n\n\tvar responseAsString:Null<String>;\n\tvar postData:Null<String>;\n\tvar postBytes:Null<Bytes>;\n\tvar headers:Array<StringKeyValue>;\n\tvar params:Array<StringKeyValue>;\n\n\tfinal emptyOnData:(String)->Void;\n\n\t/**\n\t\tCreates a new Http instance with `url` as parameter.\n\n\t\tThis does not do a request until `request()` is called.\n\n\t\tIf `url` is null, the field url must be set to a value before making the\n\t\tcall to `request()`, or the result is unspecified.\n\n\t\t(Php) Https (SSL) connections are allowed only if the OpenSSL extension\n\t\tis enabled.\n\t**/\n\tpublic function new(url:String) {\n\t\tthis.url = url;\n\t\theaders = [];\n\t\tparams = [];\n\t\temptyOnData = onData;\n\t}\n\n\t/**\n\t\tSets the header identified as `name` to value `value`.\n\n\t\tIf `name` or `value` are null, the result is unspecified.\n\n\t\tThis method provides a fluent interface.\n\t**/\n\tpublic function setHeader(name:String, value:String) {\n\t\tfor (i in 0...headers.length) {\n\t\t\tif (headers[i].name == name) {\n\t\t\t\theaders[i] = {name: name, value: value};\n\t\t\t\treturn #if hx3compat this #end;\n\t\t\t}\n\t\t}\n\t\theaders.push({name: name, value: value});\n\t\t#if hx3compat\n\t\treturn this;\n\t\t#end\n\t}\n\n\tpublic function addHeader(header:String, value:String) {\n\t\theaders.push({name: header, value: value});\n\t\t#if hx3compat\n\t\treturn this;\n\t\t#end\n\t}\n\n\t/**\n\t\tSets the parameter identified as `name` to value `value`.\n\n\t\tIf `name` or `value` are null, the result is unspecified.\n\n\t\tThis method provides a fluent interface.\n\t**/\n\tpublic function setParameter(name:String, value:String) {\n\t\tfor (i in 0...params.length) {\n\t\t\tif (params[i].name == name) {\n\t\t\t\tparams[i] = {name: name, value: value};\n\t\t\t\treturn #if hx3compat this #end;\n\t\t\t}\n\t\t}\n\t\tparams.push({name: name, value: value});\n\t\t#if hx3compat\n\t\treturn this;\n\t\t#end\n\t}\n\n\tpublic function addParameter(name:String, value:String) {\n\t\tparams.push({name: name, value: value});\n\t\t#if hx3compat\n\t\treturn this;\n\t\t#end\n\t}\n\n\t/**\n\t\tSets the post data of `this` Http request to `data` string.\n\n\t\tThere can only be one post data per request. Subsequent calls to\n\t\tthis method or to `setPostBytes()` overwrite the previously set value.\n\n\t\tIf `data` is null, the post data is considered to be absent.\n\n\t\tThis method provides a fluent interface.\n\t**/\n\tpublic function setPostData(data:Null<String>) {\n\t\tpostData = data;\n\t\tpostBytes = null;\n\t\t#if hx3compat\n\t\treturn this;\n\t\t#end\n\t}\n\n\t/**\n\t\tSets the post data of `this` Http request to `data` bytes.\n\n\t\tThere can only be one post data per request. Subsequent calls to\n\t\tthis method or to `setPostData()` overwrite the previously set value.\n\n\t\tIf `data` is null, the post data is considered to be absent.\n\n\t\tThis method provides a fluent interface.\n\t**/\n\tpublic function setPostBytes(data:Null<Bytes>) {\n\t\tpostBytes = data;\n\t\tpostData = null;\n\t\t#if hx3compat\n\t\treturn this;\n\t\t#end\n\t}\n\n\t/**\n\t\tSends `this` Http request to the Url specified by `this.url`.\n\n\t\tIf `post` is true, the request is sent as POST request, otherwise it is\n\t\tsent as GET request.\n\n\t\tDepending on the outcome of the request, this method calls the\n\t\t`onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.\n\n\t\tIf `this.url` is null, the result is unspecified.\n\n\t\tIf `this.url` is an invalid or inaccessible Url, the `onError()` callback\n\t\tfunction is called.\n\n\t\t[js] If `this.async` is false, the callback functions are called before\n\t\tthis method returns.\n\t**/\n\tpublic function request(?post:Bool):Void {\n\t\tthrow new haxe.exceptions.NotImplementedException();\n\t}\n\n\t/**\n\t\tThis method is called upon a successful request, with `data` containing\n\t\tthe result String.\n\n\t\tThe intended usage is to bind it to a custom function:\n\t\t`httpInstance.onData = function(data) { // handle result }`\n\t**/\n\tpublic dynamic function onData(data:String) {}\n\n\t/**\n\t\tThis method is called upon a successful request, with `data` containing\n\t\tthe result String.\n\n\t\tThe intended usage is to bind it to a custom function:\n\t\t`httpInstance.onBytes = function(data) { // handle result }`\n\t**/\n\tpublic dynamic function onBytes(data:Bytes) {}\n\n\t/**\n\t\tThis method is called upon a request error, with `msg` containing the\n\t\terror description.\n\n\t\tThe intended usage is to bind it to a custom function:\n\t\t`httpInstance.onError = function(msg) { // handle error }`\n\t**/\n\tpublic dynamic function onError(msg:String) {}\n\n\t/**\n\t\tThis method is called upon a Http status change, with `status` being the\n\t\tnew status.\n\n\t\tThe intended usage is to bind it to a custom function:\n\t\t`httpInstance.onStatus = function(status) { // handle status }`\n\t**/\n\tpublic dynamic function onStatus(status:Int) {}\n\n\t/**\n\t\tOverride this if extending `haxe.Http` with overriding `onData`\n\t**/\n\tfunction hasOnData():Bool {\n\t\treturn !Reflect.compareMethods(onData, emptyOnData);\n\t}\n\n\tfunction success(data:Bytes) {\n\t\tresponseBytes = data;\n\t\tresponseAsString = null;\n\t\tif (hasOnData()) {\n\t\t\tonData(responseData);\n\t\t}\n\t\tonBytes(responseBytes);\n\t}\n\n\tfunction get_responseData() {\n\t\tif (responseAsString == null && responseBytes != null) {\n\t\t\t#if neko\n\t\t\tresponseAsString = neko.Lib.stringReference(responseBytes);\n\t\t\t#else\n\t\t\tresponseAsString = responseBytes.getString(0, responseBytes.length, UTF8);\n\t\t\t#end\n\t\t}\n\t\treturn responseAsString;\n\t}\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : undefined');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a)) js.Syntax.code('a.iterator()') else\n      untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.buffer;\r\n\r\nimport haxe.io.Bytes;\r\nimport haxe.io.UInt8Array;\r\n#if haxe4\r\nimport js.lib.ArrayBuffer;\r\nimport js.lib.ArrayBufferView;\r\nimport js.lib.Object;\r\nimport js.lib.Uint8Array;\r\n#else\r\nimport js.html.ArrayBuffer;\r\nimport js.html.ArrayBufferView;\r\nimport js.html.Uint8Array;\r\n#end\r\n\r\n/**\r\n\tThe `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.\r\n\r\n\t@see https://nodejs.org/api/buffer.html#buffer_class_buffer\r\n**/\r\n@:jsRequire(\"buffer\", \"Buffer\")\r\nextern class Buffer extends Uint8Array {\r\n\t/**\r\n\t\tAllocates a new buffer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding\r\n\t**/\r\n\t@:deprecated\r\n\t@:overload(function(array:Array<Int>):Void {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Void {})\r\n\t@:overload(function(buffer:UInt8Array):Void {})\r\n\t@:overload(function(size:Int):Void {})\r\n\tfunction new(string:String, ?encoding:String):Void;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\r\n\t**/\r\n\t@:overload(function(size:Int, fill:String, ?encoding:String):Buffer {})\r\n\t@:overload(function(size:Int, fill:Uint8Array):Buffer {})\r\n\t@:overload(function(size:Int, fill:Int):Buffer {})\r\n\tstatic function alloc(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\r\n\t**/\r\n\tstatic function allocUnsafe(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size\r\n\t**/\r\n\tstatic function allocUnsafeSlow(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tReturns the actual byte length of a string. This is not the same as\r\n\t\t`String.prototype.length` since that returns the number of characters in\r\n\t\ta string.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding\r\n\t**/\r\n\t#if (haxe_ver >= 3.3)\r\n\t// it need extern SharedArrayBuffer for Node\r\n\t// @:overload(function(string:SharedArrayBuffer):Int {})\r\n\t@:overload(function(string:String, ?encoding:String):Int {})\r\n\t@:overload(function(string:ArrayBufferView):Int {})\r\n\t@:overload(function(string:ArrayBuffer):Int {})\r\n\tstatic function byteLength(string:Buffer):Int;\r\n\t#end\r\n\r\n\t#if (haxe_ver >= 3.3)\r\n\t@:deprecated(\"In haxe 3.3+, use Buffer.byteLength instead!\")\r\n\t#end\r\n\tinline static function _byteLength(string:String, ?encoding:String):Int\r\n\t\treturn untyped Buffer['byteLength'](string, encoding);\r\n\r\n\t/**\r\n\t\tCompares `buf1` to `buf2` typically for the purpose of sorting arrays of\r\n\t\t`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2\r\n\t**/\r\n\t@:native(\"compare\")\r\n\tstatic function compareBuffers(buf1:Uint8Array, buf2:Uint8Array):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength\r\n\t**/\r\n\tstatic function concat<T:Uint8Array>(list:Array<T>, ?totalLength:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding\r\n\t**/\r\n\t// it need extern SharedArrayBuffer for node\r\n\t// @:overload(function(arrayBuffer:SharedArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(array:Array<Int>):Buffer {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(buffer:Uint8Array):Buffer {})\r\n\t@:overload(function(object:{}, ?offset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(object:{}, ?encoding:String, ?length:Int):Buffer {})\r\n\tstatic function from(string:String, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tReturns `true` if `obj` is a `Buffer`, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj\r\n\t**/\r\n\tstatic function isBuffer(obj:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns `true` if `encoding` contains a supported character encoding, or `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding\r\n\t**/\r\n\tstatic function isEncoding(encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tThis is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize\r\n\t**/\r\n\tstatic var poolSize:Int;\r\n\r\n\t// buf[index]\r\n\t// var buffer:ArrayBuffer;\r\n\r\n\t/**\r\n\t\tWhen setting `byteOffset` in `Buffer.from(ArrayBuffer, byteOffset, length)`\r\n\t\tor sometimes when allocating a buffer smaller than `Buffer.poolSize` the\r\n\t\tbuffer doesn't start from a zero offset on the underlying `ArrayBuffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_byteoffset\r\n\t**/\r\n\tstatic var byteOffset(default, null):Int;\r\n\r\n\t/**\r\n\t\tCompares `buf` with `target` and returns a number indicating whether `buf` comes before, after,\r\n\t\tor is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Int {})\r\n\tfunction compare(target:Uint8Array, ?targetStart:Int, ?targetEnd:Int, ?sourceStart:Int, ?sourceEnd:Int):Int;\r\n\r\n\t/**\r\n\t\tCopies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Void {})\r\n\tfunction copy(target:Uint8Array, ?targetStart:Int, ?sourceStart:Int, ?sourceEnd:Int):Void;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `[index, byte]` pairs from the contents of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_entries\r\n\t**/\r\n\tfunction entries():js.node.Iterator<js.node.KeyValue<Int, Int>>;\r\n\r\n\t/**\r\n\t\tReturns `true` if both `buf` and `otherBuffer` have exactly the same bytes, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer\r\n\t**/\r\n\tfunction equals(otherBuffer:Uint8Array):Bool;\r\n\r\n\t/**\r\n\t\tFills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?offset:Int, ?end:Int):Buffer {})\r\n\t@:overload(function(value:Int, ?offset:Int, ?end:Int):Buffer {})\r\n\tfunction fill(value:String, ?offset:Int, ?end:Int, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tEquivalent to `buf.indexOf() !== -1`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Bool {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Bool {})\r\n\tfunction includes(value:String, ?byteOffset:Int, ?encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tIf `value` is:\r\n\r\n\t\t- a string, `value` is interpreted according to the character encoding in `encoding`.\r\n\t\t- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().\r\n\t\t- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction indexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `buf` keys (indices).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_keys\r\n\t**/\r\n\tfunction keys():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tIdentical to `buf.indexOf()`, except the last occurrence of `value` is found\r\n\t\trather than the first occurrence.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction lastIndexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t// var length(default, null):Int;\r\n\t// these functions need BigInt implementation.\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64be_offset\r\n\t// **/\r\n\t// function readBigInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64le_offset\r\n\t// **/\r\n\t// function readBigInt64LE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64be_offset\r\n\t// **/\r\n\t// function readBigUInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64le_offset\r\n\t// **/\r\n\t// function readBigUInt64LE(?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset\r\n\t**/\r\n\tfunction readDoubleBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset\r\n\t**/\r\n\tfunction readDoubleLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset\r\n\t**/\r\n\tfunction readFloatBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset\r\n\t**/\r\n\tfunction readFloatLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a signed 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\thttps://nodejs.org/api/buffer.html#buffer_buf_readint8_offset\r\n\t**/\r\n\tfunction readInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset\r\n\t**/\r\n\tfunction readInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset\r\n\t**/\r\n\tfunction readInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength\r\n\t**/\r\n\tfunction readIntBE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength\r\n\t**/\r\n\tfunction readIntLE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset\r\n\t**/\r\n\tfunction readUInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset\r\n\t**/\r\n\tfunction readUInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset\r\n\t**/\r\n\tfunction readUInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_subarray_start_end\r\n\t**/\r\n\t#if haxe4\r\n\tfunction subarray(?start:Int, ?end:Int):Buffer;\r\n\t#else\r\n\toverride function subarray(start:Int, ?end:Int):Buffer;\r\n\t#end\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end\r\n\t**/\r\n\tfunction slice(?start:Int, ?end:Int):Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 16-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 2.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap16\r\n\t**/\r\n\tfunction swap16():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 32-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 4.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap32\r\n\t**/\r\n\tfunction swap32():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of 64-bit numbers and swaps byte order in-place.\r\n\t\tThrows `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap64\r\n\t**/\r\n\tfunction swap64():Buffer;\r\n\r\n\t/**\r\n\t\tReturns a JSON representation of `buf`. `JSON.stringify()` implicitly calls\r\n\t\tthis function when stringifying a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tojson\r\n\t**/\r\n\tfunction toJSON():Dynamic;\r\n\r\n\t/**\r\n\t\tDecodes `buf` to a string according to the specified character encoding in `encoding`.\r\n\t\t`start` and `end` may be passed to decode only a subset of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end\r\n\t**/\r\n\t@:overload(function(?encoding:String, ?start:Int, ?end:Int):String {})\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator for `buf` values (bytes). This function is called automatically\r\n\t\twhen a `Buffer` is used in a `for..of` statement.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_values\r\n\t**/\r\n\tfunction values():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tWrites `string` to `buf` at `offset` according to the character encoding in `encoding`.\r\n\t\tThe `length` parameter is the number of bytes to write.\r\n\t\tIf `buf` did not contain enough space to fit the entire `string`, only part of string will be written.\r\n\t\tHowever, partially encoded characters will not be written.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding\r\n\t**/\r\n\tfunction write(string:String, ?offset:Int, ?length:Int, ?encoding:String):Int;\r\n\r\n\t// these functions need BigInt Implementation.\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64be_value_offset\r\n\t// **/\r\n\t// function writeBigInt64BE(value:Int, ?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64le_value_offset\r\n\t// **/\r\n\t// function writeBigInt64LE(value:Int, ?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset\r\n\t**/\r\n\tfunction writeDoubleBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset\r\n\t**/\r\n\tfunction writeDoubleLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset\r\n\t**/\r\n\tfunction writeFloatBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset\r\n\t**/\r\n\tfunction writeFloatLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid signed 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset\r\n\t**/\r\n\tfunction writeInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset\r\n\t**/\r\n\tfunction writeInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset\r\n\t**/\r\n\tfunction writeInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset\r\n\t**/\r\n\tfunction writeInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset\r\n\t**/\r\n\tfunction writeInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntBE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntLE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid unsigned 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset\r\n\t**/\r\n\tfunction writeUInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset\r\n\t**/\r\n\tfunction writeUInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset\r\n\t**/\r\n\tfunction writeUInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset\r\n\t**/\r\n\tfunction writeUInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset\r\n\t**/\r\n\tfunction writeUInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tDefault: `50`\r\n\r\n\t\tReturns the maximum number of bytes that will be returned when `buf.inspect()` is called.\r\n\t\tThis can be overridden by user modules.\r\n\t\tSee `util.inspect()` for more details on `buf.inspect()` behavior.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes\r\n\t**/\r\n\tstatic var INSPECT_MAX_BYTES(get, set):Int;\r\n\r\n\tprivate static inline function get_INSPECT_MAX_BYTES():Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES;\r\n\t}\r\n\tprivate static inline function set_INSPECT_MAX_BYTES(bytes:Int):Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES = bytes;\r\n\t}\r\n\r\n\t/**\r\n\t\tAn alias for `buffer.constants.MAX_LENGTH`.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength\r\n\t**/\r\n\tstatic var kMaxLength(get, never):Int;\r\n\r\n\tprivate static inline function get_kMaxLength():Int {\r\n\t\treturn BufferModule.kMaxLength;\r\n\t}\r\n\r\n\t/**\r\n\t\tRe-encodes the given `Buffer` or `Uint8Array` instance from one character encoding to another.\r\n\t\tReturns a new `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_transcode_source_fromenc_toenc\r\n\t**/\r\n\tstatic inline function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer {\r\n\t\treturn BufferModule.transcode(source, fromEnc, toEnc);\r\n\t};\r\n\r\n\t/**\r\n\t\t`buffer.constants` is a property on the `buffer` module returned by `require('buffer')`,\r\n\t\tnot on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants\r\n\t**/\r\n\tstatic var constants(default, never):BufferConstants;\r\n\r\n\tprivate static inline function get_constants():BufferConstants {\r\n\t\treturn BufferModule.constants;\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.\r\n\t\tAny modifications done using the returned object will be reflected in the `this` buffer.\r\n\t**/\r\n\tinline function hxToBytes():Bytes {\r\n\t\treturn Helper.bytesOfBuffer(this);\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.\r\n\t\tAny modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.\r\n\t**/\r\n\tstatic inline function hxFromBytes(b:Bytes):Buffer {\r\n\t\tvar data = @:privateAccess b.b;\r\n\t\treturn Buffer.from(data.buffer, data.byteOffset, b.length);\r\n\t}\r\n}\r\n\r\n@:dce\r\nprivate class Helper {\r\n\tpublic static function bytesOfBuffer(b:Buffer):haxe.io.Bytes untyped {\r\n\t\tvar o = Object.create(haxe.io.Bytes.prototype);\r\n\t\t// the following is basically a haxe.io.Bytes constructor,\r\n\t\t// but using given buffer instead of creating new Uint8Array\r\n\t\to.length = b.byteLength;\r\n\t\to.b = b;\r\n\t\tb.bufferValue = b;\r\n\t\tb.hxBytes = o;\r\n\t\tb.bytes = b;\r\n\t\treturn o;\r\n\t}\r\n}\r\n\r\n@:jsRequire(\"buffer\")\r\nprivate extern class BufferModule {\r\n\tstatic var INSPECT_MAX_BYTES:Int;\r\n\tstatic var kMaxLength(default, never):Int;\r\n\tstatic function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer;\r\n\tstatic var constants(default, never):BufferConstants;\r\n}\r\n\r\ntypedef BufferConstants = {\r\n\t/**\r\n\t\tOn 32-bit architectures, this value is `(2^30)-1` (`~1GB`).\r\n\t\tOn 64-bit architectures, this value is `(2^31)-1` (`~2GB`).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length\r\n\t**/\r\n\tvar MAX_LENGTH(default, never):Int;\r\n\r\n\t/**\r\n\t\tRepresents the largest `length` that a `string` primitive can have, counted\r\n\t\tin UTF-16 code units.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_string_length\r\n\t**/\r\n\tvar MAX_STRING_LENGTH(default, never):Int;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport js.Boot;\nimport js.Syntax;\n\n@:keepInit\n@:coreApi class Std {\n\t@:deprecated('Std.is is deprecated. Use Std.isOfType instead.')\n\tpublic static inline function is(v:Dynamic, t:Dynamic):Bool {\n\t\treturn isOfType(v, t);\n\t}\n\n\tpublic static inline function isOfType(v:Dynamic, t:Dynamic):Bool {\n\t\treturn @:privateAccess js.Boot.__instanceof(v, t);\n\t}\n\n\tpublic static inline function downcast<T:{}, S:T>(value:T, c:Class<S>):S@:privateAccess {\n\t\treturn if (js.Boot.__downcastCheck(value, c)) cast value else null;\n\t}\n\n\t@:deprecated('Std.instance() is deprecated. Use Std.downcast() instead.')\n\tpublic static inline function instance<T:{}, S:T>(value:T, c:Class<S>):S {\n\t\treturn downcast(value, c);\n\t}\n\n\t@:pure\n\tpublic static function string(s:Dynamic):String {\n\t\treturn @:privateAccess js.Boot.__string_rec(s, \"\");\n\t}\n\n\tpublic static inline function int(x:Float):Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\t@:pure\n\tpublic static function parseInt(x:String):Null<Int> {\n\t\tif(x != null) {\n\t\t\tfor(i in 0...x.length) {\n\t\t\t\tvar c = StringTools.fastCodeAt(x, i);\n\t\t\t\tif(c <= 8 || (c >= 14 && c != ' '.code && c != '-'.code)) {\n\t\t\t\t\tvar nc = StringTools.fastCodeAt(x, i + 1);\n\t\t\t\t\tvar v = js.Lib.parseInt(x, (nc == \"x\".code || nc == \"X\".code) ? 16 : 10);\n\t\t\t\t\treturn Math.isNaN(v) ? null : cast v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static inline function parseFloat(x:String):Float {\n\t\treturn js.Syntax.code(\"parseFloat({0})\", x);\n\t}\n\n\tpublic static function random(x:Int):Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random() * x);\n\t}\n\n\tstatic function __init__():Void\n\t\tuntyped {\n\t\t\t__feature__(\"js.Boot.getClass\", String.prototype.__class__ = __feature__(\"Type.resolveClass\", $hxClasses[\"String\"] = String, String));\n\t\t\t__feature__(\"js.Boot.isClass\", String.__name__ = __feature__(\"Type.getClassName\", \"String\", true));\n\t\t\t__feature__(\"Type.resolveClass\", $hxClasses[\"Array\"] = Array);\n\t\t\t__feature__(\"js.Boot.isClass\", Array.__name__ = __feature__(\"Type.getClassName\", \"Array\", true));\n\t\t\t__feature__(\"Date.*\", {\n\t\t\t\t__feature__(\"js.Boot.getClass\",\n\t\t\t\t\tjs.Syntax.code('Date').prototype.__class__ = __feature__(\"Type.resolveClass\", $hxClasses[\"Date\"] = js.Syntax.code('Date'), js.Syntax.code('Date')));\n\t\t\t\t__feature__(\"js.Boot.isClass\", js.Syntax.code('Date').__name__ = \"Date\");\n\t\t\t});\n\t\t\t__feature__(\"Int.*\", js.Syntax.code('var Int = { };'));\n\t\t\t__feature__(\"Dynamic.*\", js.Syntax.code('var Dynamic = { };'));\n\t\t\t__feature__(\"Float.*\", js.Syntax.code('var Float = Number'));\n\t\t\t__feature__(\"Bool.*\", js.Syntax.code('var Bool = Boolean'));\n\t\t\t__feature__(\"Class.*\", js.Syntax.code('var Class = { };'));\n\t\t\t__feature__(\"Enum.*\", js.Syntax.code('var Enum = { };'));\n\t\t\t#if (js_es < 5)\n\t\t\t__feature__(\"Array.map\", if (Array.prototype.map == null) Array.prototype.map = function(f) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (i in 0...__this__.length)\n\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\treturn a;\n\t\t\t});\n\t\t\t__feature__(\"Array.filter\", if (Array.prototype.filter == null) Array.prototype.filter = function(f) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (i in 0...__this__.length) {\n\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\tif (f(e))\n\t\t\t\t\t\ta.push(e);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t});\n\t\t\t#end\n\t\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\t@:pure\n\tpublic inline static function hasField(o:Dynamic, field:String):Bool {\n\t\treturn js.lib.Object.prototype.hasOwnProperty.call(o, field);\n\t}\n\n\t@:pure\n\tpublic static function field(o:Dynamic, field:String):Dynamic {\n\t\ttry\n\t\t\treturn o[cast field]\n\t\tcatch (e:Dynamic)\n\t\t\treturn null;\n\t}\n\n\tpublic inline static function setField(o:Dynamic, field:String, value:Dynamic):Void {\n\t\to[cast field] = value;\n\t}\n\n\tpublic static function getProperty(o:Dynamic, field:String):Dynamic\n\t\tuntyped {\n\t\t\tvar tmp;\n\t\t\treturn if (o == null) __define_feature__(\"Reflect.getProperty\",\n\t\t\t\tnull) else if (o.__properties__ && (tmp = o.__properties__[\"get_\" + field])) o[tmp]() else o[field];\n\t\t}\n\n\tpublic static function setProperty(o:Dynamic, field:String, value:Dynamic):Void\n\t\tuntyped {\n\t\t\tvar tmp;\n\t\t\tif (o.__properties__ && (tmp = o.__properties__[\"set_\" + field]))\n\t\t\t\to[tmp](value)\n\t\t\telse\n\t\t\t\to[field] = __define_feature__(\"Reflect.setProperty\", value);\n\t\t}\n\n\tpublic inline static function callMethod(o:Dynamic, func:haxe.Constraints.Function, args:Array<Dynamic>):Dynamic {\n\t\treturn (cast func : js.lib.Function).apply(o, args);\n\t}\n\n\tpublic static function fields(o:Dynamic):Array<String> {\n\t\tvar a = [];\n\t\tif (o != null)\n\t\t\tuntyped {\n\t\t\t\tvar hasOwnProperty = js.lib.Object.prototype.hasOwnProperty;\n\t\t\t\tjs.Syntax.code(\"for( var f in o ) {\");\n\t\t\t\tif (f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f))\n\t\t\t\t\ta.push(f);\n\t\t\t\tjs.Syntax.code(\"}\");\n\t\t\t}\n\t\treturn a;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isFunction(f:Dynamic):Bool {\n\t\treturn js.Syntax.typeof(f) == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>(a:T, b:T):Int {\n\t\treturn (a == b) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods(f1:Dynamic, f2:Dynamic):Bool {\n\t\tif (f1 == f2)\n\t\t\treturn true;\n\t\tif (!isFunction(f1) || !isFunction(f2))\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isObject(v:Dynamic):Bool {\n\t\tif (v == null)\n\t\t\treturn false;\n\t\tvar t = js.Syntax.typeof(v);\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null))\n\t\t\t|| (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue(v:Dynamic):Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField(o:Dynamic, field:String):Bool {\n\t\tif (!hasField(o, field))\n\t\t\treturn false;\n\t\tjs.Syntax.delete(o, field);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>(o:Null<T>):Null<T> {\n\t\tif (o == null)\n\t\t\treturn null;\n\t\tvar o2:Dynamic = {};\n\t\tfor (f in Reflect.fields(o))\n\t\t\tReflect.setField(o2, f, Reflect.field(o, f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function(f:Array<Dynamic>->Void):Dynamic {})\n\tpublic static function makeVarArgs(f:Array<Dynamic>->Dynamic):Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(js.Syntax.code(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.http;\n\n#if nodejs\nimport js.node.Buffer;\nimport haxe.io.Bytes;\n\nclass HttpNodeJs extends haxe.http.HttpBase {\n\tvar req:js.node.http.ClientRequest;\n\n\tpublic function new(url:String) {\n\t\tsuper(url);\n\t}\n\n\t/**\n\t\tCancels `this` Http request if `request` has been called and a response\n\t\thas not yet been received.\n\t**/\n\tpublic function cancel() {\n\t\tif (req == null)\n\t\t\treturn;\n\t\treq.abort();\n\t\treq = null;\n\t}\n\n\tpublic override function request(?post:Bool) {\n\t\tresponseAsString = null;\n\t\tresponseBytes = null;\n\t\tvar parsedUrl = new js.node.url.URL(url);\n\t\tvar secure = (parsedUrl.protocol == \"https:\");\n\t\tvar host = parsedUrl.hostname;\n\t\tvar path = parsedUrl.pathname;\n\t\tvar port = if (parsedUrl.port != null) Std.parseInt(parsedUrl.port) else (secure ? 443 : 80);\n\t\tvar h:Dynamic = {};\n\t\tfor (i in headers) {\n\t\t\tvar arr = Reflect.field(h, i.name);\n\t\t\tif (arr == null) {\n\t\t\t\tarr = new Array<String>();\n\t\t\t\tReflect.setField(h, i.name, arr);\n\t\t\t}\n\n\t\t\tarr.push(i.value);\n\t\t}\n\t\tif (postData != null || postBytes != null)\n\t\t\tpost = true;\n\t\tvar uri = null;\n\t\tfor (p in params) {\n\t\t\tif (uri == null)\n\t\t\t\turi = \"\";\n\t\t\telse\n\t\t\t\turi += \"&\";\n\t\t\turi += StringTools.urlEncode(p.name) + \"=\" + StringTools.urlEncode(p.value);\n\t\t}\n\t\tvar question = path.split(\"?\").length <= 1;\n\t\tif (uri != null)\n\t\t\tpath += (if (question) \"?\" else \"&\") + uri;\n\n\t\tvar opts = {\n\t\t\tprotocol: parsedUrl.protocol,\n\t\t\thostname: host,\n\t\t\tport: port,\n\t\t\tmethod: post ? 'POST' : 'GET',\n\t\t\tpath: path,\n\t\t\theaders: h\n\t\t};\n\t\tfunction httpResponse(res) {\n\t\t\tres.setEncoding('binary');\n\t\t\tvar s = res.statusCode;\n\t\t\tif (s != null)\n\t\t\t\tonStatus(s);\n\t\t\tvar data = [];\n\t\t\tres.on('data', function(chunk:String) {\n\t\t\t\tdata.push(Buffer.from(chunk, 'binary'));\n\t\t\t});\n\t\t\tres.on('end', function(_) {\n\t\t\t\tvar buf = (data.length == 1 ? data[0] : Buffer.concat(data));\n\t\t\t\tresponseBytes = Bytes.ofData(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength));\n\t\t\t\treq = null;\n\t\t\t\tif (s != null && s >= 200 && s < 400) {\n\t\t\t\t\tsuccess(responseBytes);\n\t\t\t\t} else {\n\t\t\t\t\tonError(\"Http Error #\" + s);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treq = secure ? js.node.Https.request(untyped opts, httpResponse) : js.node.Http.request(untyped opts, httpResponse);\n\t\tif (post)\n\t\t\tif (postData != null) {\n\t\t\t\treq.write(postData);\n\t\t\t} else if(postBytes != null) {\n\t\t\t\treq.setHeader(\"Content-Length\", '${postBytes.length}');\n\t\t\t\treq.write(Buffer.from(postBytes.getData()));\n\t\t\t}\n\n\t\treq.end();\n\t}\n}\n#end\n"]}