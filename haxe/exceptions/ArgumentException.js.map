{"sourceRoot":"","names":[],"mappings":"QAKA;QCAA;;;;;;;ACAA;AAAA;CAMgG,uCAC9F;EAAA,UAAM,YAAW,QAAQ,wBAAmB,WAAQ,OAAK,SAAS,UAAU,KAC5E;EAAA,gBAAgB,SAF8E;EAAA","version":3,"file":"ArgumentException.js.map","sources":["../../../../../../../haxe/versions/4.2.3/std/haxe/exceptions/PosException.hx","../../../../../../../haxe/haxe_libraries/genes/0.4.1/github/179cb495c2d785321879e8afe765aa04d639783d/src/genes/Register.hx","../../../../../../../haxe/versions/4.2.3/std/haxe/exceptions/ArgumentException.hx"],"sourcesContent":["package haxe.exceptions;\n\n/**\n\tAn exception that carry position information of a place where it was created.\n**/\nclass PosException extends Exception {\n\t/**\n\t\tPosition where this exception was created.\n\t**/\n\tpublic final posInfos:PosInfos;\n\n\tpublic function new(message:String, ?previous:Exception, ?pos:PosInfos):Void {\n\t\tsuper(message, previous);\n\t\tif (pos == null) {\n\t\t\tposInfos = { fileName:'(unknown)', lineNumber:0, className:'(unknown)', methodName:'(unknown)' }\n\t\t} else {\n\t\t\tposInfos = pos;\n\t\t}\n\t}\n\n\t/**\n\t\tReturns exception message.\n\t**/\n\toverride function toString():String {\n\t\treturn '${super.toString()} in ${posInfos.className}.${posInfos.methodName} at ${posInfos.fileName}:${posInfos.lineNumber}';\n\t}\n}","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : undefined');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a)) js.Syntax.code('a.iterator()') else\n      untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","package haxe.exceptions;\n\n/**\n\tAn exception that is thrown when an invalid value provided for an argument of a function.\n**/\nclass ArgumentException extends PosException {\n\t/**\n\t\tAn argument name.\n\t**/\n\tpublic final argument:String;\n\n\tpublic function new(argument:String, ?message:String, ?previous:Exception, ?pos:PosInfos):Void {\n\t\tsuper(message == null ? 'Invalid argument \"$argument\"' : message, previous, pos);\n\t\tthis.argument = argument;\n\t}\n}"]}