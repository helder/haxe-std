{"sourceRoot":"","names":[],"mappings":";AAoIA","version":3,"file":"UInt.d.ts.map","sources":["../../../../../haxe/versions/4.1.5/std/UInt.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n#if ((flash || flash9doc || cs || hl) && !doc_gen)\n/**\n\tThe unsigned `Int` type is only defined for Flash and C#. It's currently\n\thandled the same as a normal Int.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n**/\n@:coreType\n@:notNull\n@:runtimeValue\n@:analyzer(no_const_propagation)\nabstract UInt to Int from Int {\n\t@:commutative @:op(A + B) private static function addI(lhs:UInt, rhs:Int):UInt;\n\n\t@:commutative @:op(A + B) private static function addF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A + B) private static function add(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A * B) private static function mulI(lhs:UInt, rhs:Int):UInt;\n\n\t@:commutative @:op(A * B) private static function mulF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A * B) private static function mul(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A % B) private static function modI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A % B) private static function modF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A % B) private static function mod(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A - B) private static function subI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A - B) private static function subF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A - B) private static function sub(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A / B) private static function divI(lhs:UInt, rhs:Int):Float;\n\n\t@:op(A / B) private static function divF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A / B) private static function div(lhs:UInt, rhs:UInt):Float;\n\n\t@:commutative @:op(A | B) private static function orI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A | B) private static function or(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A ^ B) private static function xorI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A ^ B) private static function xor(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A & B) private static function andI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A & B) private static function and(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A << B) private static function shl(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A >> B) private static inline function shr(lhs:UInt, rhs:Int):UInt\n\t\treturn lhs >>> rhs;\n\n\t@:op(A >>> B) private static function ushr(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A > B) private static function gt(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A >= B) private static function gte(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A < B) private static function lt(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A <= B) private static function lte(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A > B) private static function gtf(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A > B) private static function gtf2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(A >= B) private static function gtef(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A >= B) private static function gtef2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(A < B) private static function ltf(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A < B) private static function ltf2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(A <= B) private static function ltef(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A <= B) private static function ltef2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(~A) private static function bneg(t:UInt):UInt;\n\n\t@:commutative @:op(A == B) private static function equalsInt<T:Int>(a:UInt, b:T):Bool;\n\n\t@:commutative @:op(A != B) private static function notEqualsInt<T:Int>(a:UInt, b:T):Bool;\n\n\t@:commutative @:op(A == B) private static function equalsFloat<T:Float>(a:UInt, b:T):Bool;\n\n\t@:commutative @:op(A != B) private static function notEqualsFloat<T:Float>(a:UInt, b:T):Bool;\n\n\t@:op(++A) private function prefixIncrement():UInt;\n\n\t@:op(A++) private function postfixIncrement():UInt;\n\n\t@:op(--A) private function prefixDecrement():UInt;\n\n\t@:op(A--) private function postfixDecrement():UInt;\n}\n#else\n\n/**\n\tThe unsigned `Int` type is only defined for Flash and C#.\n\tSimulate it for other platforms.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n**/\nabstract UInt(Int) from Int to Int {\n\t@:op(A + B) private static inline function add(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() + b.toInt();\n\t}\n\n\t@:op(A / B) private static inline function div(a:UInt, b:UInt):Float {\n\t\treturn a.toFloat() / b.toFloat();\n\t}\n\n\t@:op(A * B) private static inline function mul(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() * b.toInt();\n\t}\n\n\t@:op(A - B) private static inline function sub(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() - b.toInt();\n\t}\n\n\t@:op(A > B)\n\tprivate static #if !js inline #end function gt(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn if (aNeg != bNeg) aNeg; else a.toInt() > b.toInt();\n\t}\n\n\t@:op(A >= B)\n\tprivate static #if !js inline #end function gte(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn if (aNeg != bNeg) aNeg; else a.toInt() >= b.toInt();\n\t}\n\n\t@:op(A < B) private static inline function lt(a:UInt, b:UInt):Bool {\n\t\treturn gt(b, a);\n\t}\n\n\t@:op(A <= B) private static inline function lte(a:UInt, b:UInt):Bool {\n\t\treturn gte(b, a);\n\t}\n\n\t@:op(A & B) private static inline function and(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() & b.toInt();\n\t}\n\n\t@:op(A | B) private static inline function or(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() | b.toInt();\n\t}\n\n\t@:op(A ^ B) private static inline function xor(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() ^ b.toInt();\n\t}\n\n\t@:op(A << B) private static inline function shl(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() << b;\n\t}\n\n\t@:op(A >> B) private static inline function shr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A >>> B) private static inline function ushr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A % B) private static inline function mod(a:UInt, b:UInt):UInt {\n\t\treturn Std.int(a.toFloat() % b.toFloat());\n\t}\n\n\t@:commutative @:op(A + B) private static inline function addWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() + b;\n\t}\n\n\t@:commutative @:op(A * B) private static inline function mulWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() * b;\n\t}\n\n\t@:op(A / B) private static inline function divFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() / b;\n\t}\n\n\t@:op(A / B) private static inline function floatDiv(a:Float, b:UInt):Float {\n\t\treturn a / b.toFloat();\n\t}\n\n\t@:op(A - B) private static inline function subFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() - b;\n\t}\n\n\t@:op(A - B) private static inline function floatSub(a:Float, b:UInt):Float {\n\t\treturn a - b.toFloat();\n\t}\n\n\t@:op(A > B) private static inline function gtFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() > b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() != b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsFloat<T:Float>(a:UInt, b:T):Bool {\n\t\treturn a.toFloat() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsFloat<T:Float>(a:UInt, b:T):Bool {\n\t\treturn a.toFloat() != b;\n\t}\n\n\t@:op(A >= B) private static inline function gteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() >= b;\n\t}\n\n\t@:op(A > B) private static inline function floatGt(a:Float, b:UInt):Bool {\n\t\treturn a > b.toFloat();\n\t}\n\n\t@:op(A >= B) private static inline function floatGte(a:Float, b:UInt):Bool {\n\t\treturn a >= b.toFloat();\n\t}\n\n\t@:op(A < B) private static inline function ltFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() < b;\n\t}\n\n\t@:op(A <= B) private static inline function lteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() <= b;\n\t}\n\n\t@:op(A < B) private static inline function floatLt(a:Float, b:UInt):Bool {\n\t\treturn a < b.toFloat();\n\t}\n\n\t@:op(A <= B) private static inline function floatLte(a:Float, b:UInt):Bool {\n\t\treturn a <= b.toFloat();\n\t}\n\n\t@:op(A % B) private static inline function modFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() % b;\n\t}\n\n\t@:op(A % B) private static inline function floatMod(a:Float, b:UInt):Float {\n\t\treturn a % b.toFloat();\n\t}\n\n\t@:op(~A) private inline function negBits():UInt {\n\t\treturn ~this;\n\t}\n\n\t@:op(++A) private inline function prefixIncrement():UInt {\n\t\treturn ++this;\n\t}\n\n\t@:op(A++) private inline function postfixIncrement():UInt {\n\t\treturn this++;\n\t}\n\n\t@:op(--A) private inline function prefixDecrement():UInt {\n\t\treturn --this;\n\t}\n\n\t@:op(A--) private inline function postfixDecrement():UInt {\n\t\treturn this--;\n\t}\n\n\t// TODO: radix is just defined to deal with doc_gen issues\n\tprivate inline function toString(?radix:Int):String {\n\t\treturn Std.string(toFloat());\n\t}\n\n\tprivate inline function toInt():Int {\n\t\treturn this;\n\t}\n\n\t@:to private #if (!js || analyzer) inline #end function toFloat():Float {\n\t\tvar int = toInt();\n\t\tif (int < 0) {\n\t\t\treturn 4294967296.0 + int;\n\t\t} else {\n\t\t\t// + 0.0 here to make sure we promote to Float on some platforms\n\t\t\t// In particular, PHP was having issues when comparing to Int in the == op.\n\t\t\treturn int + 0.0;\n\t\t}\n\t}\n}\n#end\n"]}