{"sourceRoot":"","names":[],"mappings":"AAKA;;CAGS,oBACU;uBAAQ,OAAQ;2BAAQ;GAAQ;2BAAQ,QAAQ;;;CAG1D,oCACW,CAChB;cAAe,KAOf;wBAAsB,KAAK,MAAM,CACnB,oBACP,mBAAM,CACT;;IAPA,QAOA;IANA,MAMA;KACA;UAAO;KAEJ,oBAAK,CACR;;IAXA,QAWA;IAVA,MAUA;KACA;WAAQ,EAAR;;;;CAKC,eACU;KAAI,EAAC,cAAc,IAChC;;GACW;WACN,UACA,UACI,uBACP;IAAO,kBAAe;MAElB,oBACJ;IAAO,gBAAa;;;;CAKnB,0BACL;;;;;;;;;CASK,iCAAiD,OACtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BK,kBAAoD,CACzD;KAAI,MAAK,MACP;GAAO;IACT;KAAI,aAAY,MACd;cAAW;IACb;UAAQ,KACR;KAAI,qBAAoB,MACtB;sBAAmB;GAEnB;OAAI,iBAAiB;IACvB;KAAI,MAAK,MAAM,CACb;OAAI,OAAO,GACX;oBAAiB,YAAY;IAE/B;EAAO;;;;;;;;;;;AAlGT,mBAAuB;AAkFvB,eAAiB","version":3,"file":"Register.js.map","sources":["../../../../../../haxe/haxe_libraries/genes/0.3.0/github/2408778ccba83def22930ef9595d1639043c1dc2/src/genes/Register.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n"]}