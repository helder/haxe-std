<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace helder\std\php\_NativeIndexedArray;

use \helder\std\php\_Boot\HxAnon;
use \helder\std\php\Boot;

class NativeIndexedArrayKeyValueIterator {
	/**
	 * @var int
	 */
	public $current;
	/**
	 * @var mixed
	 */
	public $data;
	/**
	 * @var int
	 */
	public $length;

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#C:\Users\ben\AppData\Roaming/haxe/versions/4.1.4/std/php/NativeIndexedArray.hx:82: characters 20-21
		$this->current = 0;
		#C:\Users\ben\AppData\Roaming/haxe/versions/4.1.4/std/php/NativeIndexedArray.hx:86: characters 3-30
		$this->length = \count($data);
		#C:\Users\ben\AppData\Roaming/haxe/versions/4.1.4/std/php/NativeIndexedArray.hx:87: characters 3-19
		$this->data = $data;
	}

	/**
	 * @return bool
	 */
	public function hasNext () {
		#C:\Users\ben\AppData\Roaming/haxe/versions/4.1.4/std/php/NativeIndexedArray.hx:91: characters 3-26
		return $this->current < $this->length;
	}

	/**
	 * @return object
	 */
	public function next () {
		#C:\Users\ben\AppData\Roaming/haxe/versions/4.1.4/std/php/NativeIndexedArray.hx:95: characters 16-23
		$tmp = $this->current;
		#C:\Users\ben\AppData\Roaming/haxe/versions/4.1.4/std/php/NativeIndexedArray.hx:95: characters 3-48
		return new HxAnon([
			"key" => $tmp,
			"value" => $this->data[$this->current++],
		]);
	}
}

Boot::registerClass(NativeIndexedArrayKeyValueIterator::class, 'php._NativeIndexedArray.NativeIndexedArrayKeyValueIterator');
