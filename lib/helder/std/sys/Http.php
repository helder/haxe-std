<?php
/**
 * Generated by Haxe 4.0.0+ef18b627e
 */

namespace helder\std\sys;

use \helder\std\php\_Boot\HxAnon;
use \helder\std\haxe\io\_BytesData\Container;
use \helder\std\php\net\SslSocket;
use \helder\std\Lambda;
use \helder\std\php\Boot;
use \helder\std\haxe\io\BytesOutput;
use \helder\std\sys\net\Socket;
use \helder\std\haxe\CallStack;
use \helder\std\haxe\io\Output;
use \helder\std\haxe\io\Eof;
use \helder\std\haxe\io\BytesBuffer;
use \helder\std\haxe\io\Error;
use \helder\std\haxe\http\HttpBase;
use \helder\std\haxe\io\Input;
use \helder\std\Std;
use \helder\std\php\_Boot\HxString;
use \helder\std\sys\net\Host;
use \helder\std\haxe\ds\StringMap;
use \helder\std\php\_Boot\HxException;
use \helder\std\haxe\io\Bytes;
use \helder\std\StringBuf;
use \helder\std\EReg;

class Http extends HttpBase {
	/**
	 * @var object
	 */
	static public $PROXY = null;

	/**
	 * @var Bytes
	 */
	public $chunk_buf;
	/**
	 * @var int
	 */
	public $chunk_size;
	/**
	 * @var float
	 */
	public $cnxTimeout;
	/**
	 * @var object
	 */
	public $file;
	/**
	 * @var bool
	 */
	public $noShutdown;
	/**
	 * @var StringMap
	 */
	public $responseHeaders;

	/**
	 * Makes a synchronous request to `url`.
	 * This creates a new Http instance and makes a GET request by calling its
	 * `request(false)` method.
	 * If `url` is null, the result is unspecified.
	 * 
	 * @param string $url
	 * 
	 * @return string
	 */
	static public function requestUrl ($url) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:487: characters 3-25
		$h = new Http($url);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:488: characters 3-16
		$r = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:489: lines 489-491
		$h->onData = function ($d)  use (&$r) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:490: characters 4-9
			$r = $d;
		};
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:492: lines 492-494
		$h->onError = function ($e) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:493: characters 4-9
			throw new HxException($e);
		};
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:495: characters 3-19
		$h->request(false);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:496: characters 3-11
		return $r;
	}

	/**
	 * @param string $url
	 * 
	 * @return void
	 */
	public function __construct ($url) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:49: characters 3-18
		$this->cnxTimeout = 10;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:51: characters 3-69
		$this->noShutdown = !function_exists("stream_socket_shutdown");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:53: characters 3-13
		parent::__construct($url);
	}

	/**
	 * @param bool $post
	 * @param Output $api
	 * @param Socket $sock
	 * @param string $method
	 * 
	 * @return void
	 */
	public function customRequest ($post, $api, $sock = null, $method = null) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:91: characters 3-31
		$this->responseAsString = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:92: characters 3-28
		$this->responseBytes = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:93: characters 3-72
		$url_regexp = new EReg("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)\$", "");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:94: lines 94-97
		if (!$url_regexp->match($this->url)) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:95: characters 4-26
			$this->onError("Invalid URL");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:96: characters 4-10
			return;
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:98: characters 3-54
		$secure = $url_regexp->matched(1) === "https://";
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:99: lines 99-116
		if ($sock === null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:100: lines 100-114
			if ($secure) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:102: characters 5-35
				$sock = new SslSocket();
			} else {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:113: characters 5-24
				$sock = new Socket();
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:115: characters 4-31
			$sock->setTimeout($this->cnxTimeout);
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:117: characters 3-36
		$host = $url_regexp->matched(2);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:118: characters 3-42
		$portString = $url_regexp->matched(3);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:119: characters 3-39
		$request = $url_regexp->matched(4);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:123: lines 123-125
		if (mb_substr($request, 0, 1) !== "/") {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:124: characters 4-27
			$request = "/" . ($request??'null');
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:126: characters 3-139
		$port = (($portString === null) || ($portString === "") ? ($secure ? 443 : 80) : Std::parseInt(mb_substr($portString, 1, mb_strlen($portString) - 1)));
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:128: characters 3-34
		$multipart = $this->file !== null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:129: characters 3-23
		$boundary = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:130: characters 3-18
		$uri = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:131: lines 131-171
		if ($multipart) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:132: characters 4-15
			$post = true;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:133: lines 133-136
			$boundary = (Std::string(mt_rand(0, 999))??'null') . (Std::string(mt_rand(0, 999))??'null') . (Std::string(mt_rand(0, 999))??'null') . (Std::string(mt_rand(0, 999))??'null');
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:137: lines 137-138
			while (mb_strlen($boundary) < 38) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:138: characters 5-30
				$boundary = "-" . ($boundary??'null');
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:139: characters 4-28
			$b = new StringBuf();
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:140: lines 140-151
			$_g = 0;
			$_g1 = $this->params;
			while ($_g < $_g1->length) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:140: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:140: lines 140-151
				++$_g;
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:141: characters 5-16
				$b->add("--");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:142: characters 5-20
				$b->add($boundary);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:143: characters 5-18
				$b->add("\x0D\x0A");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:144: characters 5-52
				$b->add("Content-Disposition: form-data; name=\"");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:145: characters 5-18
				$b->add($p->name);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:146: characters 5-15
				$b->add("\"");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:147: characters 5-18
				$b->add("\x0D\x0A");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:148: characters 5-18
				$b->add("\x0D\x0A");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:149: characters 5-19
				$b->add($p->value);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:150: characters 5-18
				$b->add("\x0D\x0A");
			}

			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:152: characters 4-15
			$b->add("--");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:153: characters 4-19
			$b->add($boundary);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:154: characters 4-17
			$b->add("\x0D\x0A");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:155: characters 4-51
			$b->add("Content-Disposition: form-data; name=\"");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:156: characters 4-21
			$b->add($this->file->param);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:157: characters 4-26
			$b->add("\"; filename=\"");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:158: characters 4-24
			$b->add($this->file->filename);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:159: characters 4-14
			$b->add("\"");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:160: characters 4-17
			$b->add("\x0D\x0A");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:161: characters 4-61
			$b->add("Content-Type: " . ($this->file->mimeType??'null') . "\x0D\x0A" . "\x0D\x0A");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:162: characters 4-22
			$uri = $b->b;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:164: lines 164-170
			$_g2 = 0;
			$_g11 = $this->params;
			while ($_g2 < $_g11->length) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:164: characters 9-10
				$p1 = ($_g11->arr[$_g2] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:164: lines 164-170
				++$_g2;
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:165: lines 165-168
				if ($uri === null) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:166: characters 6-14
					$uri = "";
				} else {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:168: characters 6-16
					$uri = ($uri??'null') . "&";
				}
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:169: characters 5-85
				$uri = ($uri??'null') . (rawurlencode($p1->name)??'null') . "=" . (rawurlencode("" . ($p1->value??'null'))??'null');
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:173: characters 3-29
		$b1 = new BytesOutput();
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:174: lines 174-180
		if ($method !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:175: characters 4-25
			$b1->writeString($method);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:176: characters 4-22
			$b1->writeString(" ");
		} else if ($post) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:178: characters 4-26
			$b1->writeString("POST ");
		} else {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:180: characters 4-25
			$b1->writeString("GET ");
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:182: lines 182-189
		if (Http::$PROXY !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:183: characters 4-28
			$b1->writeString("http://");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:184: characters 4-23
			$b1->writeString($host);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:185: lines 185-188
			if ($port !== 80) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:186: characters 5-23
				$b1->writeString(":");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:187: characters 5-27
				$b1->writeString("" . ($port??'null'));
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:190: characters 3-25
		$b1->writeString($request);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:192: lines 192-198
		if (!$post && ($uri !== null)) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:193: lines 193-196
			if (HxString::indexOf($request, "?", 0) >= 0) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:194: characters 5-23
				$b1->writeString("&");
			} else {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:196: characters 5-23
				$b1->writeString("?");
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:197: characters 4-22
			$b1->writeString($uri);
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:199: characters 3-55
		$b1->writeString(" HTTP/1.1\x0D\x0AHost: " . ($host??'null') . "\x0D\x0A");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:200: lines 200-203
		if ($this->postData !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:201: characters 16-40
			$s = $this->postData;
			$tmp = strlen($s);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:201: characters 4-40
			$this->postBytes = new Bytes($tmp, new Container($s));
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:202: characters 4-19
			$this->postData = null;
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:204: lines 204-221
		if ($this->postBytes !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:205: characters 4-65
			$b1->writeString("Content-Length: " . ($this->postBytes->length??'null') . "\x0D\x0A");
		} else if ($post && ($uri !== null)) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:207: lines 207-216
			if ($multipart || !Lambda::exists($this->headers, function ($h) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:207: characters 57-88
				return $h->name === "Content-Type";
			})) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:208: characters 5-36
				$b1->writeString("Content-Type: ");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:209: lines 209-214
				if ($multipart) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:210: characters 6-42
					$b1->writeString("multipart/form-data");
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:211: characters 6-34
					$b1->writeString("; boundary=");
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:212: characters 6-29
					$b1->writeString($boundary);
				} else {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:214: characters 6-56
					$b1->writeString("application/x-www-form-urlencoded");
				}
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:215: characters 5-26
				$b1->writeString("\x0D\x0A");
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:217: lines 217-220
			if ($multipart) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:218: characters 5-96
				$b1->writeString("Content-Length: " . ((mb_strlen($uri) + $this->file->size + mb_strlen($boundary) + 6)??'null') . "\x0D\x0A");
			} else {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:220: characters 5-60
				$b1->writeString("Content-Length: " . (mb_strlen($uri)??'null') . "\x0D\x0A");
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:222: characters 3-41
		$b1->writeString("Connection: close\x0D\x0A");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:223: lines 223-228
		$_g3 = 0;
		$_g12 = $this->headers;
		while ($_g3 < $_g12->length) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:223: characters 8-9
			$h1 = ($_g12->arr[$_g3] ?? null);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:223: lines 223-228
			++$_g3;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:224: characters 4-25
			$b1->writeString($h1->name);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:225: characters 4-23
			$b1->writeString(": ");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:226: characters 4-26
			$b1->writeString($h1->value);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:227: characters 4-25
			$b1->writeString("\x0D\x0A");
		}

		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:229: characters 3-24
		$b1->writeString("\x0D\x0A");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:230: lines 230-233
		if ($this->postBytes !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:231: characters 4-52
			$b1->writeFullBytes($this->postBytes, 0, $this->postBytes->length);
		} else if ($post && ($uri !== null)) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:233: characters 4-22
			$b1->writeString($uri);
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:234: lines 234-250
		try {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:235: lines 235-238
			if (Http::$PROXY !== null) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:236: characters 5-61
				$sock->connect(new Host(Http::$PROXY->host), Http::$PROXY->port);
			} else {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:238: characters 5-39
				$sock->connect(new Host($host), $port);
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:239: lines 239-242
			if ($multipart) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:240: characters 5-49
				$this->writeBody($b1, $this->file->io, $this->file->size, $boundary, $sock);
			} else {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:242: characters 5-34
				$this->writeBody($b1, null, 0, null, $sock);
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:243: characters 4-31
			$this->readHttpResponse($api, $sock);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:244: characters 4-16
			$sock->close();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:246: lines 246-248
			try {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:247: characters 5-17
				$sock->close();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e1 = $__hx__real_e;
							}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:249: characters 4-26
			$this->onError(Std::string($e));
		}
	}

	/**
	 * @param string $argname
	 * @param string $filename
	 * @param Input $file
	 * @param int $size
	 * @param string $mimeType
	 * 
	 * @return void
	 */
	public function fileTransfer ($argname, $filename, $file, $size, $mimeType = "application/octet-stream") {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:81: lines 81-87
		if ($mimeType === null) {
			$mimeType = "application/octet-stream";
		}
		$this->file = new HxAnon([
			"param" => $argname,
			"filename" => $filename,
			"io" => $file,
			"size" => $size,
			"mimeType" => $mimeType,
		]);
	}

	/**
	 * @param string $argname
	 * @param string $filename
	 * @param Input $file
	 * @param int $size
	 * @param string $mimeType
	 * 
	 * @return void
	 */
	public function fileTransfert ($argname, $filename, $file, $size, $mimeType = "application/octet-stream") {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:77: characters 3-56
		if ($mimeType === null) {
			$mimeType = "application/octet-stream";
		}
		$this->fileTransfer($argname, $filename, $file, $size, $mimeType);
	}

	/**
	 * @param EReg $chunk_re
	 * @param Output $api
	 * @param Bytes $buf
	 * @param int $len
	 * 
	 * @return bool
	 */
	public function readChunk ($chunk_re, $api, $buf, $len) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:421: lines 421-455
		if ($this->chunk_size === null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:422: lines 422-429
			if ($this->chunk_buf !== null) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:423: characters 5-39
				$b = new BytesBuffer();
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:424: characters 5-21
				$b->b = ($b->b . $this->chunk_buf->b->s);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:425: characters 5-28
				if (($len < 0) || ($len > $buf->length)) {
					throw new HxException(Error::OutsideBounds());
				} else {
					$left = $b->b;
					$this_s = substr($buf->b->s, 0, $len);
					$b->b = ($left . $this_s);
				}
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:426: characters 5-8
				$buf = $b->getBytes();
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:427: characters 5-28
				$len += $this->chunk_buf->length;
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:428: characters 5-14
				$this->chunk_buf = null;
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:433: lines 433-447
			if ($chunk_re->match($buf->toString())) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:435: characters 5-35
				$p = $chunk_re->matchedPos();
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:436: lines 436-446
				if ($p->len <= $len) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:437: characters 6-37
					$cstr = $chunk_re->matched(1);
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:438: characters 6-16
					$this->chunk_size = Std::parseInt("0x" . ($cstr??'null'));
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:439: lines 439-443
					if ($this->chunk_size === 0) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:440: characters 7-17
						$this->chunk_size = null;
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:441: characters 7-16
						$this->chunk_buf = null;
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:442: characters 7-19
						return false;
					}
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:444: characters 6-18
					$len -= $p->len;
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:445: characters 38-57
					$pos = $p->len;
					$tmp = null;
					if (($pos < 0) || ($len < 0) || (($pos + $len) > $buf->length)) {
						throw new HxException(Error::OutsideBounds());
					} else {
						$tmp = new Bytes($len, new Container(substr($buf->b->s, $pos, $len)));
					}
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:445: characters 6-63
					return $this->readChunk($chunk_re, $api, $tmp, $len);
				}
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:449: lines 449-452
			if ($len > 10) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:450: characters 5-29
				$this->onError("Invalid chunk");
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:451: characters 5-17
				return false;
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:453: characters 16-31
			$tmp1 = null;
			if (($len < 0) || ($len > $buf->length)) {
				throw new HxException(Error::OutsideBounds());
			} else {
				$tmp1 = new Bytes($len, new Container(substr($buf->b->s, 0, $len)));
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:453: characters 4-13
			$this->chunk_buf = $tmp1;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:454: characters 4-15
			return true;
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:457: lines 457-461
		if ($this->chunk_size > $len) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:458: characters 4-21
			$this->chunk_size -= $len;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:459: characters 4-31
			$api->writeBytes($buf, 0, $len);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:460: characters 4-15
			return true;
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:462: characters 3-28
		$end = $this->chunk_size + 2;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:463: lines 463-471
		if ($len >= $end) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:464: lines 464-465
			if ($this->chunk_size > 0) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:465: characters 5-39
				$api->writeBytes($buf, 0, $this->chunk_size);
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:466: characters 4-14
			$len -= $end;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:467: characters 4-14
			$this->chunk_size = null;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:468: lines 468-469
			if ($len === 0) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:469: characters 5-16
				return true;
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:470: characters 36-53
			$tmp2 = null;
			if (($end < 0) || ($len < 0) || (($end + $len) > $buf->length)) {
				throw new HxException(Error::OutsideBounds());
			} else {
				$tmp2 = new Bytes($len, new Container(substr($buf->b->s, $end, $len)));
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:470: characters 4-59
			return $this->readChunk($chunk_re, $api, $tmp2, $len);
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:472: lines 472-473
		if ($this->chunk_size > 0) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:473: characters 4-38
			$api->writeBytes($buf, 0, $this->chunk_size);
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:474: characters 3-20
		$this->chunk_size -= $len;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:475: characters 3-14
		return true;
	}

	/**
	 * @param Output $api
	 * @param Socket $sock
	 * 
	 * @return void
	 */
	public function readHttpResponse ($api, $sock) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:280: characters 3-37
		$b = new BytesBuffer();
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:281: characters 3-13
		$k = 4;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:282: characters 3-34
		$s = Bytes::alloc(4);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:283: characters 3-30
		$sock->setTimeout($this->cnxTimeout);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:284: lines 284-340
		while (true) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:285: characters 4-42
			$p = $sock->input->readBytes($s, 0, $k);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:286: lines 286-287
			while ($p !== $k) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:287: characters 5-43
				$p += $sock->input->readBytes($s, $p, $k - $p);
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:288: characters 4-23
			if (($k < 0) || ($k > $s->length)) {
				throw new HxException(Error::OutsideBounds());
			} else {
				$left = $b->b;
				$this_s = substr($s->b->s, 0, $k);
				$b->b = ($left . $this_s);
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:289: lines 289-339
			if ($k === 1) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:291: characters 6-23
				$c = ord($s->b->s[0]);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:292: lines 292-293
				if ($c === 10) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:293: characters 7-12
					break;
				}
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:294: lines 294-297
				if ($c === 13) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:295: characters 7-8
					$k = 3;
				} else {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:297: characters 7-8
					$k = 4;
				}
			} else if ($k === 2) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:299: characters 6-23
				$c1 = ord($s->b->s[1]);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:300: lines 300-307
				if ($c1 === 10) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:301: lines 301-302
					if (ord($s->b->s[0]) === 13) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:302: characters 8-13
						break;
					}
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:303: characters 7-8
					$k = 4;
				} else if ($c1 === 13) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:305: characters 7-8
					$k = 3;
				} else {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:307: characters 7-8
					$k = 4;
				}
			} else if ($k === 3) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:309: characters 6-23
				$c2 = ord($s->b->s[2]);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:310: lines 310-323
				if ($c2 === 10) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:311: lines 311-316
					if (ord($s->b->s[1]) !== 13) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:312: characters 8-9
						$k = 4;
					} else if (ord($s->b->s[0]) !== 10) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:314: characters 8-9
						$k = 2;
					} else {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:316: characters 8-13
						break;
					}
				} else if ($c2 === 13) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:318: lines 318-321
					if ((ord($s->b->s[1]) !== 10) || (ord($s->b->s[0]) !== 13)) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:319: characters 8-9
						$k = 1;
					} else {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:321: characters 8-9
						$k = 3;
					}
				} else {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:323: characters 7-8
					$k = 4;
				}
			} else if ($k === 4) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:325: characters 6-23
				$c3 = ord($s->b->s[3]);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:326: lines 326-338
				if ($c3 === 10) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:327: lines 327-332
					if (ord($s->b->s[2]) !== 13) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:328: characters 8-16
						continue;
					} else if ((ord($s->b->s[1]) !== 10) || (ord($s->b->s[0]) !== 13)) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:330: characters 8-9
						$k = 2;
					} else {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:332: characters 8-13
						break;
					}
				} else if ($c3 === 13) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:334: lines 334-337
					if ((ord($s->b->s[2]) !== 10) || (ord($s->b->s[1]) !== 13)) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:335: characters 8-9
						$k = 3;
					} else {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:337: characters 8-9
						$k = 1;
					}
				}
			}
		};
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:344: characters 3-55
		$headers = HxString::split($b->getBytes()->toString(), "\x0D\x0A");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:346: characters 18-33
		if ($headers->length > 0) {
			$headers->length--;
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:346: characters 3-34
		$response = array_shift($headers->arr);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:347: characters 3-32
		$rp = HxString::split($response, " ");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:348: characters 3-36
		$status = Std::parseInt(($rp->arr[1] ?? null));
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:349: lines 349-350
		if (($status === 0) || ($status === null)) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:350: characters 4-9
			throw new HxException("Response status error");
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:353: characters 3-16
		if ($headers->length > 0) {
			$headers->length--;
		}
		array_pop($headers->arr);

		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:354: characters 3-16
		if ($headers->length > 0) {
			$headers->length--;
		}
		array_pop($headers->arr);

		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:355: characters 3-18
		$this->responseHeaders = new StringMap();
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:356: characters 3-19
		$size = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:357: characters 3-23
		$chunked = false;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:358: lines 358-370
		$_g = 0;
		while ($_g < $headers->length) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:358: characters 8-13
			$hline = ($headers->arr[$_g] ?? null);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:358: lines 358-370
			++$_g;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:359: characters 4-30
			$a = HxString::split($hline, ": ");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:360: characters 16-25
			if ($a->length > 0) {
				$a->length--;
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:360: characters 4-26
			$hname = array_shift($a->arr);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:361: characters 4-57
			$hval = ($a->length === 1 ? ($a->arr[0] ?? null) : $a->join(": "));
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:362: characters 11-53
			$hval = ltrim(rtrim($hval));
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:363: characters 4-36
			$this->responseHeaders->data[$hname] = $hval;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:364: characters 12-31
			$__hx__switch = (mb_strtolower($hname));
			if ($__hx__switch === "content-length") {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:366: characters 6-10
				$size = Std::parseInt($hval);
			} else if ($__hx__switch === "transfer-encoding") {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:368: characters 6-13
				$chunked = mb_strtolower($hval) === "chunked";
			}
		}

		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:372: characters 3-19
		$this->onStatus($status);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:374: characters 3-46
		$chunk_re = new EReg("^([0-9A-Fa-f]+)[ ]*\x0D\x0A", "m");
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:375: characters 3-13
		$this->chunk_size = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:376: characters 3-12
		$this->chunk_buf = null;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:378: characters 3-22
		$bufsize = 1024;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:379: characters 3-42
		$buf = Bytes::alloc($bufsize);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:380: lines 380-412
		if ($chunked) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:381: lines 381-389
			try {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:382: lines 382-386
				while (true) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:383: characters 6-54
					$len = $sock->input->readBytes($buf, 0, $bufsize);
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:384: lines 384-385
					if (!$this->readChunk($chunk_re, $api, $buf, $len)) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:385: characters 7-12
						break;
					}
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e = $__hx__real_e;
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:388: characters 5-10
					throw new HxException("Transfer aborted");
				} else  throw $__hx__caught_e;
			}
		} else if ($size === null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:391: lines 391-392
			if (!$this->noShutdown) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:392: characters 5-31
				$sock->shutdown(false, true);
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:393: lines 393-400
			try {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:394: lines 394-399
				while (true) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:395: characters 6-54
					$len1 = $sock->input->readBytes($buf, 0, $bufsize);
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:396: lines 396-397
					if ($len1 === 0) {
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:397: characters 7-12
						break;
					}
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:398: characters 6-33
					$api->writeBytes($buf, 0, $len1);
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e1 = $__hx__real_e;
									} else  throw $__hx__caught_e;
			}
		} else {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:402: characters 4-21
			$api->prepare($size);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:403: lines 403-411
			try {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:404: lines 404-408
				while ($size > 0) {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:405: characters 6-84
					$len2 = $sock->input->readBytes($buf, 0, ($size > $bufsize ? $bufsize : $size));
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:406: characters 6-33
					$api->writeBytes($buf, 0, $len2);
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:407: characters 6-17
					$size -= $len2;
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e2 = $__hx__real_e;
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:410: characters 5-10
					throw new HxException("Transfer aborted");
				} else  throw $__hx__caught_e;
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:413: lines 413-414
		if ($chunked && (($this->chunk_size !== null) || ($this->chunk_buf !== null))) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:414: characters 4-9
			throw new HxException("Invalid chunk");
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:415: lines 415-416
		if (($status < 200) || ($status >= 400)) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:416: characters 4-9
			throw new HxException("Http Error #" . ($status??'null'));
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:417: characters 3-14
		$api->close();
	}

	/**
	 * @param bool $post
	 * 
	 * @return void
	 */
	public function request ($post = null) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:56: lines 56-72
		$_gthis = $this;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:57: characters 3-42
		$output = new BytesOutput();
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:58: characters 3-21
		$old = $this->onError;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:59: characters 3-19
		$err = false;
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:60: lines 60-66
		$this->onError = function ($e)  use (&$err, &$old, &$_gthis, &$output) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:61: characters 4-37
			$_gthis->responseBytes = $output->getBytes();
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:62: characters 4-14
			$err = true;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:64: characters 4-17
			$_gthis->onError = $old;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:65: characters 4-14
			$_gthis->onError($e);
		};
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:67: characters 39-55
		$post = $post || ($this->postBytes !== null) || ($this->postData !== null);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:68: characters 3-30
		$this->customRequest($post, $output);
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:69: lines 69-71
		if (!$err) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:70: characters 4-30
			$this->success($output->getBytes());
		}
	}

	/**
	 * @param BytesOutput $body
	 * @param Input $fileInput
	 * @param int $fileSize
	 * @param string $boundary
	 * @param Socket $sock
	 * 
	 * @return void
	 */
	public function writeBody ($body, $fileInput, $fileSize, $boundary, $sock) {
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:254: lines 254-257
		if ($body !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:255: characters 4-32
			$bytes = $body->getBytes();
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:256: characters 4-54
			$sock->output->writeFullBytes($bytes, 0, $bytes->length);
		}
		#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:258: lines 258-275
		if ($boundary !== null) {
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:259: characters 4-23
			$bufsize = 4096;
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:260: characters 4-43
			$buf = Bytes::alloc($bufsize);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:261: lines 261-270
			while ($fileSize > 0) {
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:262: characters 5-62
				$size = ($fileSize > $bufsize ? $bufsize : $fileSize);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:263: characters 5-17
				$len = 0;
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:264: lines 264-267
				try {
					#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:265: characters 6-45
					$len = $fileInput->readBytes($buf, 0, $size);
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					if ($__hx__real_e instanceof Eof) {
						$e = $__hx__real_e;
						#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:267: characters 6-11
						break;
					} else  throw $__hx__caught_e;
				}
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:268: characters 5-44
				$sock->output->writeFullBytes($buf, 0, $len);
				#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:269: characters 5-20
				$fileSize -= $len;
			}
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:271: characters 4-35
			$sock->output->writeString("\x0D\x0A");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:272: characters 4-33
			$sock->output->writeString("--");
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:273: characters 4-37
			$sock->output->writeString($boundary);
			#/home/runner/haxe/versions/4.0.0/std/sys/Http.hx:274: characters 4-33
			$sock->output->writeString("--");
		}
	}
}

Boot::registerClass(Http::class, 'sys.Http');
