<?php
/**
 * Generated by Haxe 4.0.3
 */

namespace helder\std\haxe\rtti;

use \helder\std\php\Boot;
use \helder\std\Array_hx;
use \helder\std\php\_Boot\HxException;
use \helder\std\_Array\ArrayIterator;

/**
 * Contains type and equality checks functionalities for RTTI.
 */
class TypeApi {
	/**
	 * Unlike `c1 == c2`, this function performs a deep equality check on
	 * the arguments of the enum constructors, if exists.
	 * If `c1` or `c2` are `null`, the result is unspecified.
	 * 
	 * @param object $c1
	 * @param object $c2
	 * 
	 * @return bool
	 */
	public static function constructorEq ($c1, $c2) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:530: lines 530-531
		if ($c1->name !== $c2->name) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:531: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:532: lines 532-533
		if ($c1->doc !== $c2->doc) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:533: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:534: lines 534-535
		if (($c1->args === null) !== ($c2->args === null)) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:535: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:536: lines 536-539
		if (($c1->args !== null) && !TypeApi::leq(function ($a, $b) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:537: characters 11-65
			if (($a->name === $b->name) && ($a->opt === $b->opt)) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:537: characters 49-65
				return TypeApi::typeEq($a->t, $b->t);
			} else {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:537: characters 11-65
				return false;
			}
		}, $c1->args, $c2->args)) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:539: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:540: characters 3-14
		return true;
	}

	/**
	 * Unlike `f1 == f2`, this function performs a deep equality check on
	 * the given `ClassField` instances.
	 * If `f1` or `f2` are `null`, the result is unspecified.
	 * 
	 * @param object $f1
	 * @param object $f2
	 * 
	 * @return bool
	 */
	public static function fieldEq ($f1, $f2) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:504: lines 504-505
		if ($f1->name !== $f2->name) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:505: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:506: lines 506-507
		if (!TypeApi::typeEq($f1->type, $f2->type)) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:507: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:508: lines 508-509
		if ($f1->isPublic !== $f2->isPublic) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:509: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:510: lines 510-511
		if ($f1->doc !== $f2->doc) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:511: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:512: lines 512-513
		if (!TypeApi::rightsEq($f1->get, $f2->get)) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:513: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:514: lines 514-515
		if (!TypeApi::rightsEq($f1->set, $f2->set)) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:515: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:516: lines 516-517
		if (($f1->params === null) !== ($f2->params === null)) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:517: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:518: lines 518-519
		if (($f1->params !== null) && ($f1->params->join(":") !== $f2->params->join(":"))) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:519: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:520: characters 3-14
		return true;
	}

	/**
	 * Returns `true` if the given `CType` is a variable or `false` if it is a
	 * function.
	 * 
	 * @param CType $t
	 * 
	 * @return bool
	 */
	public static function isVar ($t) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:396: lines 396-399
		if ($t->index === 4) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:397: characters 22-23
			$_g1 = $t->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:397: characters 19-20
			$_g = $t->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:397: characters 26-31
			return false;
		} else {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:398: characters 13-17
			return true;
		}
	}

	/**
	 * @param \Closure $f
	 * @param Array_hx $l1
	 * @param Array_hx $l2
	 * 
	 * @return bool
	 */
	public static function leq ($f, $l1, $l2) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:403: characters 3-26
		$it = new ArrayIterator($l2);
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:404: lines 404-410
		$_g = 0;
		while ($_g < $l1->length) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:404: characters 8-10
			$e1 = ($l1->arr[$_g] ?? null);
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:404: lines 404-410
			++$_g;
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:405: lines 405-406
			if (!$it->hasNext()) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:406: characters 5-17
				return false;
			}
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:407: characters 4-23
			$e2 = $it->next();
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:408: lines 408-409
			if (!$f($e1, $e2)) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:409: characters 5-17
				return false;
			}
		}

		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:411: lines 411-412
		if ($it->hasNext()) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:412: characters 4-16
			return false;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:413: characters 3-14
		return true;
	}

	/**
	 * Unlike `r1 == r2`, this function performs a deep equality check on
	 * the given `Rights` instances.
	 * If `r1` or `r2` are `null`, the result is unspecified.
	 * 
	 * @param Rights $r1
	 * @param Rights $r2
	 * 
	 * @return bool
	 */
	public static function rightsEq ($r1, $r2) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:423: lines 423-424
		if ($r1 === $r2) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:424: characters 4-15
			return true;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:425: lines 425-433
		if ($r1->index === 2) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:426: characters 15-17
			$m1 = $r1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:427: lines 427-431
			if ($r2->index === 2) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:428: characters 17-19
				$m2 = $r2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:429: characters 7-22
				return $m1 === $m2;
			}
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:434: characters 3-15
		return false;
	}

	/**
	 * Unlike `t1 == t2`, this function performs a deep equality check on
	 * the given `CType` instances.
	 * If `t1` or `t2` are `null`, the result is unspecified.
	 * 
	 * @param CType $t1
	 * @param CType $t2
	 * 
	 * @return bool
	 */
	public static function typeEq ($t1, $t2) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:444: lines 444-493
		$__hx__switch = ($t1->index);
		if ($__hx__switch === 0) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:446: characters 5-26
			return $t2 === CType::CUnknown();
		} else if ($__hx__switch === 1) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:447: characters 21-27
			$params = $t1->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:447: characters 15-19
			$name = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:448: lines 448-452
			if ($t2->index === 1) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:449: characters 24-31
				$params2 = $t2->params[1];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:449: characters 17-22
				$name2 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:450: characters 14-59
				if ($name === $name2) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:450: characters 31-59
					return TypeApi::leq(Boot::getStaticClosure(TypeApi::class, 'typeEq'), $params, $params2);
				} else {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:450: characters 14-59
					return false;
				}
			}
		} else if ($__hx__switch === 2) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:453: characters 22-28
			$params1 = $t1->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:453: characters 16-20
			$name1 = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:454: lines 454-458
			if ($t2->index === 2) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:455: characters 25-32
				$params21 = $t2->params[1];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:455: characters 18-23
				$name21 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:456: characters 14-59
				if ($name1 === $name21) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:456: characters 31-59
					return TypeApi::leq(Boot::getStaticClosure(TypeApi::class, 'typeEq'), $params1, $params21);
				} else {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:456: characters 14-59
					return false;
				}
			}
		} else if ($__hx__switch === 3) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:465: characters 24-30
			$params3 = $t1->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:465: characters 18-22
			$name3 = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:466: lines 466-470
			if ($t2->index === 3) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:467: characters 27-34
				$params22 = $t2->params[1];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:467: characters 20-25
				$name22 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:468: characters 14-59
				if ($name3 === $name22) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:468: characters 31-59
					return TypeApi::leq(Boot::getStaticClosure(TypeApi::class, 'typeEq'), $params3, $params22);
				} else {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:468: characters 14-59
					return false;
				}
			}
		} else if ($__hx__switch === 4) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:471: characters 25-28
			$ret = $t1->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:471: characters 19-23
			$args = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:472: lines 472-478
			if ($t2->index === 4) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:473: characters 28-32
				$ret2 = $t2->params[1];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:473: characters 21-26
				$args2 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:474: lines 474-476
				if (TypeApi::leq(function ($a, $b) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:475: characters 15-69
					if (($a->name === $b->name) && ($a->opt === $b->opt)) {
						#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:475: characters 53-69
						return TypeApi::typeEq($a->t, $b->t);
					} else {
						#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:475: characters 15-69
						return false;
					}
				}, $args, $args2)) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:476: characters 26-43
					return TypeApi::typeEq($ret, $ret2);
				} else {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:474: lines 474-476
					return false;
				}
			}
		} else if ($__hx__switch === 5) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:479: characters 20-26
			$fields = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:480: lines 480-484
			if ($t2->index === 5) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:481: characters 22-29
				$fields2 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:482: characters 7-71
				return TypeApi::leq(function ($a1, $b1) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:482: characters 33-53
					return TypeApi::fieldEq($a1, $b1);
				}, $fields, $fields2);
			}
		} else if ($__hx__switch === 6) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:485: characters 18-19
			$t = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:486: lines 486-492
			if ($t2->index === 6) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:487: characters 20-22
				$t21 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:488: lines 488-489
				if (($t === null) !== ($t21 === null)) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:489: characters 8-20
					return false;
				}
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:490: characters 14-40
				if ($t !== null) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:490: characters 27-40
					return TypeApi::typeEq($t, $t21);
				} else {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:490: characters 14-40
					return true;
				}
			}
		} else if ($__hx__switch === 7) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:459: characters 25-31
			$params4 = $t1->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:459: characters 19-23
			$name4 = $t1->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:460: lines 460-464
			if ($t2->index === 7) {
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:461: characters 28-35
				$params23 = $t2->params[1];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:461: characters 21-26
				$name23 = $t2->params[0];
				#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:462: characters 14-59
				if ($name4 === $name23) {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:462: characters 31-59
					return TypeApi::leq(Boot::getStaticClosure(TypeApi::class, 'typeEq'), $params4, $params23);
				} else {
					#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:462: characters 14-59
					return false;
				}
			}
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:494: characters 3-15
		return false;
	}

	/**
	 * @param TypeTree $t
	 * 
	 * @return object
	 */
	public static function typeInfos ($t) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:375: characters 3-21
		$inf = null;
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:376: lines 376-387
		$__hx__switch = ($t->index);
		if ($__hx__switch === 0) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:385: characters 24-25
			$_g4 = $t->params[2];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:385: characters 21-22
			$_g3 = $t->params[1];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:385: characters 18-19
			$_g2 = $t->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:386: characters 5-10
			throw new HxException("Unexpected Package");
		} else if ($__hx__switch === 1) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:377: characters 20-21
			$c = $t->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:378: characters 5-12
			$inf = $c;
		} else if ($__hx__switch === 2) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:379: characters 19-20
			$e = $t->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:380: characters 5-12
			$inf = $e;
		} else if ($__hx__switch === 3) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:381: characters 19-20
			$t1 = $t->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:382: characters 5-12
			$inf = $t1;
		} else if ($__hx__switch === 4) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:383: characters 23-24
			$a = $t->params[0];
			#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:384: characters 5-12
			$inf = $a;
		}
		#/home/runner/haxe/versions/4.0.3/std/haxe/rtti/CType.hx:388: characters 3-13
		return $inf;
	}
}

Boot::registerClass(TypeApi::class, 'haxe.rtti.TypeApi');
