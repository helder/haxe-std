<?php
/**
 * Generated by Haxe 4.0.3
 */

namespace helder\std\haxe\xml\_Access;

use \helder\std\php\Boot;
use \helder\std\Array_hx;
use \helder\std\Xml;
use \helder\std\_Xml\XmlType_Impl_;
use \helder\std\php\_Boot\HxException;

final class NodeListAccess_Impl_ {
	/**
	 * @param Xml $this
	 * @param string $name
	 * 
	 * @return Array_hx
	 */
	public static function resolve ($this1, $name) {
		#/home/runner/haxe/versions/4.0.3/std/haxe/xml/Access.hx:76: characters 3-14
		$l = new Array_hx();
		#/home/runner/haxe/versions/4.0.3/std/haxe/xml/Access.hx:77: characters 13-37
		$x = $this1->elementsNamed($name);
		while ($x->hasNext()) {
			#/home/runner/haxe/versions/4.0.3/std/haxe/xml/Access.hx:77: lines 77-78
			$x1 = $x->next();
			#/home/runner/haxe/versions/4.0.3/std/haxe/xml/Access.hx:78: characters 11-24
			if (($x1->nodeType !== Xml::$Document) && ($x1->nodeType !== Xml::$Element)) {
				throw new HxException("Invalid nodeType " . (XmlType_Impl_::toString($x1->nodeType)??'null'));
			}
			$this2 = $x1;
			#/home/runner/haxe/versions/4.0.3/std/haxe/xml/Access.hx:78: characters 4-25
			$l->arr[$l->length] = $this2;
			++$l->length;
		}

		#/home/runner/haxe/versions/4.0.3/std/haxe/xml/Access.hx:79: characters 3-11
		return $l;
	}
}

Boot::registerClass(NodeListAccess_Impl_::class, 'haxe.xml._Access.NodeListAccess_Impl_');
