<?php
/**
 * Generated by Haxe 4.0.5
 */

namespace helder\std\haxe\_Int64;

use \helder\std\php\_Boot\HxAnon;
use \helder\std\php\Boot;
use \helder\std\haxe\Int64Helper;
use \helder\std\php\_Boot\HxException;
use \helder\std\haxe\_Int32\Int32_Impl_;

final class Int64_Impl_ {

	/**
	 * @param ___Int64 $x
	 * 
	 * @return ___Int64
	 */
	public static function _new ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:35: character 2
		$this1 = $x;
		return $this1;
	}

	/**
	 * Returns the sum of `a` and `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function add ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:255: characters 3-30
		$high = (($a->high + $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:256: characters 3-27
		$low = (($a->low + $b->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:257: lines 257-258
		if (Int32_Impl_::ucompare($low, $a->low) < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:258: characters 4-10
			$ret = $high++;
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:259: characters 10-25
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function addInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:263: characters 17-18
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:263: characters 10-19
		$high = (($a->high + $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$low = (($a->low + $b_low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if (Int32_Impl_::ucompare($low, $a->low) < 0) {
			$ret = $high++;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:258: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:263: characters 10-19
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * Returns the bitwise AND of `a` and `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function and ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:399: characters 10-46
		$this1 = new ___Int64($a->high & $b->high, $a->low & $b->low);
		return $this1;
	}

	/**
	 * Compares `a` and `b` in signed mode.
	 * Returns a negative value if `a < b`, positive if `a > b`,
	 * or 0 if `a == b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return int
	 */
	public static function compare ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:106: characters 3-27
		$v = (($a->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:107: characters 19-20
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b->low));
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:108: characters 10-68
		if ($a->high < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:108: characters 23-44
			if ($b->high < 0) {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:108: characters 37-38
				return $v;
			} else {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:108: characters 41-43
				return -1;
			}
		} else if ($b->high >= 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:108: characters 62-63
			return $v;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:108: characters 66-67
			return 1;
		}
	}

	/**
	 * Returns the bitwise NOT of `a`.
	 * 
	 * @param ___Int64 $a
	 * 
	 * @return ___Int64
	 */
	public static function complement ($a) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:393: characters 10-31
		$this1 = new ___Int64((~$a->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (~$a->low << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
		return $this1;
	}

	/**
	 * Makes a copy of `this` Int64.
	 * 
	 * @param ___Int64 $this
	 * 
	 * @return ___Int64
	 */
	public static function copy ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:42: characters 10-25
		$this2 = new ___Int64($this1->high, $this1->low);
		return $this2;
	}

	/**
	 * Returns the quotient of `a` divided by `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function div ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:315: characters 3-31
		return Int64_Impl_::divMod($a, $b)->quotient;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function divInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:318: characters 17-18
		$this1 = new ___Int64($b >> 31, $b);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:318: characters 10-19
		return Int64_Impl_::divMod($a, $this1)->quotient;
	}

	/**
	 * Performs signed integer divison of `dividend` by `divisor`.
	 * Returns `{ quotient : Int64, modulus : Int64 }`.
	 * 
	 * @param ___Int64 $dividend
	 * @param ___Int64 $divisor
	 * 
	 * @return object
	 */
	public static function divMod ($dividend, $divisor) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:167: lines 167-174
		if ($divisor->high === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:168: characters 12-23
			$__hx__switch = ($divisor->low);
			if ($__hx__switch === 0) {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:170: characters 6-11
				throw new HxException("divide by zero");
			} else if ($__hx__switch === 1) {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:172: characters 24-39
				$this1 = new ___Int64($dividend->high, $dividend->low);
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:172: characters 50-51
				$this2 = new ___Int64(0, 0);
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:172: characters 6-52
				return new HxAnon([
					"quotient" => $this1,
					"modulus" => $this2,
				]);
			}
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:176: characters 3-53
		$divSign = ($dividend->high < 0) !== ($divisor->high < 0);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 3-64
		$modulus = null;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 17-63
		if ($dividend->high < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 36-45
			$high = (~$dividend->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			$low = ((~$dividend->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			if ($low === 0) {
				$ret = $high++;
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-8
				$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 36-45
			$this3 = new ___Int64($high, $low);
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 3-64
			$modulus = $this3;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 48-63
			$this4 = new ___Int64($dividend->high, $dividend->low);
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:178: characters 3-64
			$modulus = $this4;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:179: characters 13-49
		if ($divisor->high < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:179: characters 31-39
			$high1 = (~$divisor->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			$low1 = ((~$divisor->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			if ($low1 === 0) {
				$ret1 = $high1++;
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-8
				$high1 = ($high1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:179: characters 31-39
			$this5 = new ___Int64($high1, $low1);
			$divisor = $this5;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:179: characters 42-49
			$divisor = $divisor;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:181: characters 3-26
		$this6 = new ___Int64(0, 0);
		$quotient = $this6;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:182: characters 3-22
		$this7 = new ___Int64(0, 1);
		$mask = $this7;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:184: lines 184-190
		while (!($divisor->high < 0)) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:185: characters 14-40
			$v = Int32_Impl_::ucompare($divisor->high, $modulus->high);
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:185: characters 4-41
			$cmp = ($v !== 0 ? $v : Int32_Impl_::ucompare($divisor->low, $modulus->low));
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:186: characters 4-17
			$b = 1;
			$b &= 63;
			if ($b === 0) {
				$this8 = new ___Int64($divisor->high, $divisor->low);
				$divisor = $this8;
			} else if ($b < 32) {
				$this9 = new ___Int64((((($divisor->high << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($divisor->low, (32 - $b))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, ($divisor->low << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
				$divisor = $this9;
			} else {
				$this10 = new ___Int64(($divisor->low << ($b - 32) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, 0);
				$divisor = $this10;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:187: characters 4-14
			$b1 = 1;
			$b1 &= 63;
			if ($b1 === 0) {
				$this11 = new ___Int64($mask->high, $mask->low);
				$mask = $this11;
			} else if ($b1 < 32) {
				$this12 = new ___Int64((((($mask->high << $b1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($mask->low, (32 - $b1))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, ($mask->low << $b1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
				$mask = $this12;
			} else {
				$this13 = new ___Int64(($mask->low << ($b1 - 32) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, 0);
				$mask = $this13;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:188: lines 188-189
			if ($cmp >= 0) {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:189: characters 5-10
				break;
			}
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:192: lines 192-199
		while (true) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:192: characters 10-19
			$b_high = 0;
			$b_low = 0;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:192: lines 192-199
			if (!(($mask->high !== $b_high) || ($mask->low !== $b_low))) {
				break;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:193: characters 8-34
			$v1 = Int32_Impl_::ucompare($modulus->high, $divisor->high);
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:193: lines 193-196
			if ((($v1 !== 0 ? $v1 : Int32_Impl_::ucompare($modulus->low, $divisor->low))) >= 0) {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:194: characters 5-21
				$this14 = new ___Int64((($quotient->high | $mask->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($quotient->low | $mask->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
				$quotient = $this14;
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:195: characters 5-23
				$high2 = (($modulus->high - $divisor->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				$low2 = (($modulus->low - $divisor->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				if (Int32_Impl_::ucompare($modulus->low, $divisor->low) < 0) {
					$ret2 = $high2--;
					#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:272: characters 4-8
					$high2 = ($high2 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				}
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:195: characters 5-23
				$this15 = new ___Int64($high2, $low2);
				$modulus = $this15;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:197: characters 4-15
			$b2 = 1;
			$b2 &= 63;
			if ($b2 === 0) {
				$this16 = new ___Int64($mask->high, $mask->low);
				$mask = $this16;
			} else if ($b2 < 32) {
				$this17 = new ___Int64(Boot::shiftRightUnsigned($mask->high, $b2), (((($mask->high << (32 - $b2) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($mask->low, $b2)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
				$mask = $this17;
			} else {
				$this18 = new ___Int64(0, Boot::shiftRightUnsigned($mask->high, ($b2 - 32)));
				$mask = $this18;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:198: characters 4-18
			$b3 = 1;
			$b3 &= 63;
			if ($b3 === 0) {
				$this19 = new ___Int64($divisor->high, $divisor->low);
				$divisor = $this19;
			} else if ($b3 < 32) {
				$this20 = new ___Int64(Boot::shiftRightUnsigned($divisor->high, $b3), (((($divisor->high << (32 - $b3) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($divisor->low, $b3)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
				$divisor = $this20;
			} else {
				$this21 = new ___Int64(0, Boot::shiftRightUnsigned($divisor->high, ($b3 - 32)));
				$divisor = $this21;
			}
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:201: lines 201-202
		if ($divSign) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:202: characters 15-24
			$high3 = (~$quotient->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			$low3 = ((~$quotient->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			if ($low3 === 0) {
				$ret3 = $high3++;
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-8
				$high3 = ($high3 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:202: characters 15-24
			$this22 = new ___Int64($high3, $low3);
			$quotient = $this22;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:203: lines 203-204
		if ($dividend->high < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:204: characters 14-22
			$high4 = (~$modulus->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			$low4 = ((~$modulus->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			if ($low4 === 0) {
				$ret4 = $high4++;
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-8
				$high4 = ($high4 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:204: characters 14-22
			$this23 = new ___Int64($high4, $low4);
			$modulus = $this23;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:206: lines 206-209
		return new HxAnon([
			"quotient" => $quotient,
			"modulus" => $modulus,
		]);
	}

	/**
	 * Returns `true` if `a` is equal to `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function eq ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:339: characters 10-44
		if ($a->high === $b->high) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:339: characters 30-44
			return $a->low === $b->low;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:339: characters 10-44
			return false;
		}
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function eqInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:342: characters 16-17
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:342: characters 10-18
		if ($a->high === $b_high) {
			return $a->low === $b_low;
		} else {
			return false;
		}
	}

	/**
	 * @param float $f
	 * 
	 * @return ___Int64
	 */
	public static function fromFloat ($f) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:158: characters 3-34
		return Int64Helper::fromFloat($f);
	}

	/**
	 * Returns the high 32-bit word of `x`.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return int
	 */
	public static function getHigh ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:79: characters 3-16
		return $x->high;
	}

	/**
	 * Returns the low 32-bit word of `x`.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return int
	 */
	public static function getLow ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:86: characters 3-15
		return $x->low;
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return int
	 */
	public static function get_high ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:442: characters 3-19
		return $this1->high;
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return int
	 */
	public static function get_low ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:450: characters 3-18
		return $this1->low;
	}

	/**
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function gt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:372: characters 10-23
		$v = (($a->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b->low));
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:372: characters 3-27
		return (($a->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) > 0;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function gtInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:375: characters 16-17
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:375: characters 10-18
		$v = (($a->high - $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b_low));
		return (($a->high < 0 ? ($b_high < 0 ? $v : -1) : ($b_high >= 0 ? $v : 1))) > 0;
	}

	/**
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function gte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:381: characters 10-23
		$v = (($a->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b->low));
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:381: characters 3-28
		return (($a->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) >= 0;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function gteInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:384: characters 17-18
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:384: characters 10-19
		$v = (($a->high - $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b_low));
		return (($a->high < 0 ? ($b_high < 0 ? $v : -1) : ($b_high >= 0 ? $v : 1))) >= 0;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function intDiv ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:321: characters 14-15
		$this1 = new ___Int64($a >> 31, $a);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:321: characters 10-27
		$x = Int64_Impl_::divMod($this1, $b)->quotient;
		if ($x->high !== ((($x->low >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) {
			throw new HxException("Overflow");
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:321: characters 3-27
		$x1 = $x->low;
		$this2 = new ___Int64($x1 >> 31, $x1);
		return $this2;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function intGt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:378: characters 13-14
		$a_high = $a >> 31;
		$a_low = $a;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:378: characters 10-18
		$v = (($a_high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a_low, $b->low));
		return (($a_high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) > 0;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function intGte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:387: characters 14-15
		$a_high = $a >> 31;
		$a_low = $a;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:387: characters 10-19
		$v = (($a_high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a_low, $b->low));
		return (($a_high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) >= 0;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function intLt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:360: characters 13-14
		$a_high = $a >> 31;
		$a_low = $a;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:360: characters 10-18
		$v = (($a_high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a_low, $b->low));
		return (($a_high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) < 0;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function intLte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:369: characters 14-15
		$a_high = $a >> 31;
		$a_low = $a;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:369: characters 10-19
		$v = (($a_high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a_low, $b->low));
		return (($a_high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) <= 0;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function intMod ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:333: characters 14-15
		$this1 = new ___Int64($a >> 31, $a);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:333: characters 10-27
		$x = Int64_Impl_::divMod($this1, $b)->modulus;
		if ($x->high !== ((($x->low >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) {
			throw new HxException("Overflow");
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:333: characters 3-27
		$x1 = $x->low;
		$this2 = new ___Int64($x1 >> 31, $x1);
		return $this2;
	}

	/**
	 * @param int $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function intSub ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:280: characters 14-15
		$a_high = $a >> 31;
		$a_low = $a;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:280: characters 10-19
		$high = (($a_high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$low = (($a_low - $b->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if (Int32_Impl_::ucompare($a_low, $b->low) < 0) {
			$ret = $high--;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:272: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:280: characters 10-19
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * Returns whether the value `val` is of type `haxe.Int64`
	 * 
	 * @param mixed $val
	 * 
	 * @return bool
	 */
	public static function is ($val) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:72: characters 3-30
		return ($val instanceof ___Int64);
	}

	/**
	 * Returns `true` if `x` is less than zero.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return bool
	 */
	public static function isNeg ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:92: characters 3-20
		return $x->high < 0;
	}

	/**
	 * Returns `true` if `x` is exactly zero.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return bool
	 */
	public static function isZero ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:98: characters 10-16
		$b_high = 0;
		$b_low = 0;
		if ($x->high === $b_high) {
			return $x->low === $b_low;
		} else {
			return false;
		}
	}

	/**
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function lt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:354: characters 10-23
		$v = (($a->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b->low));
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:354: characters 3-27
		return (($a->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) < 0;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function ltInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:357: characters 16-17
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:357: characters 10-18
		$v = (($a->high - $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b_low));
		return (($a->high < 0 ? ($b_high < 0 ? $v : -1) : ($b_high >= 0 ? $v : 1))) < 0;
	}

	/**
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function lte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:363: characters 10-23
		$v = (($a->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b->low));
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:363: characters 3-28
		return (($a->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) <= 0;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function lteInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:366: characters 17-18
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:366: characters 10-19
		$v = (($a->high - $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $b_low));
		return (($a->high < 0 ? ($b_high < 0 ? $v : -1) : ($b_high >= 0 ? $v : 1))) <= 0;
	}

	/**
	 * Construct an Int64 from two 32-bit words `high` and `low`.
	 * 
	 * @param int $high
	 * @param int $low
	 * 
	 * @return ___Int64
	 */
	public static function make ($high, $low) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:48: characters 10-43
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * Returns the modulus of `a` divided by `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function mod ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:327: characters 3-30
		return Int64_Impl_::divMod($a, $b)->modulus;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function modInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:330: characters 17-18
		$this1 = new ___Int64($b >> 31, $b);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:330: characters 10-27
		$x = Int64_Impl_::divMod($a, $this1)->modulus;
		if ($x->high !== ((($x->low >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) {
			throw new HxException("Overflow");
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:330: characters 3-27
		$x1 = $x->low;
		$this2 = new ___Int64($x1 >> 31, $x1);
		return $this2;
	}

	/**
	 * Returns the product of `a` and `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function mul ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:287: characters 3-21
		$mask = 65535;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:288: characters 3-44
		$al = $a->low & $mask;
		$ah = Boot::shiftRightUnsigned($a->low, 16);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:289: characters 3-44
		$bl = $b->low & $mask;
		$bh = Boot::shiftRightUnsigned($b->low, 16);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:290: characters 3-21
		$p00 = Int32_Impl_::mul($al, $bl);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:291: characters 3-21
		$p10 = Int32_Impl_::mul($ah, $bl);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:292: characters 3-21
		$p01 = Int32_Impl_::mul($al, $bh);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:293: characters 3-21
		$p11 = Int32_Impl_::mul($ah, $bh);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:294: characters 3-17
		$low = $p00;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:295: characters 3-48
		$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:296: characters 3-13
		$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:297: characters 3-13
		$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:298: lines 298-299
		if (Int32_Impl_::ucompare($low, $p01) < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:299: characters 4-10
			$ret = $high++;
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:300: characters 3-13
		$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:301: characters 3-13
		$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:302: lines 302-303
		if (Int32_Impl_::ucompare($low, $p10) < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:303: characters 4-10
			$ret1 = $high++;
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:304: characters 3-42
		$high = (($high + (((Int32_Impl_::mul($a->low, $b->high) + Int32_Impl_::mul($a->high, $b->low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:305: characters 10-25
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function mulInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:309: characters 17-18
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:309: characters 10-19
		$mask = 65535;
		$al = $a->low & $mask;
		$ah = Boot::shiftRightUnsigned($a->low, 16);
		$bl = $b_low & $mask;
		$bh = Boot::shiftRightUnsigned($b_low, 16);
		$p00 = Int32_Impl_::mul($al, $bl);
		$p10 = Int32_Impl_::mul($ah, $bl);
		$p01 = Int32_Impl_::mul($al, $bh);
		$p11 = Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:296: characters 3-6
		$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:297: characters 3-6
		$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:309: characters 10-19
		if (Int32_Impl_::ucompare($low, $p01) < 0) {
			$ret = $high++;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:299: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:300: characters 3-6
		$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:301: characters 3-6
		$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:309: characters 10-19
		if (Int32_Impl_::ucompare($low, $p10) < 0) {
			$ret1 = $high++;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:303: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:309: characters 10-19
		$high = (($high + (((Int32_Impl_::mul($a->low, $b_high) + Int32_Impl_::mul($a->high, $b_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * Returns the negative of `x`.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return ___Int64
	 */
	public static function neg ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:216: characters 3-22
		$high = (~$x->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:217: characters 3-20
		$low = ((~$x->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:218: lines 218-219
		if ($low === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-10
			$ret = $high++;
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:220: characters 10-25
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * Returns `true` if `a` is not equal to `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return bool
	 */
	public static function neq ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:348: characters 10-44
		if (!($a->high !== $b->high)) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:348: characters 30-44
			return $a->low !== $b->low;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:348: characters 10-44
			return true;
		}
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function neqInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:351: characters 17-18
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:351: characters 10-19
		if (!($a->high !== $b_high)) {
			return $a->low !== $b_low;
		} else {
			return true;
		}
	}

	/**
	 * Returns an Int64 with the value of the Int `x`.
	 * `x` is sign-extended to fill 64 bits.
	 * 
	 * @param int $x
	 * 
	 * @return ___Int64
	 */
	public static function ofInt ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:55: characters 69-85
		$this1 = new ___Int64($x >> 31, $x);
		return $this1;
	}

	/**
	 * Returns the bitwise OR of `a` and `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function or ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:405: characters 10-46
		$this1 = new ___Int64((($a->high | $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($a->low | $b->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
		return $this1;
	}

	/**
	 * @param string $sParam
	 * 
	 * @return ___Int64
	 */
	public static function parseString ($sParam) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:154: characters 3-41
		return Int64Helper::parseString($sParam);
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return ___Int64
	 */
	public static function postDecrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:246: characters 3-18
		$ret = $this1;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:247: characters 3-17
		$this2 = new ___Int64($this1->high, $this1->low);
		$this1 = $this2;
		if ($this1->low === 0) {
			$ret1 = $this1->high--;
			$this1->high = ($this1->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		$ret2 = $this1->low--;
		$this1->low = ($this1->low << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;


		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:248: characters 3-13
		return $ret;
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return ___Int64
	 */
	public static function postIncrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:232: characters 3-18
		$ret = $this1;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:233: characters 3-17
		$this2 = new ___Int64($this1->high, $this1->low);
		$this1 = $this2;
		$ret1 = $this1->low++;
		$this1->low = ($this1->low << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;

		if ($this1->low === 0) {
			$ret2 = $this1->high++;
			$this1->high = ($this1->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}

		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:234: characters 3-13
		return $ret;
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return ___Int64
	 */
	public static function preDecrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:238: characters 10-16
		$this2 = new ___Int64($this1->high, $this1->low);
		$this1 = $this2;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:239: lines 239-240
		if ($this1->low === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:240: characters 4-15
			$ret = $this1->high--;
			$this1->high = ($this1->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:241: characters 3-13
		$ret1 = $this1->low--;
		$this1->low = ($this1->low << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;

		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:242: characters 3-19
		return $this1;
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return ___Int64
	 */
	public static function preIncrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:224: characters 10-16
		$this2 = new ___Int64($this1->high, $this1->low);
		$this1 = $this2;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:225: characters 3-13
		$ret = $this1->low++;
		$this1->low = ($this1->low << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;

		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:226: lines 226-227
		if ($this1->low === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:227: characters 4-15
			$ret1 = $this1->high++;
			$this1->high = ($this1->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:228: characters 3-19
		return $this1;
	}

	/**
	 * @param ___Int64 $this
	 * @param int $x
	 * 
	 * @return int
	 */
	public static function set_high ($this1, $x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:445: characters 3-23
		return $this1->high = $x;
	}

	/**
	 * @param ___Int64 $this
	 * @param int $x
	 * 
	 * @return int
	 */
	public static function set_low ($this1, $x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:453: characters 3-22
		return $this1->low = $x;
	}

	/**
	 * Returns `a` left-shifted by `b` bits.
	 * 
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function shl ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:417: characters 3-10
		$b &= 63;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:418: characters 10-134
		if ($b === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:418: characters 22-30
			$this1 = new ___Int64($a->high, $a->low);
			return $this1;
		} else if ($b < 32) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:418: characters 48-102
			$this2 = new ___Int64((((($a->high << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($a->low, (32 - $b))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, ($a->low << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			return $this2;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:418: characters 108-134
			$this3 = new ___Int64(($a->low << ($b - 32) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, 0);
			return $this3;
		}
	}

	/**
	 * Returns `a` right-shifted by `b` bits in signed mode.
	 * `a` is sign-extended.
	 * 
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function shr ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:426: characters 3-10
		$b &= 63;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:427: characters 10-148
		if ($b === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:427: characters 22-30
			$this1 = new ___Int64($a->high, $a->low);
			return $this1;
		} else if ($b < 32) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:427: characters 48-103
			$this2 = new ___Int64((($a->high >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (((($a->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($a->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			return $this2;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:427: characters 110-148
			$this3 = new ___Int64((($a->high >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($a->high >> ($b - 32)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			return $this3;
		}
	}

	/**
	 * Returns `a` minus `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function sub ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:269: characters 3-30
		$high = (($a->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:270: characters 3-27
		$low = (($a->low - $b->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:271: lines 271-272
		if (Int32_Impl_::ucompare($a->low, $b->low) < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:272: characters 4-10
			$ret = $high--;
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:273: characters 10-25
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function subInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:277: characters 17-18
		$b_high = $b >> 31;
		$b_low = $b;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:277: characters 10-19
		$high = (($a->high - $b_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$low = (($a->low - $b_low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		if (Int32_Impl_::ucompare($a->low, $b_low) < 0) {
			$ret = $high--;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:272: characters 4-8
			$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:277: characters 10-19
		$this1 = new ___Int64($high, $low);
		return $this1;
	}

	/**
	 * Returns an Int with the value of the Int64 `x`.
	 * Throws an exception  if `x` cannot be represented in 32 bits.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return int
	 */
	public static function toInt ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:62: lines 62-63
		if ($x->high !== ((($x->low >> 31) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:63: characters 4-9
			throw new HxException("Overflow");
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:65: characters 3-15
		return $x->low;
	}

	/**
	 * Returns a signed decimal `String` representation of `x`.
	 * 
	 * @param ___Int64 $x
	 * 
	 * @return string
	 */
	public static function toStr ($x) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:125: characters 3-22
		return Int64_Impl_::toString($x);
	}

	/**
	 * @param ___Int64 $this
	 * 
	 * @return string
	 */
	public static function toString ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:128: characters 3-27
		$i = $this1;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:129: characters 7-13
		$b_high = 0;
		$b_low = 0;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:129: lines 129-130
		if (($i->high === $b_high) && ($i->low === $b_low)) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:130: characters 4-14
			return "0";
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:131: characters 3-16
		$str = "";
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:132: characters 3-19
		$neg = false;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:133: lines 133-136
		if ($i->high < 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:134: characters 4-7
			$neg = true;
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:137: characters 3-22
		$this2 = new ___Int64(0, 10);
		$ten = $this2;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:138: lines 138-147
		while (true) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:138: characters 10-16
			$b_high1 = 0;
			$b_low1 = 0;
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:138: lines 138-147
			if (!(($i->high !== $b_high1) || ($i->low !== $b_low1))) {
				break;
			}
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:139: characters 4-26
			$r = Int64_Impl_::divMod($i, $ten);
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:140: lines 140-146
			if ($r->modulus->high < 0) {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:141: characters 11-31
				$x = $r->modulus;
				$high = (~$x->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				$low = ((~$x->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				if ($low === 0) {
					$ret = $high++;
					#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-8
					$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				}
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:141: characters 11-31
				$this_high = $high;
				$this_low = $low;
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:141: characters 5-8
				$str = ($this_low??'null') . ($str??'null');
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:142: characters 9-30
				$x1 = $r->quotient;
				$high1 = (~$x1->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				$low1 = ((~$x1->low + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				if ($low1 === 0) {
					$ret1 = $high1++;
					#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:219: characters 4-8
					$high1 = ($high1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				}
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:142: characters 9-30
				$this3 = new ___Int64($high1, $low1);
				$i = $this3;
			} else {
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:144: characters 5-8
				$str = ($r->modulus->low??'null') . ($str??'null');
				#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:145: characters 5-6
				$i = $r->quotient;
			}
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:148: lines 148-149
		if ($neg) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:149: characters 4-7
			$str = "-" . ($str??'null');
		}
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:150: characters 3-13
		return $str;
	}

	/**
	 * Compares `a` and `b` in unsigned mode.
	 * Returns a negative value if `a < b`, positive if `a > b`,
	 * or 0 if `a == b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return int
	 */
	public static function ucompare ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:117: characters 3-42
		$v = Int32_Impl_::ucompare($a->high, $b->high);
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:118: characters 10-57
		if ($v !== 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:118: characters 22-23
			return $v;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:118: characters 29-57
			return Int32_Impl_::ucompare($a->low, $b->low);
		}
	}

	/**
	 * Returns `a` right-shifted by `b` bits in unsigned mode.
	 * `a` is padded with zeroes.
	 * 
	 * @param ___Int64 $a
	 * @param int $b
	 * 
	 * @return ___Int64
	 */
	public static function ushr ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:435: characters 3-10
		$b &= 63;
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:436: characters 10-139
		if ($b === 0) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:436: characters 22-30
			$this1 = new ___Int64($a->high, $a->low);
			return $this1;
		} else if ($b < 32) {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:436: characters 48-104
			$this2 = new ___Int64(Boot::shiftRightUnsigned($a->high, $b), (((($a->high << (32 - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($a->low, $b)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
			return $this2;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:436: characters 111-139
			$this3 = new ___Int64(0, Boot::shiftRightUnsigned($a->high, ($b - 32)));
			return $this3;
		}
	}

	/**
	 * Returns the bitwise XOR of `a` and `b`.
	 * 
	 * @param ___Int64 $a
	 * @param ___Int64 $b
	 * 
	 * @return ___Int64
	 */
	public static function xor ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/haxe/Int64.hx:411: characters 10-46
		$this1 = new ___Int64((($a->high ^ $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, (($a->low ^ $b->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
		return $this1;
	}
}

Boot::registerClass(Int64_Impl_::class, 'haxe._Int64.Int64_Impl_');
Boot::registerGetters('helder\\std\\haxe\\_Int64\\Int64_Impl_', [
	'low' => true,
	'high' => true
]);
