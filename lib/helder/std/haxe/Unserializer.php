<?php
/**
 * Generated by Haxe 4.0.0+ef18b627e
 */

namespace helder\std\haxe;

use \helder\std\Reflect;
use \helder\std\php\_Boot\HxAnon;
use \helder\std\StringTools;
use \helder\std\php\Boot;
use \helder\std\haxe\ds\ObjectMap;
use \helder\std\Array_hx;
use \helder\std\haxe\_Unserializer\NullResolver;
use \helder\std\haxe\_Unserializer\DefaultResolver;
use \helder\std\Date;
use \helder\std\Std;
use \helder\std\haxe\ds\IntMap;
use \helder\std\Type;
use \helder\std\Math;
use \helder\std\haxe\ds\List_hx;
use \helder\std\haxe\ds\StringMap;
use \helder\std\php\_Boot\HxException;
use \helder\std\haxe\io\Bytes;

/**
 * The `Unserializer` class is the complement to the `Serializer` class. It parses
 * a serialization `String` and creates objects from the contained data.
 * This class can be used in two ways:
 * - create a `new Unserializer()` instance with a given serialization
 * String, then call its `unserialize()` method until all values are
 * extracted
 * - call `Unserializer.run()`  to unserialize a single value from a given
 * String
 * The specification of the serialization format can be found here:
 * <https://haxe.org/manual/serialization/format>
 */
class Unserializer {
	/**
	 * @var string
	 */
	static public $BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
	/**
	 * @var Array_hx
	 */
	static public $CODES = null;
	/**
	 * @var object
	 * This value can be set to use custom type resolvers.
	 * A type resolver finds a `Class` or `Enum` instance from a given `String`.
	 * By default, the Haxe `Type` Api is used.
	 * A type resolver must provide two methods:
	 * 1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
	 * `Class` from a class name
	 * 2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
	 * `Enum` from an enum name
	 * This value is applied when a new `Unserializer` instance is created.
	 * Changing it afterwards has no effect on previously created instances.
	 */
	static public $DEFAULT_RESOLVER;

	/**
	 * @var string
	 */
	public $buf;
	/**
	 * @var Array_hx
	 */
	public $cache;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var int
	 */
	public $pos;
	/**
	 * @var object
	 */
	public $resolver;
	/**
	 * @var Array_hx
	 */
	public $scache;

	/**
	 * @return Array_hx
	 */
	static public function initCodes () {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:73: characters 3-72
		$codes = new Array_hx();
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:74: lines 74-75
		$_g = 0;
		$_g1 = mb_strlen(Unserializer::$BASE64);
		while ($_g < $_g1) {
			$i = $_g++;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:75: characters 4-48
			$codes->offsetSet(StringTools::fastCodeAt(Unserializer::$BASE64, $i), $i);
		}

		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:76: characters 3-15
		return $codes;
	}

	/**
	 * Unserializes `v` and returns the according value.
	 * This is a convenience function for creating a new instance of
	 * Unserializer with `v` as buffer and calling its `unserialize()` method
	 * once.
	 * 
	 * @param string $v
	 * 
	 * @return mixed
	 */
	static public function run ($v) {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:462: characters 3-43
		return (new Unserializer($v))->unserialize();
	}

	/**
	 * Creates a new Unserializer instance, with its internal buffer
	 * initialized to `buf`.
	 * This does not parse `buf` immediately. It is parsed only when calls to
	 * `this.unserialize` are made.
	 * Each Unserializer instance maintains its own cache.
	 * 
	 * @param string $buf
	 * 
	 * @return void
	 */
	public function __construct ($buf) {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:100: characters 3-17
		$this->buf = $buf;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:101: characters 3-22
		$this->length = mb_strlen($buf);
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:102: characters 3-10
		$this->pos = 0;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:106: characters 3-23
		$this->scache = new Array_hx();
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:107: characters 3-22
		$this->cache = new Array_hx();
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:108: characters 3-28
		$r = Unserializer::$DEFAULT_RESOLVER;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:109: lines 109-112
		if ($r === null) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:110: characters 4-29
			$r = new DefaultResolver();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:111: characters 4-24
			Unserializer::$DEFAULT_RESOLVER = $r;
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:113: characters 3-15
		$this->resolver = $r;
	}

	/**
	 * @param int $p
	 * 
	 * @return int
	 */
	public function get ($p) {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:141: characters 3-40
		return StringTools::fastCodeAt($this->buf, $p);
	}

	/**
	 * Gets the type resolver of `this` Unserializer instance.
	 * See `DEFAULT_RESOLVER` for more information on type resolvers.
	 * 
	 * @return object
	 */
	public function getResolver () {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:137: characters 3-18
		return $this->resolver;
	}

	/**
	 * @return int
	 */
	public function readDigits () {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:145: characters 3-13
		$k = 0;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:146: characters 3-17
		$s = false;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:147: characters 3-18
		$fpos = $this->pos;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:148: lines 148-163
		while (true) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:149: characters 4-21
			$c = StringTools::fastCodeAt($this->buf, $this->pos);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:150: lines 150-151
			if ($c === 0) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:151: characters 5-10
				break;
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:152: lines 152-158
			if ($c === 45) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:153: lines 153-154
				if ($this->pos !== $fpos) {
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:154: characters 6-11
					break;
				}
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:155: characters 5-13
				$s = true;
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:156: characters 5-10
				$this->pos++;
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:157: characters 5-13
				continue;
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:159: lines 159-160
			if (($c < 48) || ($c > 57)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:160: characters 5-10
				break;
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:161: characters 4-31
			$k = $k * 10 + ($c - 48);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:162: characters 4-9
			$this->pos++;
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:164: lines 164-165
		if ($s) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:165: characters 4-11
			$k *= -1;
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:166: characters 3-11
		return $k;
	}

	/**
	 * @return float
	 */
	public function readFloat () {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:170: characters 3-16
		$p1 = $this->pos;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:171: lines 171-180
		while (true) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:172: characters 4-21
			$c = StringTools::fastCodeAt($this->buf, $this->pos);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:173: lines 173-174
			if ($c === 0) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:174: characters 5-10
				break;
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:176: lines 176-179
			if ((($c >= 43) && ($c < 58)) || ($c === 101) || ($c === 69)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:177: characters 5-10
				$this->pos++;
			} else {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:179: characters 5-10
				break;
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:181: characters 3-50
		return Std::parseFloat(mb_substr($this->buf, $p1, $this->pos - $p1));
	}

	/**
	 * Sets the type resolver of `this` Unserializer instance to `r`.
	 * If `r` is `null`, a special resolver is used which returns `null` for all
	 * input values.
	 * See `DEFAULT_RESOLVER` for more information on type resolvers.
	 * 
	 * @param object $r
	 * 
	 * @return void
	 */
	public function setResolver ($r) {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:125: lines 125-128
		if ($r === null) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:126: characters 15-36
			if (NullResolver::$instance === null) {
				NullResolver::$instance = new NullResolver();
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:126: characters 4-36
			$this->resolver = NullResolver::$instance;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:128: characters 4-16
			$this->resolver = $r;
		}
	}

	/**
	 * Unserializes the next part of `this` Unserializer instance and returns
	 * the according value.
	 * This function may call `this.resolver.resolveClass` to determine a
	 * Class from a String, and `this.resolver.resolveEnum` to determine an
	 * Enum from a String.
	 * If `this` Unserializer instance contains no more or invalid data, an
	 * exception is thrown.
	 * This operation may fail on structurally valid data if a type cannot be
	 * resolved or if a field cannot be set. This can happen when unserializing
	 * Strings that were serialized on a different Haxe target, in which the
	 * serialization side has to make sure not to include platform-specific
	 * data.
	 * Classes are created from `Type.createEmptyInstance`, which means their
	 * constructors are not called.
	 * 
	 * @return mixed
	 */
	public function unserialize () {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:232: characters 11-21
		$__hx__switch = (StringTools::fastCodeAt($this->buf, $this->pos++));
		if ($__hx__switch === 65) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:437: characters 5-30
			$name = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:438: characters 5-42
			$cl = $this->resolver->resolveClass($name);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:439: lines 439-440
			if ($cl === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:440: characters 6-11
				throw new HxException("Class not found " . ($name??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:441: characters 5-14
			return $cl;
		} else if ($__hx__switch === 66) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:443: characters 5-30
			$name1 = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:444: characters 5-40
			$e = $this->resolver->resolveEnum($name1);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:445: lines 445-446
			if ($e === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:446: characters 6-11
				throw new HxException("Enum not found " . ($name1??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:447: characters 5-13
			return $e;
		} else if ($__hx__switch === 67) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:426: characters 5-30
			$name2 = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:427: characters 5-42
			$cl1 = $this->resolver->resolveClass($name2);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:428: lines 428-429
			if ($cl1 === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:429: characters 6-11
				throw new HxException("Class not found " . ($name2??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:430: characters 5-50
			$o = Type::createEmptyInstance($cl1);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:431: characters 5-18
			$_this = $this->cache;
			$_this->arr[$_this->length] = $o;
			++$_this->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:432: characters 5-26
			$o->hxUnserialize($this);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:433: lines 433-434
			if (StringTools::fastCodeAt($this->buf, $this->pos++) !== 103) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:434: characters 6-11
				throw new HxException("Invalid custom data");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:435: characters 5-13
			return $o;
		} else if ($__hx__switch === 77) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:364: characters 5-37
			$h = new ObjectMap();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:365: characters 5-18
			$_this1 = $this->cache;
			$_this1->arr[$_this1->length] = $h;
			++$_this1->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:366: characters 5-19
			$buf = $this->buf;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:367: lines 367-370
			while (StringTools::fastCodeAt($this->buf, $this->pos) !== 104) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:368: characters 6-28
				$s = $this->unserialize();
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:369: characters 6-29
				$h->set($s, $this->unserialize());
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:371: characters 5-10
			$this->pos++;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:372: characters 5-13
			return $h;
		} else if ($__hx__switch === 82) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:296: characters 5-26
			$n = $this->readDigits();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:297: lines 297-298
			if (($n < 0) || ($n >= $this->scache->length)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:298: characters 6-11
				throw new HxException("Invalid string reference");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:299: characters 5-21
			return ($this->scache->arr[$n] ?? null);
		} else if ($__hx__switch === 97) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:261: characters 5-19
			$buf1 = $this->buf;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:262: characters 5-34
			$a = new Array_hx();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:266: characters 5-18
			$_this2 = $this->cache;
			$_this2->arr[$_this2->length] = $a;
			++$_this2->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:267: lines 267-279
			while (true) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:268: characters 6-23
				$c = StringTools::fastCodeAt($this->buf, $this->pos);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:269: lines 269-272
				if ($c === 104) {
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:270: characters 7-12
					$this->pos++;
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:271: characters 7-12
					break;
				}
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:273: lines 273-278
				if ($c === 117) {
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:274: characters 7-12
					$this->pos++;
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:275: characters 7-28
					$n1 = $this->readDigits();
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:276: characters 7-33
					$a->offsetSet($a->length + $n1 - 1, null);
				} else {
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:278: characters 7-28
					$x = $this->unserialize();
					$a->arr[$a->length] = $x;
					++$a->length;
				}
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:283: characters 5-13
			return $a;
		} else if ($__hx__switch === 98) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:341: characters 5-37
			$h1 = new StringMap();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:342: characters 5-18
			$_this3 = $this->cache;
			$_this3->arr[$_this3->length] = $h1;
			++$_this3->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:343: characters 5-19
			$buf2 = $this->buf;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:344: lines 344-347
			while (StringTools::fastCodeAt($this->buf, $this->pos) !== 104) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:345: characters 6-28
				$s1 = $this->unserialize();
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:346: characters 6-29
				$value = $this->unserialize();
				$h1->data[$s1] = $value;

			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:348: characters 5-10
			$this->pos++;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:349: characters 5-13
			return $h1;
		} else if ($__hx__switch === 99) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:303: characters 5-30
			$name3 = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:304: characters 5-42
			$cl2 = $this->resolver->resolveClass($name3);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:305: lines 305-306
			if ($cl2 === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:306: characters 6-11
				throw new HxException("Class not found " . ($name3??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:307: characters 5-42
			$o1 = Type::createEmptyInstance($cl2);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:308: characters 5-18
			$_this4 = $this->cache;
			$_this4->arr[$_this4->length] = $o1;
			++$_this4->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:309: characters 5-25
			$this->unserializeObject($o1);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:310: characters 5-13
			return $o1;
		} else if ($__hx__switch === 100) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:244: characters 5-23
			return $this->readFloat();
		} else if ($__hx__switch === 102) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:238: characters 5-17
			return false;
		} else if ($__hx__switch === 105) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:242: characters 5-24
			return $this->readDigits();
		} else if ($__hx__switch === 106) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:320: characters 5-30
			$name4 = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:321: characters 5-44
			$edecl = $this->resolver->resolveEnum($name4);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:322: lines 322-323
			if ($edecl === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:323: characters 6-11
				throw new HxException("Enum not found " . ($name4??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:324: characters 5-10
			$this->pos++;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:325: characters 5-30
			$index = $this->readDigits();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:326: characters 5-52
			$tag = (Type::getEnumConstructs($edecl)->arr[$index] ?? null);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:327: lines 327-328
			if ($tag === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:328: characters 6-11
				throw new HxException("Unknown enum index " . ($name4??'null') . "@" . ($index??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:329: characters 5-41
			$e1 = $this->unserializeEnum($edecl, $tag);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:330: characters 5-18
			$_this5 = $this->cache;
			$_this5->arr[$_this5->length] = $e1;
			++$_this5->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:331: characters 5-13
			return $e1;
		} else if ($__hx__switch === 107) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:255: characters 5-20
			return Math::$NaN;
		} else if ($__hx__switch === 108) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:333: characters 5-24
			$l = new List_hx();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:334: characters 5-18
			$_this6 = $this->cache;
			$_this6->arr[$_this6->length] = $l;
			++$_this6->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:335: characters 5-19
			$buf3 = $this->buf;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:336: lines 336-337
			while (StringTools::fastCodeAt($this->buf, $this->pos) !== 104) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:337: characters 6-26
				$l->add($this->unserialize());
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:338: characters 5-10
			$this->pos++;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:339: characters 5-13
			return $l;
		} else if ($__hx__switch === 109) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:257: characters 5-34
			return Math::$NEGATIVE_INFINITY;
		} else if ($__hx__switch === 110) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:234: characters 5-16
			return null;
		} else if ($__hx__switch === 111) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:286: characters 5-16
			$o2 = new HxAnon();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:287: characters 5-18
			$_this7 = $this->cache;
			$_this7->arr[$_this7->length] = $o2;
			++$_this7->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:288: characters 5-25
			$this->unserializeObject($o2);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:289: characters 5-13
			return $o2;
		} else if ($__hx__switch === 112) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:259: characters 5-34
			return Math::$POSITIVE_INFINITY;
		} else if ($__hx__switch === 113) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:351: characters 5-34
			$h2 = new IntMap();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:352: characters 5-18
			$_this8 = $this->cache;
			$_this8->arr[$_this8->length] = $h2;
			++$_this8->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:353: characters 5-19
			$buf4 = $this->buf;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:354: characters 5-24
			$c1 = StringTools::fastCodeAt($this->buf, $this->pos++);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:355: lines 355-359
			while ($c1 === 58) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:356: characters 6-27
				$i = $this->readDigits();
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:357: characters 6-29
				$value1 = $this->unserialize();
				$h2->data[$i] = $value1;

				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:358: characters 10-20
				$c1 = StringTools::fastCodeAt($this->buf, $this->pos++);
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:360: lines 360-361
			if ($c1 !== 104) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:361: characters 6-11
				throw new HxException("Invalid IntMap format");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:362: characters 5-13
			return $h2;
		} else if ($__hx__switch === 114) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:291: characters 5-26
			$n2 = $this->readDigits();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:292: lines 292-293
			if (($n2 < 0) || ($n2 >= $this->cache->length)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:293: characters 6-11
				throw new HxException("Invalid reference");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:294: characters 5-20
			return ($this->cache->arr[$n2] ?? null);
		} else if ($__hx__switch === 115) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:385: characters 5-28
			$len = $this->readDigits();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:386: characters 5-19
			$buf5 = $this->buf;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:387: lines 387-388
			if ((StringTools::fastCodeAt($this->buf, $this->pos++) !== 58) || (($this->length - $this->pos) < $len)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:388: characters 6-11
				throw new HxException("Invalid bytes length");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:392: characters 5-23
			$codes = Unserializer::$CODES;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:393: lines 393-396
			if ($codes === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:394: characters 6-25
				$codes = Unserializer::initCodes();
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:395: characters 6-19
				Unserializer::$CODES = $codes;
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:397: characters 5-17
			$i1 = $this->pos;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:398: characters 5-24
			$rest = $len & 3;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:399: characters 5-62
			$size = ($len >> 2) * 3 + (($rest >= 2 ? $rest - 1 : 0));
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:400: characters 5-32
			$max = $i1 + ($len - $rest);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:401: characters 5-43
			$bytes = Bytes::alloc($size);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:402: characters 5-18
			$bpos = 0;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:403: lines 403-411
			while ($i1 < $max) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:404: characters 6-55
				$c11 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:405: characters 6-55
				$c2 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:406: characters 6-46
				$this1 = $bytes->b;
				$this1->s = substr_replace($this1->s, chr(($c11 << 2) | ($c2 >> 4)), $bpos++, 1);

				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:407: characters 6-55
				$c3 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:408: characters 6-46
				$this2 = $bytes->b;
				$this2->s = substr_replace($this2->s, chr(($c2 << 4) | ($c3 >> 2)), $bpos++, 1);

				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:409: characters 6-55
				$c4 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:410: characters 6-39
				$this3 = $bytes->b;
				$this3->s = substr_replace($this3->s, chr(($c3 << 6) | $c4), $bpos++, 1);

			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:412: lines 412-420
			if ($rest >= 2) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:413: characters 6-55
				$c12 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:414: characters 6-55
				$c21 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:415: characters 6-46
				$this4 = $bytes->b;
				$this4->s = substr_replace($this4->s, chr(($c12 << 2) | ($c21 >> 4)), $bpos++, 1);

				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:416: lines 416-419
				if ($rest === 3) {
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:417: characters 7-56
					$c31 = ($codes->arr[StringTools::fastCodeAt($buf5, $i1++)] ?? null);
					#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:418: characters 7-47
					$this5 = $bytes->b;
					$this5->s = substr_replace($this5->s, chr(($c21 << 4) | ($c31 >> 2)), $bpos++, 1);

				}
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:422: characters 5-15
			$this->pos += $len;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:423: characters 5-22
			$_this9 = $this->cache;
			$_this9->arr[$_this9->length] = $bytes;
			++$_this9->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:424: characters 5-17
			return $bytes;
		} else if ($__hx__switch === 116) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:236: characters 5-16
			return true;
		} else if ($__hx__switch === 118) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:374: characters 5-11
			$d = null;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:375: lines 375-381
			if ((StringTools::fastCodeAt($this->buf, $this->pos) >= 48) && (StringTools::fastCodeAt($this->buf, $this->pos) <= 57) && (StringTools::fastCodeAt($this->buf, $this->pos + 1) >= 48) && (StringTools::fastCodeAt($this->buf, $this->pos + 1) <= 57) && (StringTools::fastCodeAt($this->buf, $this->pos + 2) >= 48) && (StringTools::fastCodeAt($this->buf, $this->pos + 2) <= 57) && (StringTools::fastCodeAt($this->buf, $this->pos + 3) >= 48) && (StringTools::fastCodeAt($this->buf, $this->pos + 3) <= 57) && (StringTools::fastCodeAt($this->buf, $this->pos + 4) === 45)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:378: characters 6-46
				$d = Date::fromString(mb_substr($this->buf, $this->pos, 19));
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:379: characters 6-15
				$this->pos += 19;
			} else {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:381: characters 6-36
				$d = Date::fromTime($this->readFloat());
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:382: characters 5-18
			$_this10 = $this->cache;
			$_this10->arr[$_this10->length] = $d;
			++$_this10->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:383: characters 5-13
			return $d;
		} else if ($__hx__switch === 119) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:312: characters 5-30
			$name5 = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:313: characters 5-44
			$edecl1 = $this->resolver->resolveEnum($name5);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:314: lines 314-315
			if ($edecl1 === null) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:315: characters 6-11
				throw new HxException("Enum not found " . ($name5??'null'));
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:316: characters 5-51
			$e2 = $this->unserializeEnum($edecl1, $this->unserialize());
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:317: characters 5-18
			$_this11 = $this->cache;
			$_this11->arr[$_this11->length] = $e2;
			++$_this11->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:318: characters 5-13
			return $e2;
		} else if ($__hx__switch === 120) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:301: characters 5-10
			throw (is_object($__hx__throw = $this->unserialize()) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		} else if ($__hx__switch === 121) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:246: characters 5-28
			$len1 = $this->readDigits();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:247: lines 247-248
			if ((StringTools::fastCodeAt($this->buf, $this->pos++) !== 58) || (($this->length - $this->pos) < $len1)) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:248: characters 6-11
				throw new HxException("Invalid string length");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:249: characters 5-34
			$s2 = mb_substr($this->buf, $this->pos, $len1);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:250: characters 5-15
			$this->pos += $len1;
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:251: characters 5-33
			$s2 = urldecode($s2);
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:252: characters 5-19
			$_this12 = $this->scache;
			$_this12->arr[$_this12->length] = $s2;
			++$_this12->length;

			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:253: characters 5-13
			return $s2;
		} else if ($__hx__switch === 122) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:240: characters 5-13
			return 0;
		} else {
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:450: characters 3-8
		$this->pos--;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:451: characters 27-42
		$index1 = $this->pos;
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:451: characters 3-8
		throw new HxException("Invalid char " . ((($index1 < 0 ? "" : mb_substr($this->buf, $index1, 1)))??'null') . " at position " . ($this->pos??'null'));
	}

	/**
	 * @param Enum $edecl
	 * @param string $tag
	 * 
	 * @return mixed
	 */
	public function unserializeEnum ($edecl, $tag) {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:200: lines 200-201
		if (StringTools::fastCodeAt($this->buf, $this->pos++) !== 58) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:201: characters 4-9
			throw new HxException("Invalid enum format");
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:202: characters 3-28
		$nargs = $this->readDigits();
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:203: lines 203-204
		if ($nargs === 0) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:204: characters 4-38
			return Type::createEnum($edecl, $tag);
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:205: characters 3-26
		$args = new Array_hx();
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:206: lines 206-207
		while ($nargs-- > 0) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:207: characters 4-28
			$x = $this->unserialize();
			$args->arr[$args->length] = $x;
			++$args->length;
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:208: characters 3-43
		return Type::createEnum($edecl, $tag, $args);
	}

	/**
	 * @param object $o
	 * 
	 * @return void
	 */
	public function unserializeObject ($o) {
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:185: lines 185-195
		while (true) {
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:186: lines 186-187
			if ($this->pos >= $this->length) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:187: characters 5-10
				throw new HxException("Invalid object");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:188: lines 188-189
			if (StringTools::fastCodeAt($this->buf, $this->pos) === 103) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:189: characters 5-10
				break;
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:190: characters 4-34
			$k = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:191: lines 191-192
			if (!Boot::is($k, Boot::getClass('String'))) {
				#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:192: characters 5-10
				throw new HxException("Invalid object key");
			}
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:193: characters 4-26
			$v = $this->unserialize();
			#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:194: characters 4-29
			Reflect::setField($o, $k, $v);
		}
		#/home/runner/haxe/versions/4.0.0/std/haxe/Unserializer.hx:196: characters 3-8
		$this->pos++;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$DEFAULT_RESOLVER = new DefaultResolver();
	}
}

Boot::registerClass(Unserializer::class, 'haxe.Unserializer');
Unserializer::__hx__init();
