<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace helder\std\haxe\iterators;

use \helder\std\php\_Boot\HxAnon;
use \helder\std\php\Boot;
use \helder\std\Array_hx;

class ArrayKeyValueIterator {
	/**
	 * @var Array_hx
	 */
	public $array;
	/**
	 * @var int
	 */
	public $current;

	/**
	 * @param Array_hx $array
	 * 
	 * @return void
	 */
	public function __construct ($array) {
		#/home/runner/haxe/versions/4.1.5/std/haxe/iterators/ArrayKeyValueIterator.hx:27: characters 20-21
		$this->current = 0;
		#/home/runner/haxe/versions/4.1.5/std/haxe/iterators/ArrayKeyValueIterator.hx:32: characters 3-21
		$this->array = $array;
	}

	/**
	 * @return bool
	 */
	public function hasNext () {
		#/home/runner/haxe/versions/4.1.5/std/haxe/iterators/ArrayKeyValueIterator.hx:37: characters 3-32
		return $this->current < $this->array->length;
	}

	/**
	 * @return object
	 */
	public function next () {
		#/home/runner/haxe/versions/4.1.5/std/haxe/iterators/ArrayKeyValueIterator.hx:42: characters 17-31
		$tmp = ($this->array->arr[$this->current] ?? null);
		#/home/runner/haxe/versions/4.1.5/std/haxe/iterators/ArrayKeyValueIterator.hx:42: characters 3-47
		return new HxAnon([
			"value" => $tmp,
			"key" => $this->current++,
		]);
	}
}

Boot::registerClass(ArrayKeyValueIterator::class, 'haxe.iterators.ArrayKeyValueIterator');
