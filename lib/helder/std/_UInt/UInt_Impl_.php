<?php
/**
 * Generated by Haxe 4.0.5
 */

namespace helder\std\_UInt;

use \helder\std\php\Boot;
use \helder\std\Std;

final class UInt_Impl_ {
	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function add ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:135: characters 3-31
		return $a + $b;
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return float
	 */
	public static function addWithFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:201: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:201: characters 3-25
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) + $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function and ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:173: characters 3-31
		return $a & $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return float
	 */
	public static function div ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:139: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:139: characters 24-35
		$int1 = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:139: characters 3-35
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) / (($int1 < 0 ? 4294967296.0 + $int1 : $int1 + 0.0));
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return float
	 */
	public static function divFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:209: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:209: characters 3-25
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) / $b;
	}

	/**
	 * @param int $a
	 * @param mixed $b
	 * 
	 * @return bool
	 */
	public static function equalsFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:237: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:237: characters 3-26
		return Boot::equal((($int < 0 ? 4294967296.0 + $int : $int + 0.0)), $b);
	}

	/**
	 * @param int $a
	 * @param mixed $b
	 * 
	 * @return bool
	 */
	public static function equalsInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:229: characters 3-24
		return Boot::equal($a, $b);
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return float
	 */
	public static function floatDiv ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:213: characters 14-25
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:213: characters 3-25
		return $a / (($int < 0 ? 4294967296.0 + $int : $int + 0.0));
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function floatGt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:249: characters 14-25
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:249: characters 3-25
		return $a > (($int < 0 ? 4294967296.0 + $int : $int + 0.0));
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function floatGte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:253: characters 15-26
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:253: characters 3-26
		return $a >= (($int < 0 ? 4294967296.0 + $int : $int + 0.0));
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function floatLt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:265: characters 14-25
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:265: characters 3-25
		return $a < (($int < 0 ? 4294967296.0 + $int : $int + 0.0));
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function floatLte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:269: characters 15-26
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:269: characters 3-26
		return $a <= (($int < 0 ? 4294967296.0 + $int : $int + 0.0));
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return float
	 */
	public static function floatMod ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:277: characters 14-25
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:277: characters 3-25
		return fmod($a, (($int < 0 ? 4294967296.0 + $int : $int + 0.0)));
	}

	/**
	 * @param float $a
	 * @param int $b
	 * 
	 * @return float
	 */
	public static function floatSub ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:221: characters 14-25
		$int = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:221: characters 3-25
		return $a - (($int < 0 ? 4294967296.0 + $int : $int + 0.0));
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function gt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:152: characters 3-28
		$aNeg = $a < 0;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:153: characters 3-28
		$bNeg = $b < 0;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:154: characters 10-60
		if ($aNeg !== $bNeg) {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:154: characters 28-32
			return $aNeg;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:154: characters 39-60
			return $a > $b;
		}
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return bool
	 */
	public static function gtFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:225: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:225: characters 3-25
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) > $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function gte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:159: characters 3-28
		$aNeg = $a < 0;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:160: characters 3-28
		$bNeg = $b < 0;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:161: characters 10-61
		if ($aNeg !== $bNeg) {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:161: characters 28-32
			return $aNeg;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:161: characters 39-61
			return $a >= $b;
		}
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return bool
	 */
	public static function gteFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:245: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:245: characters 3-26
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) >= $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function lt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:165: characters 10-18
		$aNeg = $b < 0;
		$bNeg = $a < 0;
		if ($aNeg !== $bNeg) {
			return $aNeg;
		} else {
			return $b > $a;
		}
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return bool
	 */
	public static function ltFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:257: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:257: characters 3-25
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) < $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return bool
	 */
	public static function lte ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:169: characters 10-19
		$aNeg = $b < 0;
		$bNeg = $a < 0;
		if ($aNeg !== $bNeg) {
			return $aNeg;
		} else {
			return $b >= $a;
		}
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return bool
	 */
	public static function lteFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:261: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:261: characters 3-26
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) <= $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function mod ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:197: characters 18-29
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:197: characters 32-43
		$int1 = $b;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:197: characters 3-44
		return (int)((fmod((($int < 0 ? 4294967296.0 + $int : $int + 0.0)), (($int1 < 0 ? 4294967296.0 + $int1 : $int1 + 0.0)))));
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return float
	 */
	public static function modFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:273: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:273: characters 3-25
		return fmod((($int < 0 ? 4294967296.0 + $int : $int + 0.0)), $b);
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function mul ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:143: characters 3-31
		return $a * $b;
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return float
	 */
	public static function mulWithFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:205: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:205: characters 3-25
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) * $b;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function negBits ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:281: characters 3-15
		return ~$this1;
	}

	/**
	 * @param int $a
	 * @param mixed $b
	 * 
	 * @return bool
	 */
	public static function notEqualsFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:241: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:241: characters 3-26
		return !Boot::equal((($int < 0 ? 4294967296.0 + $int : $int + 0.0)), $b);
	}

	/**
	 * @param int $a
	 * @param mixed $b
	 * 
	 * @return bool
	 */
	public static function notEqualsInt ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:233: characters 3-24
		return !Boot::equal($a, $b);
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function or ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:177: characters 3-31
		return $a | $b;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function postfixDecrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:297: characters 10-16
		return $this1--;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function postfixIncrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:289: characters 10-16
		return $this1++;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function prefixDecrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:293: characters 12-16
		return --$this1;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function prefixIncrement ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:285: characters 12-16
		return ++$this1;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function shl ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:185: characters 3-24
		return $a << $b;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function shr ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:189: characters 3-25
		return Boot::shiftRightUnsigned($a, $b);
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function sub ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:147: characters 3-31
		return $a - $b;
	}

	/**
	 * @param int $a
	 * @param float $b
	 * 
	 * @return float
	 */
	public static function subFloat ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:217: characters 10-21
		$int = $a;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:217: characters 3-25
		return (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) - $b;
	}

	/**
	 * @param int $this
	 * 
	 * @return float
	 */
	public static function toFloat ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:314: characters 3-21
		$int = $this1;
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:315: lines 315-321
		if ($int < 0) {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:316: characters 4-29
			return 4294967296.0 + $int;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:320: characters 4-20
			return $int + 0.0;
		}
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function toInt ($this1) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:310: characters 3-14
		return $this1;
	}

	/**
	 * @param int $this
	 * @param int $radix
	 * 
	 * @return string
	 */
	public static function toString ($this1, $radix = null) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:305: characters 21-52
		$tmp = null;
		if ($this1 === null) {
			$tmp = null;
		} else {
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:305: characters 43-52
			$int = $this1;
			#/home/runner/haxe/versions/4.0.5/std/UInt.hx:305: characters 21-52
			$tmp = ($int < 0 ? 4294967296.0 + $int : $int + 0.0);
		}
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:305: characters 3-53
		return Std::string($tmp);
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function ushr ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:193: characters 3-25
		return Boot::shiftRightUnsigned($a, $b);
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function xor ($a, $b) {
		#/home/runner/haxe/versions/4.0.5/std/UInt.hx:181: characters 3-31
		return $a ^ $b;
	}
}

Boot::registerClass(UInt_Impl_::class, '_UInt.UInt_Impl_');
