<?php
/**
 * Generated by Haxe 4.0.0+ef18b627e
 */

namespace helder\std\php\_Boot;

use \helder\std\php\Boot;
use \helder\std\Array_hx;

/**
 * `String` implementation
 */
class HxString {
	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return string
	 */
	static public function charAt ($str, $index) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:733: characters 10-58
		if ($index < 0) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:733: characters 22-24
			return "";
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:733: characters 27-58
			return mb_substr($str, $index, 1);
		}
	}

	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($str, $index) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:737: lines 737-739
		if (($index < 0) || ($str === "")) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:738: characters 4-15
			return null;
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:740: lines 740-742
		if ($index === 0) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:741: characters 11-30
			$code = ord($str[0]);
			if ($code < 192) {
				return $code;
			} else if ($code < 224) {
				return (($code - 192) << 6) + ord($str[1]) - 128;
			} else if ($code < 240) {
				return (($code - 224) << 12) + ((ord($str[1]) - 128) << 6) + ord($str[2]) - 128;
			} else {
				return (($code - 240) << 18) + ((ord($str[1]) - 128) << 12) + ((ord($str[2]) - 128) << 6) + ord($str[3]) - 128;
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:743: characters 3-46
		$char = mb_substr($str, $index, 1);
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:744: characters 10-50
		if ($char === "") {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:744: characters 23-27
			return null;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:744: characters 30-50
			$code1 = ord($char[0]);
			if ($code1 < 192) {
				return $code1;
			} else if ($code1 < 224) {
				return (($code1 - 192) << 6) + ord($char[1]) - 128;
			} else if ($code1 < 240) {
				return (($code1 - 224) << 12) + ((ord($char[1]) - 128) << 6) + ord($char[2]) - 128;
			} else {
				return (($code1 - 240) << 18) + ((ord($char[1]) - 128) << 12) + ((ord($char[2]) - 128) << 6) + ord($char[3]) - 128;
			}
		}
	}

	/**
	 * @param int $code
	 * 
	 * @return string
	 */
	static public function fromCharCode ($code) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:839: characters 3-29
		return mb_chr($code);
	}

	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function indexOf ($str, $search, $startIndex = null) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:748: lines 748-761
		if ($startIndex === null) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:749: characters 4-18
			$startIndex = 0;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:751: characters 4-28
			$length = mb_strlen($str);
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:752: lines 752-757
			if ($startIndex < 0) {
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:753: characters 5-25
				$startIndex += $length;
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:754: lines 754-756
				if ($startIndex < 0) {
					#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:755: characters 6-20
					$startIndex = 0;
				}
			}
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:758: lines 758-760
			if (($startIndex >= $length) && ($search !== "")) {
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:759: characters 5-14
				return -1;
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:762: lines 762-767
		$index = null;
		if ($search === "") {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:763: characters 4-28
			$length1 = mb_strlen($str);
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:762: lines 762-767
			$index = ($startIndex > $length1 ? $length1 : $startIndex);
		} else {
			$index = mb_strpos($str, $search, $startIndex);
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:768: characters 10-39
		if ($index === false) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:768: characters 28-30
			return -1;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:768: characters 33-38
			return $index;
		}
	}

	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function lastIndexOf ($str, $search, $startIndex = null) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:772: characters 3-26
		$start = $startIndex;
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:773: lines 773-785
		if ($start === null) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:774: characters 4-13
			$start = 0;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:776: characters 4-28
			$length = mb_strlen($str);
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:777: lines 777-784
			if ($start >= 0) {
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:778: characters 5-27
				$start -= $length;
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:779: lines 779-781
				if ($start > 0) {
					#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:780: characters 6-15
					$start = 0;
				}
			} else if ($start < -$length) {
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:783: characters 5-20
				$start = -$length;
			}
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:786: lines 786-791
		$index = null;
		if ($search === "") {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:787: characters 4-28
			$length1 = mb_strlen($str);
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:786: lines 786-791
			$index = (($startIndex === null) || ($startIndex > $length1) ? $length1 : $startIndex);
		} else {
			$index = mb_strrpos($str, $search, $start);
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:792: lines 792-796
		if ($index === false) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:793: characters 4-13
			return -1;
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:795: characters 4-16
			return $index;
		}
	}

	/**
	 * @param string $str
	 * @param string $delimiter
	 * 
	 * @return Array_hx
	 */
	static public function split ($str, $delimiter) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:800: lines 800-805
		$arr = null;
		if ($delimiter === "") {
			$arr = preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);
		} else {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:803: characters 4-49
			$delimiter = preg_quote($delimiter, "/");
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:800: lines 800-805
			$arr = preg_split("/" . ($delimiter??'null') . "/", $str);
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:806: characters 3-41
		return Array_hx::wrap($arr);
	}

	/**
	 * @param string $str
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function substr ($str, $pos, $len = null) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:810: characters 3-41
		return mb_substr($str, $pos, $len);
	}

	/**
	 * @param string $str
	 * @param int $startIndex
	 * @param int $endIndex
	 * 
	 * @return string
	 */
	static public function substring ($str, $startIndex, $endIndex = null) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:814: lines 814-819
		if ($endIndex === null) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:815: lines 815-817
			if ($startIndex < 0) {
				#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:816: characters 5-19
				$startIndex = 0;
			}
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:818: characters 4-44
			return mb_substr($str, $startIndex);
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:820: lines 820-822
		if ($endIndex < 0) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:821: characters 4-16
			$endIndex = 0;
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:823: lines 823-825
		if ($startIndex < 0) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:824: characters 4-18
			$startIndex = 0;
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:826: lines 826-830
		if ($startIndex > $endIndex) {
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:827: characters 4-23
			$tmp = $endIndex;
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:828: characters 4-25
			$endIndex = $startIndex;
			#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:829: characters 4-20
			$startIndex = $tmp;
		}
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:831: characters 3-66
		return mb_substr($str, $startIndex, $endIndex - $startIndex);
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toLowerCase ($str) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:729: characters 3-35
		return mb_strtolower($str);
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toString ($str) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:835: characters 3-13
		return $str;
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toUpperCase ($str) {
		#/home/runner/haxe/versions/4.0.0/std/php/Boot.hx:725: characters 3-35
		return mb_strtoupper($str);
	}
}

Boot::registerClass(HxString::class, 'php._Boot.HxString');
