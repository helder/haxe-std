{"sourceRoot":"","names":[],"mappings":"QAKA;QCqBU;;AC0GV;AAAA;CACa,iBACX;EAAA,AAAO,WAAY;;CAGR,iBACX;EAAA,AAAO,+BAAc;;CAGV,iBACX;EAAA,AAAO,WAAY;;CAGR,iBACX;EAAA,AAAO,WAAY;;CAIpB,gBAAoE,CACnE;EAAA,WAAW,IAAY,EACvB;EAAA,WAAW,IAAY,EAChB;EAAA,GAAI,SAAQ,MAAM;GAAA;GAAW;GAAA,WAAY;;;CAIjD,iBAAqE,CACpE;EAAA,WAAW,IAAY,EACvB;EAAA,WAAW,IAAY,EAChB;EAAA,GAAI,SAAQ,MAAM;GAAA;GAAW;GAAA,YAAa;;;CAGtC,gBACX;EAAA,AAAO,qBAAG,GAAG;;CAGD,iBACZ;EAAA,AAAO,sBAAI,GAAG;;CAGH,iBACX;EAAA,AAAO,WAAY;;CAGR,gBACX;EAAA,AAAO,WAAY;;CAGR,iBACX;EAAA,AAAO,WAAY;;CAGP,iBACZ;EAAA,AAAO,YAAa;;CAGR,iBACZ;EAAA,AAAO,aAAc;;CAGR,kBACb;EAAA,AAAO,aAAc;;CAGV,iBACJ;EAAA,OAAQ,wBAAc,wBAAtB;;CAGkB,0BACzB;EAAA,AAAO,+BAAc;;CAGI,0BACzB;EAAA,AAAO,+BAAc;;CAGV,sBACX;EAAA,AAAO,+BAAc;;CAGV,sBACX;EAAA,AAAO,WAAI;;CAGA,sBACX;EAAA,AAAO,+BAAc;;CAGV,sBACX;EAAA,AAAO,WAAI;;CAGA,qBACX;EAAA,AAAO,+BAAc;;CAGK,uBAC1B;EAAA,AAAO,YAAa;;CAGM,0BAC1B;EAAA,AAAO,YAAa;;CAGM,yBAC1B;EAAA,AAAO,gCAAe;;CAGI,4BAC1B;EAAA,AAAO,gCAAe;;CAGV,sBACZ;EAAA,AAAO,gCAAe;;CAGX,qBACX;EAAA,AAAO,WAAI;;CAGC,sBACZ;EAAA,AAAO,YAAK;;CAGD,qBACX;EAAA,AAAO,+BAAc;;CAGT,sBACZ;EAAA,AAAO,gCAAe;;CAGX,qBACX;EAAA,AAAO,WAAI;;CAGC,sBACZ;EAAA,AAAO,YAAK;;CAGD,sBACX;EAAA,AAAO,+BAAc;;CAGV,sBACX;EAAA,AAAO,WAAI;;CAGH,sBACR;EAAA,AAAO,QAAC;;CAGC,8BACA;EAAA,AAAF,SAAE;;CAGA,+BACF;EAAA;;CAGE,8BACA;EAAA,AAAF,SAAE;;CAGA,+BACF;EAAA;;CAIR,qCACC;EAAA,AAAO,kBAAW;;CAGnB,oBACC;EAAA,AAAO;;CAGH,sBAAmE,CACvE;EAAA,WAAU,MACV;EAAA,GAAI,QAAM,GACT;GAAA,AAAO,sBAAe;GAItB;GAAA,AAAO,cAAM","version":3,"file":"UInt.js.map","sources":["../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../haxe/versions/4.1.0/std/js/_std/Std.hx","../../../../../haxe/versions/4.1.0/std/UInt.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport js.Boot;\nimport js.Syntax;\n\n@:keepInit\n@:coreApi class Std {\n\tpublic static inline function is(v:Dynamic, t:Dynamic):Bool {\n\t\treturn isOfType(v, t);\n\t}\n\n\tpublic static inline function isOfType(v:Dynamic, t:Dynamic):Bool {\n\t\treturn @:privateAccess js.Boot.__instanceof(v, t);\n\t}\n\n\tpublic static inline function downcast<T:{}, S:T>(value:T, c:Class<S>):S@:privateAccess {\n\t\treturn if (js.Boot.__downcastCheck(value, c)) cast value else null;\n\t}\n\n\t@:deprecated('Std.instance() is deprecated. Use Std.downcast() instead.')\n\tpublic static inline function instance<T:{}, S:T>(value:T, c:Class<S>):S {\n\t\treturn downcast(value, c);\n\t}\n\n\t@:pure\n\tpublic static function string(s:Dynamic):String {\n\t\treturn @:privateAccess js.Boot.__string_rec(s, \"\");\n\t}\n\n\tpublic static inline function int(x:Float):Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\t@:pure\n\tpublic static function parseInt(x:String):Null<Int> {\n\t\tif(x != null) {\n\t\t\tfor(i in 0...x.length) {\n\t\t\t\tvar c = StringTools.fastCodeAt(x, i);\n\t\t\t\tif(c <= 8 || (c >= 14 && c != ' '.code && c != '-'.code)) {\n\t\t\t\t\tvar nc = StringTools.fastCodeAt(x, i + 1);\n\t\t\t\t\tvar v = js.Lib.parseInt(x, (nc == \"x\".code || nc == \"X\".code) ? 16 : 10);\n\t\t\t\t\treturn Math.isNaN(v) ? null : cast v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static inline function parseFloat(x:String):Float {\n\t\treturn js.Syntax.code(\"parseFloat({0})\", x);\n\t}\n\n\tpublic static function random(x:Int):Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random() * x);\n\t}\n\n\tstatic function __init__():Void\n\t\tuntyped {\n\t\t\t__feature__(\"js.Boot.getClass\", String.prototype.__class__ = __feature__(\"Type.resolveClass\", $hxClasses[\"String\"] = String, String));\n\t\t\t__feature__(\"js.Boot.isClass\", String.__name__ = __feature__(\"Type.getClassName\", \"String\", true));\n\t\t\t__feature__(\"Type.resolveClass\", $hxClasses[\"Array\"] = Array);\n\t\t\t__feature__(\"js.Boot.isClass\", Array.__name__ = __feature__(\"Type.getClassName\", \"Array\", true));\n\t\t\t__feature__(\"Date.*\", {\n\t\t\t\t__feature__(\"js.Boot.getClass\",\n\t\t\t\t\tjs.Syntax.code('Date').prototype.__class__ = __feature__(\"Type.resolveClass\", $hxClasses[\"Date\"] = js.Syntax.code('Date'), js.Syntax.code('Date')));\n\t\t\t\t__feature__(\"js.Boot.isClass\", js.Syntax.code('Date').__name__ = \"Date\");\n\t\t\t});\n\t\t\t__feature__(\"Int.*\", js.Syntax.code('var Int = { };'));\n\t\t\t__feature__(\"Dynamic.*\", js.Syntax.code('var Dynamic = { };'));\n\t\t\t__feature__(\"Float.*\", js.Syntax.code('var Float = Number'));\n\t\t\t__feature__(\"Bool.*\", js.Syntax.code('var Bool = Boolean'));\n\t\t\t__feature__(\"Class.*\", js.Syntax.code('var Class = { };'));\n\t\t\t__feature__(\"Enum.*\", js.Syntax.code('var Enum = { };'));\n\t\t\t#if (js_es < 5)\n\t\t\t__feature__(\"Array.map\", if (Array.prototype.map == null) Array.prototype.map = function(f) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (i in 0...__this__.length)\n\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\treturn a;\n\t\t\t});\n\t\t\t__feature__(\"Array.filter\", if (Array.prototype.filter == null) Array.prototype.filter = function(f) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (i in 0...__this__.length) {\n\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\tif (f(e))\n\t\t\t\t\t\ta.push(e);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t});\n\t\t\t#end\n\t\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n#if ((flash || flash9doc || cs || hl) && !doc_gen)\n/**\n\tThe unsigned `Int` type is only defined for Flash and C#. It's currently\n\thandled the same as a normal Int.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n**/\n@:coreType\n@:notNull\n@:runtimeValue\n@:analyzer(no_const_propagation)\nabstract UInt to Int from Int {\n\t@:commutative @:op(A + B) private static function addI(lhs:UInt, rhs:Int):UInt;\n\n\t@:commutative @:op(A + B) private static function addF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A + B) private static function add(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A * B) private static function mulI(lhs:UInt, rhs:Int):UInt;\n\n\t@:commutative @:op(A * B) private static function mulF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A * B) private static function mul(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A % B) private static function modI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A % B) private static function modF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A % B) private static function mod(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A - B) private static function subI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A - B) private static function subF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A - B) private static function sub(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A / B) private static function divI(lhs:UInt, rhs:Int):Float;\n\n\t@:op(A / B) private static function divF(lhs:UInt, rhs:Float):Float;\n\n\t@:op(A / B) private static function div(lhs:UInt, rhs:UInt):Float;\n\n\t@:commutative @:op(A | B) private static function orI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A | B) private static function or(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A ^ B) private static function xorI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A ^ B) private static function xor(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A & B) private static function andI(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A & B) private static function and(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A << B) private static function shl(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A >> B) private static inline function shr(lhs:UInt, rhs:Int):UInt\n\t\treturn lhs >>> rhs;\n\n\t@:op(A >>> B) private static function ushr(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A > B) private static function gt(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A >= B) private static function gte(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A < B) private static function lt(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A <= B) private static function lte(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A > B) private static function gtf(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A > B) private static function gtf2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(A >= B) private static function gtef(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A >= B) private static function gtef2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(A < B) private static function ltf(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A < B) private static function ltf2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(A <= B) private static function ltef(lhs:UInt, rhs:Float):Bool;\n\n\t@:op(A <= B) private static function ltef2(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(~A) private static function bneg(t:UInt):UInt;\n\n\t@:commutative @:op(A == B) private static function equalsInt<T:Int>(a:UInt, b:T):Bool;\n\n\t@:commutative @:op(A != B) private static function notEqualsInt<T:Int>(a:UInt, b:T):Bool;\n\n\t@:commutative @:op(A == B) private static function equalsFloat<T:Float>(a:UInt, b:T):Bool;\n\n\t@:commutative @:op(A != B) private static function notEqualsFloat<T:Float>(a:UInt, b:T):Bool;\n\n\t@:op(++A) private function prefixIncrement():UInt;\n\n\t@:op(A++) private function postfixIncrement():UInt;\n\n\t@:op(--A) private function prefixDecrement():UInt;\n\n\t@:op(A--) private function postfixDecrement():UInt;\n}\n#else\n\n/**\n\tThe unsigned `Int` type is only defined for Flash and C#.\n\tSimulate it for other platforms.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n**/\nabstract UInt(Int) from Int to Int {\n\t@:op(A + B) private static inline function add(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() + b.toInt();\n\t}\n\n\t@:op(A / B) private static inline function div(a:UInt, b:UInt):Float {\n\t\treturn a.toFloat() / b.toFloat();\n\t}\n\n\t@:op(A * B) private static inline function mul(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() * b.toInt();\n\t}\n\n\t@:op(A - B) private static inline function sub(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() - b.toInt();\n\t}\n\n\t@:op(A > B)\n\tprivate static #if !js inline #end function gt(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn if (aNeg != bNeg) aNeg; else a.toInt() > b.toInt();\n\t}\n\n\t@:op(A >= B)\n\tprivate static #if !js inline #end function gte(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn if (aNeg != bNeg) aNeg; else a.toInt() >= b.toInt();\n\t}\n\n\t@:op(A < B) private static inline function lt(a:UInt, b:UInt):Bool {\n\t\treturn gt(b, a);\n\t}\n\n\t@:op(A <= B) private static inline function lte(a:UInt, b:UInt):Bool {\n\t\treturn gte(b, a);\n\t}\n\n\t@:op(A & B) private static inline function and(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() & b.toInt();\n\t}\n\n\t@:op(A | B) private static inline function or(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() | b.toInt();\n\t}\n\n\t@:op(A ^ B) private static inline function xor(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() ^ b.toInt();\n\t}\n\n\t@:op(A << B) private static inline function shl(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() << b;\n\t}\n\n\t@:op(A >> B) private static inline function shr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A >>> B) private static inline function ushr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A % B) private static inline function mod(a:UInt, b:UInt):UInt {\n\t\treturn Std.int(a.toFloat() % b.toFloat());\n\t}\n\n\t@:commutative @:op(A + B) private static inline function addWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() + b;\n\t}\n\n\t@:commutative @:op(A * B) private static inline function mulWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() * b;\n\t}\n\n\t@:op(A / B) private static inline function divFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() / b;\n\t}\n\n\t@:op(A / B) private static inline function floatDiv(a:Float, b:UInt):Float {\n\t\treturn a / b.toFloat();\n\t}\n\n\t@:op(A - B) private static inline function subFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() - b;\n\t}\n\n\t@:op(A - B) private static inline function floatSub(a:Float, b:UInt):Float {\n\t\treturn a - b.toFloat();\n\t}\n\n\t@:op(A > B) private static inline function gtFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() > b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() != b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsFloat<T:Float>(a:UInt, b:T):Bool {\n\t\treturn a.toFloat() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsFloat<T:Float>(a:UInt, b:T):Bool {\n\t\treturn a.toFloat() != b;\n\t}\n\n\t@:op(A >= B) private static inline function gteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() >= b;\n\t}\n\n\t@:op(A > B) private static inline function floatGt(a:Float, b:UInt):Bool {\n\t\treturn a > b.toFloat();\n\t}\n\n\t@:op(A >= B) private static inline function floatGte(a:Float, b:UInt):Bool {\n\t\treturn a >= b.toFloat();\n\t}\n\n\t@:op(A < B) private static inline function ltFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() < b;\n\t}\n\n\t@:op(A <= B) private static inline function lteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() <= b;\n\t}\n\n\t@:op(A < B) private static inline function floatLt(a:Float, b:UInt):Bool {\n\t\treturn a < b.toFloat();\n\t}\n\n\t@:op(A <= B) private static inline function floatLte(a:Float, b:UInt):Bool {\n\t\treturn a <= b.toFloat();\n\t}\n\n\t@:op(A % B) private static inline function modFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() % b;\n\t}\n\n\t@:op(A % B) private static inline function floatMod(a:Float, b:UInt):Float {\n\t\treturn a % b.toFloat();\n\t}\n\n\t@:op(~A) private inline function negBits():UInt {\n\t\treturn ~this;\n\t}\n\n\t@:op(++A) private inline function prefixIncrement():UInt {\n\t\treturn ++this;\n\t}\n\n\t@:op(A++) private inline function postfixIncrement():UInt {\n\t\treturn this++;\n\t}\n\n\t@:op(--A) private inline function prefixDecrement():UInt {\n\t\treturn --this;\n\t}\n\n\t@:op(A--) private inline function postfixDecrement():UInt {\n\t\treturn this--;\n\t}\n\n\t// TODO: radix is just defined to deal with doc_gen issues\n\tprivate inline function toString(?radix:Int):String {\n\t\treturn Std.string(toFloat());\n\t}\n\n\tprivate inline function toInt():Int {\n\t\treturn this;\n\t}\n\n\t@:to private #if (!js || analyzer) inline #end function toFloat():Float {\n\t\tvar int = toInt();\n\t\tif (int < 0) {\n\t\t\treturn 4294967296.0 + int;\n\t\t} else {\n\t\t\t// + 0.0 here to make sure we promote to Float on some platforms\n\t\t\t// In particular, PHP was having issues when comparing to Int in the == op.\n\t\t\treturn int + 0.0;\n\t\t}\n\t}\n}\n#end\n"]}