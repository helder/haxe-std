{"sourceRoot":"","names":[],"mappings":"QAkEA;;AC7CA,gBAAY,GAAG,KD6Cf,QC7CY,GAAG;;AAIf,iBAAa,GAAG,KDyChB,QCzCa,GAAG","version":3,"file":"Map.d.ts.map","sources":["../../../../../haxe/versions/4.1.5/std/haxe/Constraints.hx","../../../../../haxe/versions/4.1.5/std/Map.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe;\n\n/**\n\tThis type unifies with any function type.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\n@:callable\nabstract Function(Dynamic) {}\n\n/**\n\tThis type unifies with an enum instance if all constructors of the enum\n\trequire no arguments.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract FlatEnum(Dynamic) {}\n\n/**\n\tThis type unifies with anything but `Void`.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract NotVoid(Dynamic) { }\n\n/**\n\tThis type unifies with any instance of classes that have a constructor\n\twhich\n\n\t  * is `public` and\n\t  * unifies with the type used for type parameter `T`.\n\n\tIf a type parameter `A` is assigned to a type parameter `B` which is constrained\n\tto `Constructible<T>`, A must be explicitly constrained to\n\t`Constructible<T>` as well.\n\n\tIt is intended to be used as a type parameter constraint. If used as a real\n\ttype, the underlying type will be `Dynamic`.\n**/\nabstract Constructible<T>(Dynamic) {}\n\ninterface IMap<K, V> {\n\tfunction get(k:K):Null<V>;\n\tfunction set(k:K, v:V):Void;\n\tfunction exists(k:K):Bool;\n\tfunction remove(k:K):Bool;\n\tfunction keys():Iterator<K>;\n\tfunction iterator():Iterator<V>;\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n\tfunction copy():IMap<K, V>;\n\tfunction toString():String;\n\tfunction clear():Void;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\ntypedef Map<K, V> = haxe.ds.Map<K, V>;\n\n@:dox(hide)\n@:deprecated\ntypedef IMap<K, V> = haxe.Constraints.IMap<K, V>;\n"]}