{"sourceRoot":"","names":[],"mappings":";AA0BA,6CACC,aCOM","version":3,"file":"MediaStreamAudioSourceOptions.d.ts.map","sources":["../../../../../../../../haxe/versions/4.0.5/std/js/html/audio/MediaStreamAudioSourceOptions.hx","../../../../../../../../haxe/versions/4.0.5/std/js/html/MediaStream.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\MediaStreamAudioSourceNode.webidl. Do not edit!\n\npackage js.html.audio;\n\ntypedef MediaStreamAudioSourceOptions = {\n\tvar mediaStream : js.html.MediaStream;\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\MediaStream.webidl. Do not edit!\n\npackage js.html;\n\n/**\n\tThe `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.\n\n\tDocumentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>\n**/\n@:native(\"MediaStream\")\nextern class MediaStream extends EventTarget {\n\t\n\t/**\n\t\tA `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.\n\t**/\n\tvar id(default,null) : String;\n\t\n\t/**\n\t\tA Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.\n\t**/\n\tvar active(default,null) : Bool;\n\t\n\t/**\n\t\tAn `EventHandler` containing the action to perform when an `addtrack` event is fired when a new `MediaStreamTrack` object is added.\n\t**/\n\tvar onaddtrack : haxe.Constraints.Function;\n\t\n\t/**\n\t\tAn `EventHandler` containing the action to perform when a `removetrack` event is fired when a  `MediaStreamTrack` object is removed from it.\n\t**/\n\tvar onremovetrack : haxe.Constraints.Function;\n\tvar currentTime(default,null) : Float;\n\t\n\t/** @throws DOMError */\n\t@:overload( function() : Void {} )\n\t@:overload( function( stream : MediaStream ) : Void {} )\n\tfunction new( tracks : Array<MediaStreamTrack> ) : Void;\n\t\n\t/**\n\t\tReturns a list of the `MediaStreamTrack` objects stored in the MediaStream` object that have their kind` attribute set to \"audio\"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.\n\t**/\n\tfunction getAudioTracks() : Array<AudioStreamTrack>;\n\t\n\t/**\n\t\tReturns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `\"video\"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.\n\t**/\n\tfunction getVideoTracks() : Array<VideoStreamTrack>;\n\t\n\t/**\n\t\tReturns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.\n\t**/\n\tfunction getTracks() : Array<MediaStreamTrack>;\n\t\n\t/**\n\t\tReturns the track whose ID corresponds to the one given in parameters, trackid`. If no parameter is given, or if no track with that ID does exist, it returns null`. If several tracks have the same ID, it returns the first one.\n\t**/\n\tfunction getTrackById( trackId : String ) : MediaStreamTrack;\n\t\n\t/**\n\t\tStores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.\n\t**/\n\tfunction addTrack( track : MediaStreamTrack ) : Void;\n\t\n\t/**\n\t\tRemoves the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.\n\t**/\n\tfunction removeTrack( track : MediaStreamTrack ) : Void;\n\t\n\t/**\n\t\tReturns a clone of the `MediaStream` object. The clone will, however, have a unique value for `MediaStream.id`.\n\t**/\n\tfunction clone() : MediaStream;\n}"]}