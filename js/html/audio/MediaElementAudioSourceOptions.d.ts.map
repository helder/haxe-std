{"sourceRoot":"","names":[],"mappings":";AA0BA,8CACC,cCSM","version":3,"file":"MediaElementAudioSourceOptions.d.ts.map","sources":["../../../../../../../../haxe/versions/4.1.0/std/js/html/audio/MediaElementAudioSourceOptions.hx","../../../../../../../../haxe/versions/4.1.0/std/js/html/MediaElement.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\MediaElementAudioSourceNode.webidl. Do not edit!\n\npackage js.html.audio;\n\ntypedef MediaElementAudioSourceOptions = {\n\tvar mediaElement : js.html.MediaElement;\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\HTMLMediaElement.webidl. Do not edit!\n\npackage js.html;\n\nimport js.lib.Promise;\n\n/**\n\tThe `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.\n\n\tDocumentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>\n**/\n@:native(\"HTMLMediaElement\")\nextern class MediaElement extends Element {\n\tstatic inline var NETWORK_EMPTY : Int = 0;\n\tstatic inline var NETWORK_IDLE : Int = 1;\n\tstatic inline var NETWORK_LOADING : Int = 2;\n\tstatic inline var NETWORK_NO_SOURCE : Int = 3;\n\tstatic inline var HAVE_NOTHING : Int = 0;\n\tstatic inline var HAVE_METADATA : Int = 1;\n\tstatic inline var HAVE_CURRENT_DATA : Int = 2;\n\tstatic inline var HAVE_FUTURE_DATA : Int = 3;\n\tstatic inline var HAVE_ENOUGH_DATA : Int = 4;\n\n\n\t/**\n\t\tReturns a `MediaError` object for the most recent error, or `null` if there has not been an error.\n\t**/\n\tvar error(default,null) : MediaError;\n\n\t/**\n\t\tIs a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.\n\t**/\n\tvar src : String;\n\n\t/**\n\t\tReturns a `DOMString` with the absolute URL of the chosen media resource.\n\t**/\n\tvar currentSrc(default,null) : String;\n\n\t/**\n\t\tIs a `DOMString` indicating the CORS setting for this media element.\n\t**/\n\tvar crossOrigin : String;\n\n\t/**\n\t\tReturns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.\n\t**/\n\tvar networkState(default,null) : Int;\n\n\t/**\n\t\tIs a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.\n\t**/\n\tvar preload : String;\n\n\t/**\n\t\tReturns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.\n\t**/\n\tvar buffered(default,null) : TimeRanges;\n\n\t/**\n\t\tReturns a `unsigned short` (enumeration) indicating the readiness state of the media.\n\t**/\n\tvar readyState(default,null) : Int;\n\n\t/**\n\t\tReturns a `Boolean` that indicates whether the media is in the process of seeking to a new position.\n\t**/\n\tvar seeking(default,null) : Bool;\n\n\t/**\n\t\tIs a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.\n\t**/\n\tvar currentTime : Float;\n\n\t/**\n\t\tReturns a `double` indicating the length of the media in seconds, or 0 if no media data is available.\n\t**/\n\tvar duration(default,null) : Float;\n\n\t/**\n\t\tReturns a `Boolean` that indicates whether the media element is paused.\n\t**/\n\tvar paused(default,null) : Bool;\n\n\t/**\n\t\tIs a `double` indicating the default playback rate for the media.\n\t**/\n\tvar defaultPlaybackRate : Float;\n\n\t/**\n\t\tIs a `double` that indicates the rate at which the media is being played back. \n\t**/\n\tvar playbackRate : Float;\n\n\t/**\n\t\tReturns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.\n\t**/\n\tvar played(default,null) : TimeRanges;\n\n\t/**\n\t\tReturns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.\n\t**/\n\tvar seekable(default,null) : TimeRanges;\n\n\t/**\n\t\tReturns a `Boolean` that indicates whether the media element has finished playing.\n\t**/\n\tvar ended(default,null) : Bool;\n\n\t/**\n\t\tA `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.\n\t\t Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.\n\n\t**/\n\tvar autoplay : Bool;\n\n\t/**\n\t\tIs a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.\n\t**/\n\tvar loop : Bool;\n\n\t/**\n\t\tIs a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.\n\t**/\n\tvar controls : Bool;\n\n\t/**\n\t\tIs a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).\n\t**/\n\tvar volume : Float;\n\n\t/**\n\t\tIs a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.\n\t**/\n\tvar muted : Bool;\n\n\t/**\n\t\tIs a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.\n\t**/\n\tvar defaultMuted : Bool;\n\n\t/**\n\t\tA `AudioTrackList` that lists the `AudioTrack` objects contained in the element.\n\t**/\n\tvar audioTracks(default,null) : AudioTrackList;\n\n\t/**\n\t\tReturns the list of `VideoTrack` objects contained in the element.\n\n\t\t Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.\n\n\n\t**/\n\tvar videoTracks(default,null) : VideoTrackList;\n\n\t/**\n\t\tReturns the list of `TextTrack` objects contained in the element.\n\t**/\n\tvar textTracks(default,null) : TextTrackList;\n\n\t/**\n\t\tIs a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.\n\t**/\n\tvar srcObject : MediaStream;\n\n\t/**\n\t\tReturns a `MediaKeys` object or `null`. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.\n\t**/\n\tvar mediaKeys(default,null) : js.html.eme.MediaKeys;\n\n\t/**\n\t\tSets the `EventHandler` called when the media is encrypted.\n\t**/\n\tvar onencrypted : haxe.Constraints.Function;\n\n\t/**\n\t\tSets the `EventHandler` called when playback is blocked while waiting for an encryption key.\n\t**/\n\tvar onwaitingforkey : haxe.Constraints.Function;\n\n\n\t/**\n\t\tResets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.\n\t**/\n\tfunction load() : Void;\n\n\t/**\n\t\tDetermines whether the specified media type can be played back.\n\t**/\n\tfunction canPlayType( type : String ) : String;\n\n\t/**\n\t\tDirectly seeks to the given time.\n\t\t@throws DOMError\n\t**/\n\tfunction fastSeek( time : Float ) : Void;\n\n\t/**\n\t\tBegins playback of the media.\n\t\t@throws DOMError\n\t**/\n\tfunction play() : Promise<Void>;\n\n\t/**\n\t\tPauses the media playback.\n\t\t@throws DOMError\n\t**/\n\tfunction pause() : Void;\n\n\t/**\n\t\tAdds a text track (such as a track for subtitles) to a media element.\n\t**/\n\tfunction addTextTrack( kind : TextTrackKind, label : String = \"\", language : String = \"\" ) : TextTrack;\n\n\t/**\n\t\tReturns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.\n\t**/\n\tfunction setMediaKeys( mediaKeys : js.html.eme.MediaKeys ) : Promise<Void>;\n}"]}