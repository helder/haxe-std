{"sourceRoot":"","names":[],"mappings":";AAyBA,iBCSO","version":3,"file":"GL.d.ts.map","sources":["../../../../../../../../haxe/versions/4.1.1/std/js/html/webgl/GL.hx","../../../../../../../../haxe/versions/4.1.1/std/js/html/webgl/RenderingContext.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.html.webgl;\n\n/** An alias for accessing GL constants more naturally. */\ntypedef GL = RenderingContext;\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\WebGLRenderingContext.webidl. Do not edit!\n\npackage js.html.webgl;\n\n/**\n\tThe `WebGLRenderingContext` interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.\n\n\tDocumentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>\n**/\n@:native(\"WebGLRenderingContext\")\nextern class RenderingContext {\n\tstatic inline var DEPTH_BUFFER_BIT : Int = 256;\n\tstatic inline var STENCIL_BUFFER_BIT : Int = 1024;\n\tstatic inline var COLOR_BUFFER_BIT : Int = 16384;\n\tstatic inline var POINTS : Int = 0;\n\tstatic inline var LINES : Int = 1;\n\tstatic inline var LINE_LOOP : Int = 2;\n\tstatic inline var LINE_STRIP : Int = 3;\n\tstatic inline var TRIANGLES : Int = 4;\n\tstatic inline var TRIANGLE_STRIP : Int = 5;\n\tstatic inline var TRIANGLE_FAN : Int = 6;\n\tstatic inline var ZERO : Int = 0;\n\tstatic inline var ONE : Int = 1;\n\tstatic inline var SRC_COLOR : Int = 768;\n\tstatic inline var ONE_MINUS_SRC_COLOR : Int = 769;\n\tstatic inline var SRC_ALPHA : Int = 770;\n\tstatic inline var ONE_MINUS_SRC_ALPHA : Int = 771;\n\tstatic inline var DST_ALPHA : Int = 772;\n\tstatic inline var ONE_MINUS_DST_ALPHA : Int = 773;\n\tstatic inline var DST_COLOR : Int = 774;\n\tstatic inline var ONE_MINUS_DST_COLOR : Int = 775;\n\tstatic inline var SRC_ALPHA_SATURATE : Int = 776;\n\tstatic inline var FUNC_ADD : Int = 32774;\n\tstatic inline var BLEND_EQUATION : Int = 32777;\n\tstatic inline var BLEND_EQUATION_RGB : Int = 32777;\n\tstatic inline var BLEND_EQUATION_ALPHA : Int = 34877;\n\tstatic inline var FUNC_SUBTRACT : Int = 32778;\n\tstatic inline var FUNC_REVERSE_SUBTRACT : Int = 32779;\n\tstatic inline var BLEND_DST_RGB : Int = 32968;\n\tstatic inline var BLEND_SRC_RGB : Int = 32969;\n\tstatic inline var BLEND_DST_ALPHA : Int = 32970;\n\tstatic inline var BLEND_SRC_ALPHA : Int = 32971;\n\tstatic inline var CONSTANT_COLOR : Int = 32769;\n\tstatic inline var ONE_MINUS_CONSTANT_COLOR : Int = 32770;\n\tstatic inline var CONSTANT_ALPHA : Int = 32771;\n\tstatic inline var ONE_MINUS_CONSTANT_ALPHA : Int = 32772;\n\tstatic inline var BLEND_COLOR : Int = 32773;\n\tstatic inline var ARRAY_BUFFER : Int = 34962;\n\tstatic inline var ELEMENT_ARRAY_BUFFER : Int = 34963;\n\tstatic inline var ARRAY_BUFFER_BINDING : Int = 34964;\n\tstatic inline var ELEMENT_ARRAY_BUFFER_BINDING : Int = 34965;\n\tstatic inline var STREAM_DRAW : Int = 35040;\n\tstatic inline var STATIC_DRAW : Int = 35044;\n\tstatic inline var DYNAMIC_DRAW : Int = 35048;\n\tstatic inline var BUFFER_SIZE : Int = 34660;\n\tstatic inline var BUFFER_USAGE : Int = 34661;\n\tstatic inline var CURRENT_VERTEX_ATTRIB : Int = 34342;\n\tstatic inline var FRONT : Int = 1028;\n\tstatic inline var BACK : Int = 1029;\n\tstatic inline var FRONT_AND_BACK : Int = 1032;\n\tstatic inline var CULL_FACE : Int = 2884;\n\tstatic inline var BLEND : Int = 3042;\n\tstatic inline var DITHER : Int = 3024;\n\tstatic inline var STENCIL_TEST : Int = 2960;\n\tstatic inline var DEPTH_TEST : Int = 2929;\n\tstatic inline var SCISSOR_TEST : Int = 3089;\n\tstatic inline var POLYGON_OFFSET_FILL : Int = 32823;\n\tstatic inline var SAMPLE_ALPHA_TO_COVERAGE : Int = 32926;\n\tstatic inline var SAMPLE_COVERAGE : Int = 32928;\n\tstatic inline var NO_ERROR : Int = 0;\n\tstatic inline var INVALID_ENUM : Int = 1280;\n\tstatic inline var INVALID_VALUE : Int = 1281;\n\tstatic inline var INVALID_OPERATION : Int = 1282;\n\tstatic inline var OUT_OF_MEMORY : Int = 1285;\n\tstatic inline var CW : Int = 2304;\n\tstatic inline var CCW : Int = 2305;\n\tstatic inline var LINE_WIDTH : Int = 2849;\n\tstatic inline var ALIASED_POINT_SIZE_RANGE : Int = 33901;\n\tstatic inline var ALIASED_LINE_WIDTH_RANGE : Int = 33902;\n\tstatic inline var CULL_FACE_MODE : Int = 2885;\n\tstatic inline var FRONT_FACE : Int = 2886;\n\tstatic inline var DEPTH_RANGE : Int = 2928;\n\tstatic inline var DEPTH_WRITEMASK : Int = 2930;\n\tstatic inline var DEPTH_CLEAR_VALUE : Int = 2931;\n\tstatic inline var DEPTH_FUNC : Int = 2932;\n\tstatic inline var STENCIL_CLEAR_VALUE : Int = 2961;\n\tstatic inline var STENCIL_FUNC : Int = 2962;\n\tstatic inline var STENCIL_FAIL : Int = 2964;\n\tstatic inline var STENCIL_PASS_DEPTH_FAIL : Int = 2965;\n\tstatic inline var STENCIL_PASS_DEPTH_PASS : Int = 2966;\n\tstatic inline var STENCIL_REF : Int = 2967;\n\tstatic inline var STENCIL_VALUE_MASK : Int = 2963;\n\tstatic inline var STENCIL_WRITEMASK : Int = 2968;\n\tstatic inline var STENCIL_BACK_FUNC : Int = 34816;\n\tstatic inline var STENCIL_BACK_FAIL : Int = 34817;\n\tstatic inline var STENCIL_BACK_PASS_DEPTH_FAIL : Int = 34818;\n\tstatic inline var STENCIL_BACK_PASS_DEPTH_PASS : Int = 34819;\n\tstatic inline var STENCIL_BACK_REF : Int = 36003;\n\tstatic inline var STENCIL_BACK_VALUE_MASK : Int = 36004;\n\tstatic inline var STENCIL_BACK_WRITEMASK : Int = 36005;\n\tstatic inline var VIEWPORT : Int = 2978;\n\tstatic inline var SCISSOR_BOX : Int = 3088;\n\tstatic inline var COLOR_CLEAR_VALUE : Int = 3106;\n\tstatic inline var COLOR_WRITEMASK : Int = 3107;\n\tstatic inline var UNPACK_ALIGNMENT : Int = 3317;\n\tstatic inline var PACK_ALIGNMENT : Int = 3333;\n\tstatic inline var MAX_TEXTURE_SIZE : Int = 3379;\n\tstatic inline var MAX_VIEWPORT_DIMS : Int = 3386;\n\tstatic inline var SUBPIXEL_BITS : Int = 3408;\n\tstatic inline var RED_BITS : Int = 3410;\n\tstatic inline var GREEN_BITS : Int = 3411;\n\tstatic inline var BLUE_BITS : Int = 3412;\n\tstatic inline var ALPHA_BITS : Int = 3413;\n\tstatic inline var DEPTH_BITS : Int = 3414;\n\tstatic inline var STENCIL_BITS : Int = 3415;\n\tstatic inline var POLYGON_OFFSET_UNITS : Int = 10752;\n\tstatic inline var POLYGON_OFFSET_FACTOR : Int = 32824;\n\tstatic inline var TEXTURE_BINDING_2D : Int = 32873;\n\tstatic inline var SAMPLE_BUFFERS : Int = 32936;\n\tstatic inline var SAMPLES : Int = 32937;\n\tstatic inline var SAMPLE_COVERAGE_VALUE : Int = 32938;\n\tstatic inline var SAMPLE_COVERAGE_INVERT : Int = 32939;\n\tstatic inline var COMPRESSED_TEXTURE_FORMATS : Int = 34467;\n\tstatic inline var DONT_CARE : Int = 4352;\n\tstatic inline var FASTEST : Int = 4353;\n\tstatic inline var NICEST : Int = 4354;\n\tstatic inline var GENERATE_MIPMAP_HINT : Int = 33170;\n\tstatic inline var BYTE : Int = 5120;\n\tstatic inline var UNSIGNED_BYTE : Int = 5121;\n\tstatic inline var SHORT : Int = 5122;\n\tstatic inline var UNSIGNED_SHORT : Int = 5123;\n\tstatic inline var INT : Int = 5124;\n\tstatic inline var UNSIGNED_INT : Int = 5125;\n\tstatic inline var FLOAT : Int = 5126;\n\tstatic inline var DEPTH_COMPONENT : Int = 6402;\n\tstatic inline var ALPHA : Int = 6406;\n\tstatic inline var RGB : Int = 6407;\n\tstatic inline var RGBA : Int = 6408;\n\tstatic inline var LUMINANCE : Int = 6409;\n\tstatic inline var LUMINANCE_ALPHA : Int = 6410;\n\tstatic inline var UNSIGNED_SHORT_4_4_4_4 : Int = 32819;\n\tstatic inline var UNSIGNED_SHORT_5_5_5_1 : Int = 32820;\n\tstatic inline var UNSIGNED_SHORT_5_6_5 : Int = 33635;\n\tstatic inline var FRAGMENT_SHADER : Int = 35632;\n\tstatic inline var VERTEX_SHADER : Int = 35633;\n\tstatic inline var MAX_VERTEX_ATTRIBS : Int = 34921;\n\tstatic inline var MAX_VERTEX_UNIFORM_VECTORS : Int = 36347;\n\tstatic inline var MAX_VARYING_VECTORS : Int = 36348;\n\tstatic inline var MAX_COMBINED_TEXTURE_IMAGE_UNITS : Int = 35661;\n\tstatic inline var MAX_VERTEX_TEXTURE_IMAGE_UNITS : Int = 35660;\n\tstatic inline var MAX_TEXTURE_IMAGE_UNITS : Int = 34930;\n\tstatic inline var MAX_FRAGMENT_UNIFORM_VECTORS : Int = 36349;\n\tstatic inline var SHADER_TYPE : Int = 35663;\n\tstatic inline var DELETE_STATUS : Int = 35712;\n\tstatic inline var LINK_STATUS : Int = 35714;\n\tstatic inline var VALIDATE_STATUS : Int = 35715;\n\tstatic inline var ATTACHED_SHADERS : Int = 35717;\n\tstatic inline var ACTIVE_UNIFORMS : Int = 35718;\n\tstatic inline var ACTIVE_ATTRIBUTES : Int = 35721;\n\tstatic inline var SHADING_LANGUAGE_VERSION : Int = 35724;\n\tstatic inline var CURRENT_PROGRAM : Int = 35725;\n\tstatic inline var NEVER : Int = 512;\n\tstatic inline var LESS : Int = 513;\n\tstatic inline var EQUAL : Int = 514;\n\tstatic inline var LEQUAL : Int = 515;\n\tstatic inline var GREATER : Int = 516;\n\tstatic inline var NOTEQUAL : Int = 517;\n\tstatic inline var GEQUAL : Int = 518;\n\tstatic inline var ALWAYS : Int = 519;\n\tstatic inline var KEEP : Int = 7680;\n\tstatic inline var REPLACE : Int = 7681;\n\tstatic inline var INCR : Int = 7682;\n\tstatic inline var DECR : Int = 7683;\n\tstatic inline var INVERT : Int = 5386;\n\tstatic inline var INCR_WRAP : Int = 34055;\n\tstatic inline var DECR_WRAP : Int = 34056;\n\tstatic inline var VENDOR : Int = 7936;\n\tstatic inline var RENDERER : Int = 7937;\n\tstatic inline var VERSION : Int = 7938;\n\tstatic inline var NEAREST : Int = 9728;\n\tstatic inline var LINEAR : Int = 9729;\n\tstatic inline var NEAREST_MIPMAP_NEAREST : Int = 9984;\n\tstatic inline var LINEAR_MIPMAP_NEAREST : Int = 9985;\n\tstatic inline var NEAREST_MIPMAP_LINEAR : Int = 9986;\n\tstatic inline var LINEAR_MIPMAP_LINEAR : Int = 9987;\n\tstatic inline var TEXTURE_MAG_FILTER : Int = 10240;\n\tstatic inline var TEXTURE_MIN_FILTER : Int = 10241;\n\tstatic inline var TEXTURE_WRAP_S : Int = 10242;\n\tstatic inline var TEXTURE_WRAP_T : Int = 10243;\n\tstatic inline var TEXTURE_2D : Int = 3553;\n\tstatic inline var TEXTURE : Int = 5890;\n\tstatic inline var TEXTURE_CUBE_MAP : Int = 34067;\n\tstatic inline var TEXTURE_BINDING_CUBE_MAP : Int = 34068;\n\tstatic inline var TEXTURE_CUBE_MAP_POSITIVE_X : Int = 34069;\n\tstatic inline var TEXTURE_CUBE_MAP_NEGATIVE_X : Int = 34070;\n\tstatic inline var TEXTURE_CUBE_MAP_POSITIVE_Y : Int = 34071;\n\tstatic inline var TEXTURE_CUBE_MAP_NEGATIVE_Y : Int = 34072;\n\tstatic inline var TEXTURE_CUBE_MAP_POSITIVE_Z : Int = 34073;\n\tstatic inline var TEXTURE_CUBE_MAP_NEGATIVE_Z : Int = 34074;\n\tstatic inline var MAX_CUBE_MAP_TEXTURE_SIZE : Int = 34076;\n\tstatic inline var TEXTURE0 : Int = 33984;\n\tstatic inline var TEXTURE1 : Int = 33985;\n\tstatic inline var TEXTURE2 : Int = 33986;\n\tstatic inline var TEXTURE3 : Int = 33987;\n\tstatic inline var TEXTURE4 : Int = 33988;\n\tstatic inline var TEXTURE5 : Int = 33989;\n\tstatic inline var TEXTURE6 : Int = 33990;\n\tstatic inline var TEXTURE7 : Int = 33991;\n\tstatic inline var TEXTURE8 : Int = 33992;\n\tstatic inline var TEXTURE9 : Int = 33993;\n\tstatic inline var TEXTURE10 : Int = 33994;\n\tstatic inline var TEXTURE11 : Int = 33995;\n\tstatic inline var TEXTURE12 : Int = 33996;\n\tstatic inline var TEXTURE13 : Int = 33997;\n\tstatic inline var TEXTURE14 : Int = 33998;\n\tstatic inline var TEXTURE15 : Int = 33999;\n\tstatic inline var TEXTURE16 : Int = 34000;\n\tstatic inline var TEXTURE17 : Int = 34001;\n\tstatic inline var TEXTURE18 : Int = 34002;\n\tstatic inline var TEXTURE19 : Int = 34003;\n\tstatic inline var TEXTURE20 : Int = 34004;\n\tstatic inline var TEXTURE21 : Int = 34005;\n\tstatic inline var TEXTURE22 : Int = 34006;\n\tstatic inline var TEXTURE23 : Int = 34007;\n\tstatic inline var TEXTURE24 : Int = 34008;\n\tstatic inline var TEXTURE25 : Int = 34009;\n\tstatic inline var TEXTURE26 : Int = 34010;\n\tstatic inline var TEXTURE27 : Int = 34011;\n\tstatic inline var TEXTURE28 : Int = 34012;\n\tstatic inline var TEXTURE29 : Int = 34013;\n\tstatic inline var TEXTURE30 : Int = 34014;\n\tstatic inline var TEXTURE31 : Int = 34015;\n\tstatic inline var ACTIVE_TEXTURE : Int = 34016;\n\tstatic inline var REPEAT : Int = 10497;\n\tstatic inline var CLAMP_TO_EDGE : Int = 33071;\n\tstatic inline var MIRRORED_REPEAT : Int = 33648;\n\tstatic inline var FLOAT_VEC2 : Int = 35664;\n\tstatic inline var FLOAT_VEC3 : Int = 35665;\n\tstatic inline var FLOAT_VEC4 : Int = 35666;\n\tstatic inline var INT_VEC2 : Int = 35667;\n\tstatic inline var INT_VEC3 : Int = 35668;\n\tstatic inline var INT_VEC4 : Int = 35669;\n\tstatic inline var BOOL : Int = 35670;\n\tstatic inline var BOOL_VEC2 : Int = 35671;\n\tstatic inline var BOOL_VEC3 : Int = 35672;\n\tstatic inline var BOOL_VEC4 : Int = 35673;\n\tstatic inline var FLOAT_MAT2 : Int = 35674;\n\tstatic inline var FLOAT_MAT3 : Int = 35675;\n\tstatic inline var FLOAT_MAT4 : Int = 35676;\n\tstatic inline var SAMPLER_2D : Int = 35678;\n\tstatic inline var SAMPLER_CUBE : Int = 35680;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_ENABLED : Int = 34338;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_SIZE : Int = 34339;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_STRIDE : Int = 34340;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_TYPE : Int = 34341;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_NORMALIZED : Int = 34922;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_POINTER : Int = 34373;\n\tstatic inline var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : Int = 34975;\n\tstatic inline var IMPLEMENTATION_COLOR_READ_TYPE : Int = 35738;\n\tstatic inline var IMPLEMENTATION_COLOR_READ_FORMAT : Int = 35739;\n\tstatic inline var COMPILE_STATUS : Int = 35713;\n\tstatic inline var LOW_FLOAT : Int = 36336;\n\tstatic inline var MEDIUM_FLOAT : Int = 36337;\n\tstatic inline var HIGH_FLOAT : Int = 36338;\n\tstatic inline var LOW_INT : Int = 36339;\n\tstatic inline var MEDIUM_INT : Int = 36340;\n\tstatic inline var HIGH_INT : Int = 36341;\n\tstatic inline var FRAMEBUFFER : Int = 36160;\n\tstatic inline var RENDERBUFFER : Int = 36161;\n\tstatic inline var RGBA4 : Int = 32854;\n\tstatic inline var RGB5_A1 : Int = 32855;\n\tstatic inline var RGB565 : Int = 36194;\n\tstatic inline var DEPTH_COMPONENT16 : Int = 33189;\n\tstatic inline var STENCIL_INDEX8 : Int = 36168;\n\tstatic inline var DEPTH_STENCIL : Int = 34041;\n\tstatic inline var RENDERBUFFER_WIDTH : Int = 36162;\n\tstatic inline var RENDERBUFFER_HEIGHT : Int = 36163;\n\tstatic inline var RENDERBUFFER_INTERNAL_FORMAT : Int = 36164;\n\tstatic inline var RENDERBUFFER_RED_SIZE : Int = 36176;\n\tstatic inline var RENDERBUFFER_GREEN_SIZE : Int = 36177;\n\tstatic inline var RENDERBUFFER_BLUE_SIZE : Int = 36178;\n\tstatic inline var RENDERBUFFER_ALPHA_SIZE : Int = 36179;\n\tstatic inline var RENDERBUFFER_DEPTH_SIZE : Int = 36180;\n\tstatic inline var RENDERBUFFER_STENCIL_SIZE : Int = 36181;\n\tstatic inline var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : Int = 36048;\n\tstatic inline var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : Int = 36049;\n\tstatic inline var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : Int = 36050;\n\tstatic inline var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : Int = 36051;\n\tstatic inline var COLOR_ATTACHMENT0 : Int = 36064;\n\tstatic inline var DEPTH_ATTACHMENT : Int = 36096;\n\tstatic inline var STENCIL_ATTACHMENT : Int = 36128;\n\tstatic inline var DEPTH_STENCIL_ATTACHMENT : Int = 33306;\n\tstatic inline var NONE : Int = 0;\n\tstatic inline var FRAMEBUFFER_COMPLETE : Int = 36053;\n\tstatic inline var FRAMEBUFFER_INCOMPLETE_ATTACHMENT : Int = 36054;\n\tstatic inline var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : Int = 36055;\n\tstatic inline var FRAMEBUFFER_INCOMPLETE_DIMENSIONS : Int = 36057;\n\tstatic inline var FRAMEBUFFER_UNSUPPORTED : Int = 36061;\n\tstatic inline var FRAMEBUFFER_BINDING : Int = 36006;\n\tstatic inline var RENDERBUFFER_BINDING : Int = 36007;\n\tstatic inline var MAX_RENDERBUFFER_SIZE : Int = 34024;\n\tstatic inline var INVALID_FRAMEBUFFER_OPERATION : Int = 1286;\n\tstatic inline var UNPACK_FLIP_Y_WEBGL : Int = 37440;\n\tstatic inline var UNPACK_PREMULTIPLY_ALPHA_WEBGL : Int = 37441;\n\tstatic inline var CONTEXT_LOST_WEBGL : Int = 37442;\n\tstatic inline var UNPACK_COLORSPACE_CONVERSION_WEBGL : Int = 37443;\n\tstatic inline var BROWSER_DEFAULT_WEBGL : Int = 37444;\n\t\n\t\n\t/**\n\t\tA read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `canvas` element.\n\t**/\n\tvar canvas(default,null) : js.html.CanvasElement;\n\t\n\t/**\n\t\tThe read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.\n\t**/\n\tvar drawingBufferWidth(default,null) : Int;\n\t\n\t/**\n\t\tThe read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.\n\t**/\n\tvar drawingBufferHeight(default,null) : Int;\n\t\n\t\n\t/**\n\t\tUpdates buffer data.\n\t**/\n\t@:overload( function( target : Int, size : Int, usage : Int ) : Void {} )\n\t@:overload( function( target : Int, data : js.lib.ArrayBuffer, usage : Int ) : Void {} )\n\tfunction bufferData( target : Int, data : js.lib.ArrayBufferView, usage : Int ) : Void;\n\t\n\t/**\n\t\tUpdates buffer data starting at a passed offset.\n\t**/\n\t@:overload( function( target : Int, offset : Int, data : js.lib.ArrayBuffer ) : Void {} )\n\tfunction bufferSubData( target : Int, offset : Int, data : js.lib.ArrayBufferView ) : Void;\n\t\n\t/**\n\t\tSpecifies a 2D texture image in a compressed format.\n\t**/\n\tfunction compressedTexImage2D( target : Int, level : Int, internalformat : Int, width : Int, height : Int, border : Int, data : js.lib.ArrayBufferView ) : Void;\n\t\n\t/**\n\t\tSpecifies a 2D texture sub-image in a compressed format.\n\t**/\n\tfunction compressedTexSubImage2D( target : Int, level : Int, xoffset : Int, yoffset : Int, width : Int, height : Int, format : Int, data : js.lib.ArrayBufferView ) : Void;\n\t\n\t/**\n\t\tReads a block of pixels from the `WebGLFrameBuffer`.\n\t\t@throws DOMError\n\t**/\n\tfunction readPixels( x : Int, y : Int, width : Int, height : Int, format : Int, type : Int, pixels : js.lib.ArrayBufferView ) : Void;\n\t\n\t/**\n\t\tSpecifies a 2D texture image.\n\t\t@throws DOMError\n\t**/\n\t@:overload( function( target : Int, level : Int, internalformat : Int, width : Int, height : Int, border : Int, format : Int, type : Int, pixels : js.lib.ArrayBufferView ) : Void {} )\n\t@:overload( function( target : Int, level : Int, internalformat : Int, format : Int, type : Int, pixels : js.html.ImageBitmap ) : Void {} )\n\t@:overload( function( target : Int, level : Int, internalformat : Int, format : Int, type : Int, pixels : js.html.ImageData ) : Void {} )\n\t@:overload( function( target : Int, level : Int, internalformat : Int, format : Int, type : Int, image : js.html.ImageElement ) : Void {} )\n\t@:overload( function( target : Int, level : Int, internalformat : Int, format : Int, type : Int, canvas : js.html.CanvasElement ) : Void {} )\n\tfunction texImage2D( target : Int, level : Int, internalformat : Int, format : Int, type : Int, video : js.html.VideoElement ) : Void;\n\t\n\t/**\n\t\tUpdates a sub-rectangle of the current `WebGLTexture`.\n\t\t@throws DOMError\n\t**/\n\t@:overload( function( target : Int, level : Int, xoffset : Int, yoffset : Int, width : Int, height : Int, format : Int, type : Int, pixels : js.lib.ArrayBufferView ) : Void {} )\n\t@:overload( function( target : Int, level : Int, xoffset : Int, yoffset : Int, format : Int, type : Int, pixels : js.html.ImageBitmap ) : Void {} )\n\t@:overload( function( target : Int, level : Int, xoffset : Int, yoffset : Int, format : Int, type : Int, pixels : js.html.ImageData ) : Void {} )\n\t@:overload( function( target : Int, level : Int, xoffset : Int, yoffset : Int, format : Int, type : Int, image : js.html.ImageElement ) : Void {} )\n\t@:overload( function( target : Int, level : Int, xoffset : Int, yoffset : Int, format : Int, type : Int, canvas : js.html.CanvasElement ) : Void {} )\n\tfunction texSubImage2D( target : Int, level : Int, xoffset : Int, yoffset : Int, format : Int, type : Int, video : js.html.VideoElement ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Float>) : Void {} )\n\tfunction uniform1fv( location : UniformLocation, data : js.lib.Float32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Float>) : Void {} )\n\tfunction uniform2fv( location : UniformLocation, data : js.lib.Float32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Float>) : Void {} )\n\tfunction uniform3fv( location : UniformLocation, data : js.lib.Float32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Float>) : Void {} )\n\tfunction uniform4fv( location : UniformLocation, data : js.lib.Float32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Int>) : Void {} )\n\tfunction uniform1iv( location : UniformLocation, data : js.lib.Int32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Int>) : Void {} )\n\tfunction uniform2iv( location : UniformLocation, data : js.lib.Int32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Int>) : Void {} )\n\tfunction uniform3iv( location : UniformLocation, data : js.lib.Int32Array ) : Void;\n\t@:overload( function( location : UniformLocation, data : Array<Int>) : Void {} )\n\tfunction uniform4iv( location : UniformLocation, data : js.lib.Int32Array ) : Void;\n\t@:overload( function( location : UniformLocation, transpose : Bool, data : Array<Float>) : Void {} )\n\tfunction uniformMatrix2fv( location : UniformLocation, transpose : Bool, data : js.lib.Float32Array ) : Void;\n\t@:overload( function( location : UniformLocation, transpose : Bool, data : Array<Float>) : Void {} )\n\tfunction uniformMatrix3fv( location : UniformLocation, transpose : Bool, data : js.lib.Float32Array ) : Void;\n\t@:overload( function( location : UniformLocation, transpose : Bool, data : Array<Float>) : Void {} )\n\tfunction uniformMatrix4fv( location : UniformLocation, transpose : Bool, data : js.lib.Float32Array ) : Void;\n\t\n\t/**\n\t\tReturns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.\n\t**/\n\tfunction getContextAttributes() : ContextAttributes;\n\t\n\t/**\n\t\tReturns `true` if the context is lost, otherwise returns `false`.\n\t**/\n\tfunction isContextLost() : Bool;\n\t\n\t/**\n\t\tReturns an `Array` of `DOMString` elements with all the supported WebGL extensions.\n\t**/\n\tfunction getSupportedExtensions() : Array<String>;\n\t\n\t/**\n\t\tReturns an extension object.\n\t\t@throws DOMError\n\t**/\n\tfunction getExtension<T>( name : Extension<T> ) : T;\n\t\n\t/**\n\t\tSelects the active texture unit.\n\t**/\n\tfunction activeTexture( texture : Int ) : Void;\n\t\n\t/**\n\t\tAttaches a `WebGLShader` to a `WebGLProgram`.\n\t**/\n\tfunction attachShader( program : Program, shader : Shader ) : Void;\n\t\n\t/**\n\t\tBinds a generic vertex index to a named attribute variable.\n\t**/\n\tfunction bindAttribLocation( program : Program, index : Int, name : String ) : Void;\n\t\n\t/**\n\t\tBinds a `WebGLBuffer` object to a given target.\n\t**/\n\tfunction bindBuffer( target : Int, buffer : Buffer ) : Void;\n\t\n\t/**\n\t\tBinds a `WebGLFrameBuffer` object to a given target.\n\t**/\n\tfunction bindFramebuffer( target : Int, framebuffer : Framebuffer ) : Void;\n\t\n\t/**\n\t\tBinds a `WebGLRenderBuffer` object to a given target.\n\t**/\n\tfunction bindRenderbuffer( target : Int, renderbuffer : Renderbuffer ) : Void;\n\t\n\t/**\n\t\tBinds a `WebGLTexture` object to a given target.\n\t**/\n\tfunction bindTexture( target : Int, texture : Texture ) : Void;\n\t\n\t/**\n\t\tSets the source and destination blending factors.\n\t**/\n\tfunction blendColor( red : Float, green : Float, blue : Float, alpha : Float ) : Void;\n\t\n\t/**\n\t\tSets both the RGB blend equation and alpha blend equation to a single equation.\n\t**/\n\tfunction blendEquation( mode : Int ) : Void;\n\t\n\t/**\n\t\tSets the RGB blend equation and alpha blend equation separately.\n\t**/\n\tfunction blendEquationSeparate( modeRGB : Int, modeAlpha : Int ) : Void;\n\t\n\t/**\n\t\tDefines which function is used for blending pixel arithmetic.\n\t**/\n\tfunction blendFunc( sfactor : Int, dfactor : Int ) : Void;\n\t\n\t/**\n\t\tDefines which function is used for blending pixel arithmetic for RGB and alpha components separately.\n\t**/\n\tfunction blendFuncSeparate( srcRGB : Int, dstRGB : Int, srcAlpha : Int, dstAlpha : Int ) : Void;\n\t\n\t/**\n\t\tReturns the status of the framebuffer.\n\t**/\n\tfunction checkFramebufferStatus( target : Int ) : Int;\n\t\n\t/**\n\t\tClears specified buffers to preset values.\n\t**/\n\tfunction clear( mask : Int ) : Void;\n\t\n\t/**\n\t\tSpecifies the color values used when clearing color buffers.\n\t**/\n\tfunction clearColor( red : Float, green : Float, blue : Float, alpha : Float ) : Void;\n\t\n\t/**\n\t\tSpecifies the depth value used when clearing the depth buffer.\n\t**/\n\tfunction clearDepth( depth : Float ) : Void;\n\t\n\t/**\n\t\tSpecifies the stencil value used when clearing the stencil buffer.\n\t**/\n\tfunction clearStencil( s : Int ) : Void;\n\t\n\t/**\n\t\tSets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.\n\t**/\n\tfunction colorMask( red : Bool, green : Bool, blue : Bool, alpha : Bool ) : Void;\n\t\n\t/**\n\t\tCompiles a `WebGLShader`.\n\t**/\n\tfunction compileShader( shader : Shader ) : Void;\n\t\n\t/**\n\t\tCopies a 2D texture image.\n\t**/\n\tfunction copyTexImage2D( target : Int, level : Int, internalformat : Int, x : Int, y : Int, width : Int, height : Int, border : Int ) : Void;\n\t\n\t/**\n\t\tCopies a 2D texture sub-image.\n\t**/\n\tfunction copyTexSubImage2D( target : Int, level : Int, xoffset : Int, yoffset : Int, x : Int, y : Int, width : Int, height : Int ) : Void;\n\t\n\t/**\n\t\tCreates a `WebGLBuffer` object.\n\t**/\n\tfunction createBuffer() : Buffer;\n\t\n\t/**\n\t\tCreates a `WebGLFrameBuffer` object.\n\t**/\n\tfunction createFramebuffer() : Framebuffer;\n\t\n\t/**\n\t\tCreates a `WebGLProgram`.\n\t**/\n\tfunction createProgram() : Program;\n\t\n\t/**\n\t\tCreates a `WebGLRenderBuffer` object.\n\t**/\n\tfunction createRenderbuffer() : Renderbuffer;\n\t\n\t/**\n\t\tCreates a `WebGLShader`.\n\t**/\n\tfunction createShader( type : Int ) : Shader;\n\t\n\t/**\n\t\tCreates a `WebGLTexture` object.\n\t**/\n\tfunction createTexture() : Texture;\n\t\n\t/**\n\t\tSpecifies whether or not front- and/or back-facing polygons can be culled.\n\t**/\n\tfunction cullFace( mode : Int ) : Void;\n\t\n\t/**\n\t\tDeletes a `WebGLBuffer` object.\n\t**/\n\tfunction deleteBuffer( buffer : Buffer ) : Void;\n\t\n\t/**\n\t\tDeletes a `WebGLFrameBuffer` object.\n\t**/\n\tfunction deleteFramebuffer( framebuffer : Framebuffer ) : Void;\n\t\n\t/**\n\t\tDeletes a `WebGLProgram`.\n\t**/\n\tfunction deleteProgram( program : Program ) : Void;\n\t\n\t/**\n\t\tDeletes a `WebGLRenderBuffer` object.\n\t**/\n\tfunction deleteRenderbuffer( renderbuffer : Renderbuffer ) : Void;\n\t\n\t/**\n\t\tDeletes a `WebGLShader`.\n\t**/\n\tfunction deleteShader( shader : Shader ) : Void;\n\t\n\t/**\n\t\tDeletes a `WebGLTexture` object.\n\t**/\n\tfunction deleteTexture( texture : Texture ) : Void;\n\t\n\t/**\n\t\tSpecifies a function that compares incoming pixel depth to the current depth buffer value.\n\t**/\n\tfunction depthFunc( func : Int ) : Void;\n\t\n\t/**\n\t\tSets whether writing into the depth buffer is enabled or disabled.\n\t**/\n\tfunction depthMask( flag : Bool ) : Void;\n\t\n\t/**\n\t\tSpecifies the depth range mapping from normalized device coordinates to window or viewport coordinates.\n\t**/\n\tfunction depthRange( zNear : Float, zFar : Float ) : Void;\n\t\n\t/**\n\t\tDetaches a `WebGLShader`.\n\t**/\n\tfunction detachShader( program : Program, shader : Shader ) : Void;\n\t\n\t/**\n\t\tDisables specific WebGL capabilities for this context.\n\t**/\n\tfunction disable( cap : Int ) : Void;\n\t\n\t/**\n\t\tDisables a vertex attribute array at a given position.\n\t**/\n\tfunction disableVertexAttribArray( index : Int ) : Void;\n\t\n\t/**\n\t\tRenders primitives from array data.\n\t**/\n\tfunction drawArrays( mode : Int, first : Int, count : Int ) : Void;\n\t\n\t/**\n\t\tRenders primitives from element array data.\n\t**/\n\tfunction drawElements( mode : Int, count : Int, type : Int, offset : Int ) : Void;\n\t\n\t/**\n\t\tEnables specific WebGL capabilities for this context.\n\t**/\n\tfunction enable( cap : Int ) : Void;\n\t\n\t/**\n\t\tEnables a vertex attribute array at a given position.\n\t**/\n\tfunction enableVertexAttribArray( index : Int ) : Void;\n\t\n\t/**\n\t\tBlocks execution until all previously called commands are finished.\n\t**/\n\tfunction finish() : Void;\n\t\n\t/**\n\t\tEmpties different buffer commands, causing all commands to be executed as quickly as possible.\n\t**/\n\tfunction flush() : Void;\n\t\n\t/**\n\t\tAttaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.\n\t**/\n\tfunction framebufferRenderbuffer( target : Int, attachment : Int, renderbuffertarget : Int, renderbuffer : Renderbuffer ) : Void;\n\t\n\t/**\n\t\tAttaches a textures image to a `WebGLFrameBuffer` object.\n\t**/\n\tfunction framebufferTexture2D( target : Int, attachment : Int, textarget : Int, texture : Texture, level : Int ) : Void;\n\t\n\t/**\n\t\tSpecifies whether polygons are front- or back-facing by setting a winding orientation.\n\t**/\n\tfunction frontFace( mode : Int ) : Void;\n\t\n\t/**\n\t\tGenerates a set of mipmaps for a `WebGLTexture` object.\n\t**/\n\tfunction generateMipmap( target : Int ) : Void;\n\t\n\t/**\n\t\tReturns information about an active attribute variable.\n\t**/\n\tfunction getActiveAttrib( program : Program, index : Int ) : ActiveInfo;\n\t\n\t/**\n\t\tReturns information about an active uniform variable.\n\t**/\n\tfunction getActiveUniform( program : Program, index : Int ) : ActiveInfo;\n\t\n\t/**\n\t\tReturns a list of `WebGLShader` objects attached to a `WebGLProgram`.\n\t**/\n\tfunction getAttachedShaders( program : Program ) : Array<Shader>;\n\t\n\t/**\n\t\tReturns the location of an attribute variable.\n\t**/\n\tfunction getAttribLocation( program : Program, name : String ) : Int;\n\t\n\t/**\n\t\tReturns information about the buffer.\n\t**/\n\tfunction getBufferParameter( target : Int, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns a value for the passed parameter name.\n\t\t@throws DOMError\n\t**/\n\tfunction getParameter( pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns error information.\n\t**/\n\tfunction getError() : Int;\n\t\n\t/**\n\t\tReturns information about the framebuffer.\n\t\t@throws DOMError\n\t**/\n\tfunction getFramebufferAttachmentParameter( target : Int, attachment : Int, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns information about the program.\n\t**/\n\tfunction getProgramParameter( program : Program, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns the information log for a `WebGLProgram` object.\n\t**/\n\tfunction getProgramInfoLog( program : Program ) : String;\n\t\n\t/**\n\t\tReturns information about the renderbuffer.\n\t**/\n\tfunction getRenderbufferParameter( target : Int, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns information about the shader.\n\t**/\n\tfunction getShaderParameter( shader : Shader, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.\n\t**/\n\tfunction getShaderPrecisionFormat( shadertype : Int, precisiontype : Int ) : ShaderPrecisionFormat;\n\t\n\t/**\n\t\tReturns the information log for a `WebGLShader` object.\n\t**/\n\tfunction getShaderInfoLog( shader : Shader ) : String;\n\t\n\t/**\n\t\tReturns the source code of a `WebGLShader` as a string.\n\t**/\n\tfunction getShaderSource( shader : Shader ) : String;\n\t\n\t/**\n\t\tReturns information about the texture.\n\t**/\n\tfunction getTexParameter( target : Int, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns the value of a uniform variable at a given location.\n\t**/\n\tfunction getUniform( program : Program, location : UniformLocation ) : Dynamic;\n\t\n\t/**\n\t\tReturns the location of a uniform variable.\n\t**/\n\tfunction getUniformLocation( program : Program, name : String ) : UniformLocation;\n\t\n\t/**\n\t\tReturns information about a vertex attribute at a given position.\n\t\t@throws DOMError\n\t**/\n\tfunction getVertexAttrib( index : Int, pname : Int ) : Dynamic;\n\t\n\t/**\n\t\tReturns the address of a given vertex attribute.\n\t**/\n\tfunction getVertexAttribOffset( index : Int, pname : Int ) : Int;\n\t\n\t/**\n\t\tSpecifies hints for certain behaviors. The interpretation of these hints depend on the implementation.\n\t**/\n\tfunction hint( target : Int, mode : Int ) : Void;\n\t\n\t/**\n\t\tReturns a Boolean indicating if the passed buffer is valid.\n\t**/\n\tfunction isBuffer( buffer : Buffer ) : Bool;\n\t\n\t/**\n\t\tTests whether a specific WebGL capability is enabled or not for this context.\n\t**/\n\tfunction isEnabled( cap : Int ) : Bool;\n\t\n\t/**\n\t\tReturns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.\n\t**/\n\tfunction isFramebuffer( framebuffer : Framebuffer ) : Bool;\n\t\n\t/**\n\t\tReturns a Boolean indicating if the passed `WebGLProgram` is valid.\n\t**/\n\tfunction isProgram( program : Program ) : Bool;\n\t\n\t/**\n\t\tReturns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.\n\t**/\n\tfunction isRenderbuffer( renderbuffer : Renderbuffer ) : Bool;\n\t\n\t/**\n\t\tReturns a Boolean indicating if the passed `WebGLShader` is valid.\n\t**/\n\tfunction isShader( shader : Shader ) : Bool;\n\t\n\t/**\n\t\tReturns a Boolean indicating if the passed `WebGLTexture` is valid.\n\t**/\n\tfunction isTexture( texture : Texture ) : Bool;\n\t\n\t/**\n\t\tSets the line width of rasterized lines.\n\t**/\n\tfunction lineWidth( width : Float ) : Void;\n\t\n\t/**\n\t\tLinks the passed `WebGLProgram` object.\n\t**/\n\tfunction linkProgram( program : Program ) : Void;\n\t\n\t/**\n\t\tSpecifies the pixel storage modes\n\t**/\n\tfunction pixelStorei( pname : Int, param : Int ) : Void;\n\t\n\t/**\n\t\tSpecifies the scale factors and units to calculate depth values.\n\t**/\n\tfunction polygonOffset( factor : Float, units : Float ) : Void;\n\t\n\t/**\n\t\tCreates a renderbuffer data store.\n\t**/\n\tfunction renderbufferStorage( target : Int, internalformat : Int, width : Int, height : Int ) : Void;\n\t\n\t/**\n\t\tSpecifies multi-sample coverage parameters for anti-aliasing effects.\n\t**/\n\tfunction sampleCoverage( value : Float, invert : Bool ) : Void;\n\t\n\t/**\n\t\tDefines the scissor box.\n\t**/\n\tfunction scissor( x : Int, y : Int, width : Int, height : Int ) : Void;\n\t\n\t/**\n\t\tSets the source code in a `WebGLShader`.\n\t**/\n\tfunction shaderSource( shader : Shader, source : String ) : Void;\n\t\n\t/**\n\t\tSets the both front and back function and reference value for stencil testing.\n\t**/\n\tfunction stencilFunc( func : Int, ref : Int, mask : Int ) : Void;\n\t\n\t/**\n\t\tSets the front and/or back function and reference value for stencil testing.\n\t**/\n\tfunction stencilFuncSeparate( face : Int, func : Int, ref : Int, mask : Int ) : Void;\n\t\n\t/**\n\t\tControls enabling and disabling of both the front and back writing of individual bits in the stencil planes.\n\t**/\n\tfunction stencilMask( mask : Int ) : Void;\n\t\n\t/**\n\t\tControls enabling and disabling of front and/or back writing of individual bits in the stencil planes.\n\t**/\n\tfunction stencilMaskSeparate( face : Int, mask : Int ) : Void;\n\t\n\t/**\n\t\tSets both the front and back-facing stencil test actions.\n\t**/\n\tfunction stencilOp( fail : Int, zfail : Int, zpass : Int ) : Void;\n\t\n\t/**\n\t\tSets the front and/or back-facing stencil test actions.\n\t**/\n\tfunction stencilOpSeparate( face : Int, fail : Int, zfail : Int, zpass : Int ) : Void;\n\tfunction texParameterf( target : Int, pname : Int, param : Float ) : Void;\n\tfunction texParameteri( target : Int, pname : Int, param : Int ) : Void;\n\tfunction uniform1f( location : UniformLocation, x : Float ) : Void;\n\tfunction uniform2f( location : UniformLocation, x : Float, y : Float ) : Void;\n\tfunction uniform3f( location : UniformLocation, x : Float, y : Float, z : Float ) : Void;\n\tfunction uniform4f( location : UniformLocation, x : Float, y : Float, z : Float, w : Float ) : Void;\n\tfunction uniform1i( location : UniformLocation, x : Int ) : Void;\n\tfunction uniform2i( location : UniformLocation, x : Int, y : Int ) : Void;\n\tfunction uniform3i( location : UniformLocation, x : Int, y : Int, z : Int ) : Void;\n\tfunction uniform4i( location : UniformLocation, x : Int, y : Int, z : Int, w : Int ) : Void;\n\t\n\t/**\n\t\tUses the specified `WebGLProgram` as part the current rendering state.\n\t**/\n\tfunction useProgram( program : Program ) : Void;\n\t\n\t/**\n\t\tValidates a `WebGLProgram`.\n\t**/\n\tfunction validateProgram( program : Program ) : Void;\n\tfunction vertexAttrib1f( indx : Int, x : Float ) : Void;\n\t@:overload( function( indx : Int, values : Array<Float>) : Void {} )\n\tfunction vertexAttrib1fv( indx : Int, values : js.lib.Float32Array ) : Void;\n\tfunction vertexAttrib2f( indx : Int, x : Float, y : Float ) : Void;\n\t@:overload( function( indx : Int, values : Array<Float>) : Void {} )\n\tfunction vertexAttrib2fv( indx : Int, values : js.lib.Float32Array ) : Void;\n\tfunction vertexAttrib3f( indx : Int, x : Float, y : Float, z : Float ) : Void;\n\t@:overload( function( indx : Int, values : Array<Float>) : Void {} )\n\tfunction vertexAttrib3fv( indx : Int, values : js.lib.Float32Array ) : Void;\n\tfunction vertexAttrib4f( indx : Int, x : Float, y : Float, z : Float, w : Float ) : Void;\n\t@:overload( function( indx : Int, values : Array<Float>) : Void {} )\n\tfunction vertexAttrib4fv( indx : Int, values : js.lib.Float32Array ) : Void;\n\t\n\t/**\n\t\tSpecifies the data formats and locations of vertex attributes in a vertex attributes array.\n\t**/\n\tfunction vertexAttribPointer( indx : Int, size : Int, type : Int, normalized : Bool, stride : Int, offset : Int ) : Void;\n\t\n\t/**\n\t\tSets the viewport.\n\t**/\n\tfunction viewport( x : Int, y : Int, width : Int, height : Int ) : Void;\n}"]}