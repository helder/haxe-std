{"sourceRoot":"","names":[],"mappings":";AA0BA,0CCCC,UCuDD,OAWoC,SDjEnC,aCsDD,OAWoC,SDhEnC,WCqDD,OAWoC,SFlEnC,OEuDD,OChDO,cHNN,iBEsDD,YFrDC,cEqDD,OAtBoC,QF9BnC,UEoDD,OEhDO","version":3,"file":"SpeechRecognitionEventInit.d.ts.map","sources":["../../../../../../../haxe/versions/4.0.2/std/js/html/SpeechRecognitionEventInit.hx","../../../../../../../haxe/versions/4.0.2/std/js/html/EventInit.hx","../../../../../../../haxe/versions/4.0.2/std/StdTypes.hx","../../../../../../../haxe/versions/4.0.2/std/js/html/HTMLDocument.hx","../../../../../../../haxe/versions/4.0.2/std/js/html/SpeechRecognitionResultList.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\SpeechRecognitionEvent.webidl. Do not edit!\n\npackage js.html;\n\ntypedef SpeechRecognitionEventInit = EventInit & {\n\tvar ?emma : HTMLDocument;\n\tvar ?interpretation : Dynamic;\n\tvar ?resultIndex : Int;\n\tvar ?results : SpeechRecognitionResultList;\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\Event.webidl. Do not edit!\n\npackage js.html;\n\ntypedef EventInit = {\n\tvar ?bubbles : Bool;\n\tvar ?cancelable : Bool;\n\tvar ?composed : Bool;\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\HTMLDocument.webidl. Do not edit!\n\npackage js.html;\n\n/**\n\t`HTMLDocument` is an abstract interface which extends the `Document` interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides.\n\n\tDocumentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>\n**/\n@:native(\"HTMLDocument\")\nextern class HTMLDocument extends Document {\n\tvar domain : String;\n\tvar cookie : String;\n\tvar designMode : String;\n\tvar fgColor : String;\n\tvar linkColor : String;\n\tvar vlinkColor : String;\n\tvar alinkColor : String;\n\tvar bgColor : String;\n\tvar all(default,null) : HTMLAllCollection;\n\t\n\t/** @throws DOMError */\n\t@:overload( function( ?type : String, replace : String = \"\" ) : HTMLDocument {} )\n\tfunction open( url : String, name : String, features : String, replace : Bool = false ) : Window;\n\t/** @throws DOMError */\n\tfunction close() : Void;\n\t/** @throws DOMError */\n\tfunction write( text : haxe.extern.Rest<String> ) : Void;\n\t/** @throws DOMError */\n\tfunction writeln( text : haxe.extern.Rest<String> ) : Void;\n\t/** @throws DOMError */\n\tfunction execCommand( commandId : String, showUI : Bool = false, value : String = \"\" ) : Bool;\n\t/** @throws DOMError */\n\tfunction queryCommandEnabled( commandId : String ) : Bool;\n\t/** @throws DOMError */\n\tfunction queryCommandIndeterm( commandId : String ) : Bool;\n\t/** @throws DOMError */\n\tfunction queryCommandState( commandId : String ) : Bool;\n\tfunction queryCommandSupported( commandId : String ) : Bool;\n\t/** @throws DOMError */\n\tfunction queryCommandValue( commandId : String ) : String;\n\tfunction clear() : Void;\n\tfunction captureEvents() : Void;\n\tfunction releaseEvents() : Void;\n\t/** Shorthand for creating an HTML `<td>` element. */\n\tinline function createTableCellElement() : TableCellElement { return cast createElement(\"td\"); }\n\t/** Shorthand for creating an HTML `<select>` element. */\n\tinline function createSelectElement() : SelectElement { return cast createElement(\"select\"); }\n\t/** Shorthand for creating an HTML `<font>` element. */\n\tinline function createFontElement() : FontElement { return cast createElement(\"font\"); }\n\t/** Shorthand for creating an HTML `<dl>` element. */\n\tinline function createDListElement() : DListElement { return cast createElement(\"dl\"); }\n\t/** Shorthand for creating an HTML `<frame>` element. */\n\tinline function createFrameElement() : FrameElement { return cast createElement(\"frame\"); }\n\t/** Shorthand for creating an HTML `<ol>` element. */\n\tinline function createOListElement() : OListElement { return cast createElement(\"ol\"); }\n\t/** Shorthand for creating an HTML `<li>` element. */\n\tinline function createLIElement() : LIElement { return cast createElement(\"li\"); }\n\t/** Shorthand for creating an HTML `<hr>` element. */\n\tinline function createHRElement() : HRElement { return cast createElement(\"hr\"); }\n\t/** Shorthand for creating an HTML `<param>` element. */\n\tinline function createParamElement() : ParamElement { return cast createElement(\"param\"); }\n\t/** Shorthand for creating an HTML `<label>` element. */\n\tinline function createLabelElement() : LabelElement { return cast createElement(\"label\"); }\n\t/** Shorthand for creating an HTML `<track>` element. */\n\tinline function createTrackElement() : TrackElement { return cast createElement(\"track\"); }\n\t/** Shorthand for creating an HTML `<div>` element. */\n\tinline function createDivElement() : DivElement { return cast createElement(\"div\"); }\n\t/** Shorthand for creating an HTML `<title>` element. */\n\tinline function createTitleElement() : TitleElement { return cast createElement(\"title\"); }\n\t/** Shorthand for creating an HTML `<a>` element. */\n\tinline function createAnchorElement() : AnchorElement { return cast createElement(\"a\"); }\n\t/** Shorthand for creating an HTML `<style>` element. */\n\tinline function createStyleElement() : StyleElement { return cast createElement(\"style\"); }\n\t/** Shorthand for creating an HTML `<embed>` element. */\n\tinline function createEmbedElement() : EmbedElement { return cast createElement(\"embed\"); }\n\t/** Shorthand for creating an HTML `<meter>` element. */\n\tinline function createMeterElement() : MeterElement { return cast createElement(\"meter\"); }\n\t/** Shorthand for creating an HTML `<picture>` element. */\n\tinline function createPictureElement() : PictureElement { return cast createElement(\"picture\"); }\n\t/** Shorthand for creating an HTML `<pre>` element. */\n\tinline function createPreElement() : PreElement { return cast createElement(\"pre\"); }\n\t/** Shorthand for creating an HTML `<thead>` element. */\n\tinline function createTableSectionElement() : TableSectionElement { return cast createElement(\"thead\"); }\n\t/** Shorthand for creating an HTML `<head>` element. */\n\tinline function createHeadElement() : HeadElement { return cast createElement(\"head\"); }\n\t/** Shorthand for creating an HTML `<optgroup>` element. */\n\tinline function createOptGroupElement() : OptGroupElement { return cast createElement(\"optgroup\"); }\n\t/** Shorthand for creating an HTML `<audio>` element. */\n\tinline function createAudioElement() : AudioElement { return cast createElement(\"audio\"); }\n\t/** Shorthand for creating an HTML `<video>` element. */\n\tinline function createVideoElement() : VideoElement { return cast createElement(\"video\"); }\n\t/** Shorthand for creating an HTML `<legend>` element. */\n\tinline function createLegendElement() : LegendElement { return cast createElement(\"legend\"); }\n\t/** Shorthand for creating an HTML `<ul>` element. */\n\tinline function createUListElement() : UListElement { return cast createElement(\"ul\"); }\n\t/** Shorthand for creating an HTML `<dir>` element. */\n\tinline function createDirectoryElement() : DirectoryElement { return cast createElement(\"dir\"); }\n\t/** Shorthand for creating an HTML `<table>` element. */\n\tinline function createTableElement() : TableElement { return cast createElement(\"table\"); }\n\t/** Shorthand for creating an HTML `<slot>` element. */\n\tinline function createSlotElement() : SlotElement { return cast createElement(\"slot\"); }\n\t/** Shorthand for creating an HTML `<source>` element. */\n\tinline function createSourceElement() : SourceElement { return cast createElement(\"source\"); }\n\t/** Shorthand for creating an HTML `<link>` element. */\n\tinline function createLinkElement() : LinkElement { return cast createElement(\"link\"); }\n\t/** Shorthand for creating an HTML `<iframe>` element. */\n\tinline function createIFrameElement() : IFrameElement { return cast createElement(\"iframe\"); }\n\t/** Shorthand for creating an HTML `<media>` element. */\n\tinline function createMediaElement() : MediaElement { return cast createElement(\"media\"); }\n\t/** Shorthand for creating an HTML `<map>` element. */\n\tinline function createMapElement() : MapElement { return cast createElement(\"map\"); }\n\t/** Shorthand for creating an HTML `<form>` element. */\n\tinline function createFormElement() : FormElement { return cast createElement(\"form\"); }\n\t/** Shorthand for creating an HTML `<option>` element. */\n\tinline function createOptionElement() : OptionElement { return cast createElement(\"option\"); }\n\t/** Shorthand for creating an HTML `<meta>` element. */\n\tinline function createMetaElement() : MetaElement { return cast createElement(\"meta\"); }\n\t/** Shorthand for creating an HTML `<object>` element. */\n\tinline function createObjectElement() : ObjectElement { return cast createElement(\"object\"); }\n\t/** Shorthand for creating an HTML `<caption>` element. */\n\tinline function createTableCaptionElement() : TableCaptionElement { return cast createElement(\"caption\"); }\n\t/** Shorthand for creating an HTML `<img>` element. */\n\tinline function createImageElement() : ImageElement { return cast createElement(\"img\"); }\n\t/** Shorthand for creating an HTML `<textarea>` element. */\n\tinline function createTextAreaElement() : TextAreaElement { return cast createElement(\"textarea\"); }\n\t/** Shorthand for creating an HTML `<script>` element. */\n\tinline function createScriptElement() : ScriptElement { return cast createElement(\"script\"); }\n\t/** Shorthand for creating an HTML `<datalist>` element. */\n\tinline function createDataListElement() : DataListElement { return cast createElement(\"datalist\"); }\n\t/** Shorthand for creating an HTML `<mod>` element. */\n\tinline function createModElement() : ModElement { return cast createElement(\"mod\"); }\n\t/** Shorthand for creating an HTML `<output>` element. */\n\tinline function createOutputElement() : OutputElement { return cast createElement(\"output\"); }\n\t/** Shorthand for creating an HTML `<area>` element. */\n\tinline function createAreaElement() : AreaElement { return cast createElement(\"area\"); }\n\t/** Shorthand for creating an HTML `<progress>` element. */\n\tinline function createProgressElement() : ProgressElement { return cast createElement(\"progress\"); }\n\t/** Shorthand for creating an HTML `<button>` element. */\n\tinline function createButtonElement() : ButtonElement { return cast createElement(\"button\"); }\n\t/** Shorthand for creating an HTML `<fieldset>` element. */\n\tinline function createFieldSetElement() : FieldSetElement { return cast createElement(\"fieldset\"); }\n\t/** Shorthand for creating an HTML `<menu>` element. */\n\tinline function createMenuElement() : MenuElement { return cast createElement(\"menu\"); }\n\t/** Shorthand for creating an HTML `<br>` element. */\n\tinline function createBRElement() : BRElement { return cast createElement(\"br\"); }\n\t/** Shorthand for creating an HTML `<span>` element. */\n\tinline function createSpanElement() : SpanElement { return cast createElement(\"span\"); }\n\t/** Shorthand for creating an HTML `<details>` element. */\n\tinline function createDetailsElement() : DetailsElement { return cast createElement(\"details\"); }\n\t/** Shorthand for creating an HTML `<body>` element. */\n\tinline function createBodyElement() : BodyElement { return cast createElement(\"body\"); }\n\t/** Shorthand for creating an HTML `<input>` element. */\n\tinline function createInputElement() : InputElement { return cast createElement(\"input\"); }\n\t/** Shorthand for creating an HTML `<base>` element. */\n\tinline function createBaseElement() : BaseElement { return cast createElement(\"base\"); }\n\t/** Shorthand for creating an HTML `<quote>` element. */\n\tinline function createQuoteElement() : QuoteElement { return cast createElement(\"quote\"); }\n\t/** Shorthand for creating an HTML `<frameset>` element. */\n\tinline function createFrameSetElement() : FrameSetElement { return cast createElement(\"frameset\"); }\n\t/** Shorthand for creating an HTML `<canvas>` element. */\n\tinline function createCanvasElement() : CanvasElement { return cast createElement(\"canvas\"); }\n\t/** Shorthand for creating an HTML `<p>` element. */\n\tinline function createParagraphElement() : ParagraphElement { return cast createElement(\"p\"); }\n\t/** Shorthand for creating an HTML `<col>` element. */\n\tinline function createTableColElement() : TableColElement { return cast createElement(\"col\"); }\n\t/** Shorthand for creating an HTML `<tr>` element. */\n\tinline function createTableRowElement() : TableRowElement { return cast createElement(\"tr\"); }\n\t/** Shorthand for creating an HTML `<html>` element. */\n\tinline function createHtmlElement() : HtmlElement { return cast createElement(\"html\"); }\n\t\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\SpeechRecognitionResultList.webidl. Do not edit!\n\npackage js.html;\n\n/**\n\tThe `SpeechRecognitionResultList` interface of the Web Speech API represents a list of `SpeechRecognitionResult` objects, or a single one if results are being captured in `continuous` mode.\n\n\tDocumentation [SpeechRecognitionResultList](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList>\n**/\n@:native(\"SpeechRecognitionResultList\")\nextern class SpeechRecognitionResultList implements ArrayAccess<SpeechRecognitionResult> {\n\t\n\t/**\n\t\tReturns the length of the \"array\" — the number of `SpeechRecognitionResult` objects in the list.\n\t**/\n\tvar length(default,null) : Int;\n\t\n\tfunction item( index : Int ) : SpeechRecognitionResult;\n}"]}