{"sourceRoot":"","names":[],"mappings":";AAiCA,iCC+HY,YC9EZ,OAWoC,SD2ExB,iBCtFZ,OAtBoC,QFnBxB,oBEyCZ,OAtBoC,QD0HxB,iBCpGZ,OAtBoC,QDmHxB,aC7FZ,OAtBoC,QFXxB,aEiCZ,OC7DiB,QFsKL,UCzGZ,OAtBoC","version":3,"file":"Agent.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/https/Agent.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/http/Agent.hx","../../../../../../../../haxe/versions/4.1.5/std/StdTypes.hx","../../../../../../../../haxe/versions/4.1.5/std/js/_std/String.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.https;\r\n\r\n/**\r\n\tAn Agent object for HTTPS similar to `http.Agent`.\r\n\tSee [https.request](https://nodejs.org/api/http.html#http_http_request_options_callback) for more information.\r\n**/\r\n@:jsRequire(\"https\", \"Agent\")\r\nextern class Agent extends js.node.http.Agent {\r\n\tfunction new(?options:HttpsAgentOptions);\r\n}\r\n\r\ntypedef HttpsAgentOptions = {\r\n\t> js.node.http.Agent.HttpAgentOptions,\r\n\r\n\t/**\r\n\t\tmaximum number of TLS cached sessions. Use `0` to disable TLS session caching.\r\n\r\n\t\tDefault: `100`.\r\n\t**/\r\n\t@:optional var maxCachedSessions:Int;\r\n\r\n\t/**\r\n\t\tthe value of [Server Name Indication extension](https://en.wikipedia.org/wiki/Server_Name_Indication) to be sent to the server.\r\n\t\tUse empty string `''` to disable sending the extension.\r\n\r\n\t\tDefault: hostname of the target server, unless the target server is specified using an IP address, in which case the default is `''` (no extension).\r\n\t**/\r\n\t@:optional var servername:String;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.http;\r\n\r\nimport haxe.DynamicAccess;\r\nimport js.node.net.Socket;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tAn `Agent` is responsible for managing connection persistence and reuse for HTTP clients.\r\n\tIt maintains a queue of pending requests for a given host and port, reusing a single socket connection for each until the queue is empty,\r\n\tat which time the socket is either destroyed or put into a pool where it is kept to be used again for requests to the same host and port.\r\n\tWhether it is destroyed or pooled depends on the `keepAlive` option.\r\n\r\n\tPooled connections have TCP Keep-Alive enabled for them, but servers may still close idle connections, in which case they will be removed\r\n\tfrom the pool and a new connection will be made when a new HTTP request is made for that host and port.\r\n\tServers may also refuse to allow multiple requests over the same connection, in which case the connection will have to be remade for every\r\n\trequest and cannot be pooled.\r\n\tThe `Agent` will still make the requests to that server, but each one will occur over a new connection.\r\n\r\n\tWhen a connection is closed by the client or the server, it is removed from the pool.\r\n\tAny unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests.\r\n\t(see [socket.unref()](https://nodejs.org/api/net.html#net_socket_unref)).\r\n\r\n\tIt is good practice, to `destroy()` an Agent instance when it is no longer in use, because unused sockets consume OS resources.\r\n\r\n\tSockets are removed from an agent when the socket emits either a `'close'` event or an `'agentRemove'` event.\r\n\tWhen intending to keep one HTTP request open for a long time without keeping it in the agent, something like the following may be done.\r\n\r\n\tAn agent may also be used for an individual request. By providing `{agent: false}` as an option to the `http.get()` or `http.request()` functions,\r\n\ta one-time use `Agent` with default options will be used for the client connection.\r\n**/\r\n@:jsRequire(\"http\", \"Agent\")\r\nextern class Agent {\r\n\t/**\r\n\t\t`options` in socket.connect() are also supported.\r\n\r\n\t\tThe default `http.globalAgent` that is used by `http.request()` has all of these values set to their respective defaults.\r\n\r\n\t\tTo configure any of them, a custom `http.Agent` instance must be created.\r\n\t**/\r\n\tfunction new(?options:HttpAgentOptions);\r\n\r\n\t/**\r\n\t\tProduces a socket/stream to be used for HTTP requests.\r\n\r\n\t\tBy default, this function is the same as `net.createConnection()`.\r\n\t\tHowever, custom agents may override this method in case greater flexibility is desired.\r\n\r\n\t\tA socket/stream can be supplied in one of two ways: by returning the socket/stream from this function,\r\n\t\tor by passing the socket/stream to `callback`.\r\n\r\n\t\t`callback` has a signature of `(err, stream)`.\r\n\t**/\r\n\t#if haxe4\r\n\tfunction createConnection(options:SocketConnectOptionsTcp, ?callback:(err:Error, stream:Socket) -> Void):Socket;\r\n\t#else\r\n\tfunction createConnection(options:SocketConnectOptionsTcp, ?callback:Error->Socket->Void):Socket;\r\n\t#end\r\n\r\n\t/**\r\n\t\tCalled when `socket` is detached from a request and could be persisted by the `Agent`.\r\n\r\n\t\tThis method can be overridden by a particular `Agent` subclass.\r\n\t\tIf this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.\r\n\t**/\r\n\tfunction keepSocketAlive(socket:Socket):Void;\r\n\r\n\t/**\r\n\t\tCalled when `socket` is attached to `request` after being persisted because of the keep-alive options.\r\n\r\n\t\tThis method can be overridden by a particular `Agent` subclass.\r\n\t**/\r\n\tfunction reuseSocket(socket:Socket, request:ClientRequest):Void;\r\n\r\n\t/**\r\n\t\tDestroy any sockets that are currently in use by the agent.\r\n\r\n\t\tIt is usually not necessary to do this. However, if using an agent with `keepAlive` enabled,\r\n\t\tthen it is best to explicitly shut down the agent when it will no longer be used. Otherwise,\r\n\t\tsockets may hang open for quite a long time before the server terminates them.\r\n\t**/\r\n\tfunction destroy():Void;\r\n\r\n\t/**\r\n\t\tAn object which contains arrays of sockets currently awaiting use by the agent when keepAlive is enabled.\r\n\t\tDo not modify.\r\n\t */\r\n\tvar freeSockets(default, null):DynamicAccess<Array<Socket>>;\r\n\r\n\t/**\r\n\t\tGet a unique name for a set of request options, to determine whether a connection can be reused.\r\n\t\tFor an HTTP agent, this returns `host:port:localAddress` or `host:port:localAddress:family`.\r\n\t\tFor an HTTPS agent, the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options that determine socket reusability.\r\n\t**/\r\n\tfunction getName(options:js.node.Http.HttpRequestOptions):String;\r\n\r\n\t/**\r\n\t\tBy default set to `256`.\r\n\t\tFor agents with `keepAlive` enabled, this sets the maximum number of sockets that will be left open in the free state.\r\n\t**/\r\n\tvar maxFreeSockets:Float;\r\n\r\n\t/**\r\n\t\tBy default set to `Infinity`.\r\n\t\tDetermines how many concurrent sockets the agent can have open per origin. Origin is the returned value of `getName()`.\r\n\t**/\r\n\tvar maxSockets:Float;\r\n\r\n\t/**\r\n\t\tAn object which contains queues of requests that have not yet been assigned to sockets.\r\n\t\tDo not modify.\r\n\t**/\r\n\tvar requests(default, null):DynamicAccess<Array<ClientRequest>>;\r\n\r\n\t/**\r\n\t\tAn object which contains arrays of sockets currently in use by the agent.\r\n\t\tDo not modify.\r\n\t**/\r\n\tvar sockets(default, null):DynamicAccess<Array<Socket>>;\r\n}\r\n\r\n/**\r\n\tOptions for `Agent` constructor.\r\n**/\r\ntypedef HttpAgentOptions = {\r\n\t/**\r\n\t\tKeep sockets around even when there are no outstanding requests, so they can be used for future requests\r\n\t\twithout having to reestablish a TCP connection.\r\n\t\tNot to be confused with the `keep-alive` value of the `Connection` header.\r\n\t\tThe `Connection: keep-alive` header is always sent when using an agent except when the `Connection` header\r\n\t\tis explicitly specified or when the `keepAlive` and `maxSockets` options are respectively set to `false` and `Infinity`,\r\n\t\tin which case `Connection: close` will be used.\r\n\r\n\t\tDefault: `false`\r\n\t**/\r\n\t@:optional var keepAlive:Bool;\r\n\r\n\t/**\r\n\t\tWhen using the `keepAlive` option, specifies the [initial delay](https://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay) for TCP Keep-Alive packets.\r\n\t\tIgnored when the `keepAlive` option is `false` or `undefined`.\r\n\r\n\t\tDefault: `1000`.\r\n\t**/\r\n\t@:optional var keepAliveMsecs:Int;\r\n\r\n\t/**\r\n\t\tMaximum number of sockets to allow per host. Each request will use a new socket until the maximum is reached.\r\n\r\n\t\tDefault: `Infinity`.\r\n\t**/\r\n\t@:optional var maxSockets:Int;\r\n\r\n\t/**\r\n\t\tMaximum number of sockets to leave open in a free state. Only relevant if `keepAlive` is set to `true`.\r\n\r\n\t\tDefault: `256`.\r\n\t**/\r\n\t@:optional var maxFreeSockets:Int;\r\n\r\n\t/**\r\n\t\tSocket timeout in milliseconds. This will set the timeout when the socket is created.\r\n\t**/\r\n\t@:optional var timeout:Int;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}