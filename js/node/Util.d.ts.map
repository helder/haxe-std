{"sourceRoot":"","names":[],"mappings":";YA8PA,sBAyBY,SCrMZ,OAWoC,SDiLxB,QC5LZ,OAtBoC,QDyMxB,aCnLZ,OAWoC;;YDgMpC,kBAkCY,cC7OZ,OArCoC,QD0OxB,SCrMZ,OAWoC,SD+OxB,UC1PZ,OAWoC,OC1DpC,GDyBoC,QDyOxB,gBCnNZ,OAWoC,SDiLxB,QC5LZ,OAtBoC,QDkSxB,UC5QZ,OAWoC,OC1DpC,GCdiB,QHiSL,iBCpOZ,OAtBoC,QDyMxB,aCnLZ,OAWoC,SD+MxB,YC1NZ,OAWoC,SDuPxB,SClQZ,OAWoC,OC1DpC,8BDyBoC","version":3,"file":"Util.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Util.hx","../../../../../../../haxe/versions/4.1.4/std/StdTypes.hx","../../../../../../../haxe/versions/4.1.4/std/haxe/extern/EitherType.hx","../../../../../../../haxe/versions/4.1.4/std/js/_std/String.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.Constraints.Function;\r\nimport haxe.extern.EitherType;\r\nimport haxe.extern.Rest;\r\nimport js.node.stream.Readable;\r\nimport js.node.stream.Writable;\r\n#if haxe4\r\nimport js.lib.Error;\r\nimport js.lib.Promise;\r\n#else\r\nimport js.Error;\r\nimport js.Promise;\r\n#end\r\n\r\n/**\r\n\tThe `util` module is primarily designed to support the needs of Node.js' own internal APIs.\r\n\r\n\t@see https://nodejs.org/api/util.html#util_util\r\n**/\r\n@:jsRequire(\"util\")\r\nextern class Util {\r\n\t/**\r\n\t\tTakes an `async` function (or a function that returns a `Promise`) and returns a function following the\r\n\t\terror-first callback style, i.e. taking an `(err, value) => ...` callback as the last argument.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_callbackify_original\r\n\t**/\r\n\tstatic function callbackify(original:Function, args:Rest<Dynamic>):Null<Error>->Null<Dynamic>->Void;\r\n\r\n\t/**\r\n\t\tThe `util.debuglog()` method is used to create a function that conditionally writes debug messages to `stderr`\r\n\t\tbased on the existence of the `NODE_DEBUG` environment variable.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_debuglog_section\r\n\t**/\r\n\tstatic function debuglog(section:String):Rest<Dynamic>->Void;\r\n\r\n\t/**\r\n\t\tThe `util.deprecate()` method wraps `fn` (which may be a function or class) in such a way that it is marked\r\n\t\tasdeprecated.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_deprecate_fn_msg_code\r\n\t**/\r\n\tstatic function deprecate<T:haxe.Constraints.Function>(fun:T, msg:String, ?code:String):T;\r\n\r\n\t/**\r\n\t\tThe `util.format()` method returns a formatted string using the first argument as a `printf`-like format string\r\n\t\twhich can contain zero or more format specifiers.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_format_format_args\r\n\t**/\r\n\t@:overload(function(args:Rest<Dynamic>):String {})\r\n\tstatic function format(format:String, args:Rest<Dynamic>):String;\r\n\r\n\t/**\r\n\t\tThis function is identical to `util.format()`, except in that it takes an `inspectOptions` argument which\r\n\t\tspecifies options that are passed along to `util.inspect()`.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_formatwithoptions_inspectoptions_format_args\r\n\t**/\r\n\t@:overload(function(inspectOptions:InspectOptions, args:Rest<Dynamic>):String {})\r\n\tstatic function formatWithOptions(inspectOptions:InspectOptions, format:String, args:Rest<Dynamic>):String;\r\n\r\n\t/**\r\n\t\tReturns the string name for a numeric error code that comes from a Node.js API.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_getsystemerrorname_err\r\n\t**/\r\n\tstatic function getSystemErrorName(err:Int):String;\r\n\r\n\t/**\r\n\t\tInherit the prototype methods from one `constructor` into another.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function inherits(constructor:Class<Dynamic>, superConstructor:Class<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tThe `util.inspect()` method returns a string representation of `object` that is intended for debugging.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_inspect_object_options\r\n\t**/\r\n\t@:overload(function(object:Dynamic, ?showHidden:Bool, ?depth:Int, ?colors:Bool):String {})\r\n\tstatic function inspect(object:Dynamic, ?options:InspectOptions):String;\r\n\r\n\t/**\r\n\t\tReturns `true` if there is deep strict equality between `val1` and `val2`.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_isdeepstrictequal_val1_val2\r\n\t**/\r\n\tstatic function isDeepStrictEqual(val1:Dynamic, val2:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tTakes a function following the common error-first callback style, i.e. taking an `(err, value) => ...` callback\r\n\t\tas the last argument, and returns a version that returns promises.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_promisify_original\r\n\t**/\r\n\tstatic function promisify(original:Function):Rest<Dynamic>->Promise<Dynamic>;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of `Console.error`.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.error instead\")\r\n\tstatic function debug(string:String):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of console.error.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.error instead\")\r\n\tstatic function error(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is an Array. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isArray(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Bool. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isBoolean(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Buffer. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isBuffer(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Date. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isDate(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is an Error. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isError(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Function. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isFunction(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is strictly null. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isNull(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is null or undefined. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isNullOrUndefined(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Float. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isNumber(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is strictly an Object and not a Function. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isObject(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a primitive type. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isPrimitive(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a RegExp. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isRegExp(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a String. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isString(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Symbol. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isSymbol(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is undefined. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isUndefined(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tOutput with timestamp on stdout.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function log(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of console.log.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.log instead\")\r\n\tstatic function print(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of console.log.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.log instead\")\r\n\tstatic function puts(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of stream.pipe().\r\n\t**/\r\n\t@:deprecated(\"Use `readableStream.pipe(writableStream)` instead\")\r\n\tstatic function pump(readableStream:IReadable, writableStream:IWritable, ?callback:Error->Void):Void;\r\n}\r\n\r\n/**\r\n\tOptions object used by `Console.dir`.\r\n**/\r\ntypedef InspectOptionsBase = {\r\n\t/**\r\n\t\tIf `true`, `object`'s non-enumerable symbols and properties are included in the formatted result.\r\n\t\t`WeakMap` and `WeakSet` entries are also included.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var showHidden:Bool;\r\n\r\n\t/**\r\n\t\tSpecifies the number of times to recurse while formatting `object`.\r\n\t\tThis is useful for inspecting large objects. To recurse up to the maximum call stack size pass `Infinity` or\r\n\t\t`null`.\r\n\r\n\t\tDefault: `2`.\r\n\t**/\r\n\t@:optional var depth:Null<Int>;\r\n\r\n\t/**\r\n\t\tIf `true`, the output is styled with ANSI color codes.\r\n\t\tColors are customizable.\r\n\t\tSee Customizing `util.inspect` colors.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var colors:Bool;\r\n}\r\n\r\n/**\r\n\tOptions object used by `Util.inspect`.\r\n**/\r\ntypedef InspectOptions = {\r\n\t> InspectOptionsBase,\r\n\r\n\t/**\r\n\t\tIf `false`, `[util.inspect.custom](depth, opts)` functions are not invoked.\r\n\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var customInspect:Bool;\r\n\r\n\t/**\r\n\t\tIf `true`, `Proxy` inspection includes the `target` and `handler` objects.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var showProxy:Bool;\r\n\r\n\t/**\r\n\t\tSpecifies the maximum number of `Array`, `TypedArray`, `WeakMap` and `WeakSet` elements to include when\r\n\t\tformatting.\r\n\t\tSet to `null` or `Infinity` to show all elements.\r\n\t\tSet to `0` or negative to show no elements.\r\n\r\n\t\tDefault: `100`.\r\n\t**/\r\n\t@:optional var maxArrayLength:Null<Int>;\r\n\r\n\t/**\r\n\t\tThe length at which input values are split across multiple lines.\r\n\t\tSet to `Infinity` to format the input as a single line (in combination with `compact` set to `true` or any\r\n\t\tnumber >= `1`).\r\n\r\n\t\tDefault: `80`.\r\n\t**/\r\n\t@:optional var breakLength:Float;\r\n\r\n\t/**\r\n\t\tSetting this to `false` causes each object key to be displayed on a new line.\r\n\t\tIt will also add new lines to text that is longer than `breakLength`.\r\n\t\tIf set to a number, the most `n` inner elements are united on a single line as long as all properties fit into\r\n\t\t`breakLength`.\r\n\t\tShort array elements are also grouped together.\r\n\t\tNo text will be reduced below 16 characters, no matter the `breakLength` size.\r\n\t\tFor more information, see the example below.\r\n\r\n\t\tDefault: `3`.\r\n\t**/\r\n\t@:optional var compact:EitherType<Bool, Int>;\r\n\r\n\t/**\r\n\t\tIf set to `true` or a function, all properties of an object, and `Set` and `Map` entries are sorted in the\r\n\t\tresulting string.\r\n\t\tIf set to `true` the default sort is used.\r\n\t\tIf set to a function, it is used as a compare function.\r\n\t**/\r\n\t@:optional var sorted:EitherType<Bool, Dynamic->Dynamic->Int>;\r\n\r\n\t/**\r\n\t\tIf set to `true`, getters are inspected.\r\n\t\tIf set to `'get'`, only getters without a corresponding setter are inspected.\r\n\t\tIf set to `'set'`, only getters with a corresponding setter are inspected.\r\n\t\tThis might cause side effects depending on the getter function.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var getters:EitherType<Bool, String>;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.extern;\n\n/**\n\tAn abstract type allowing values to be either of `T1` or `T2` type.\n\tSupports implicit casts from/to either types.\n\n\tIt is useful for interfacing with external code on dynamic platforms\n\tsuch as JavaScript or Python.\n\n\tOtherwise, use of this type is discouraged.\n\n\t@see <https://haxe.org/manual/lf-externs.html>\n**/\nabstract EitherType<T1, T2>(Dynamic) from T1 to T1 from T2 to T2 {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}