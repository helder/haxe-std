{"sourceRoot":"","names":[],"mappings":"QA0CA,kBAuNA;;YCjKA,qBAUY,gBCxBZ,OAWoC;;YDmBpC,iBANY,gBCxBZ,OAWoC,SDyBxB,KCpCZ,OAtBoC,QD+DxB,WCzCZ,OAWoC,SDmCxB,WC9CZ,OAWoC;;YDyCpC,2BAyBY,SC7EZ,OAtBoC,QDoFxB,OC9DZ,OC7DiB,QFgIL,eCnEZ,OC7DiB,QFqIL,YCxEZ,OAtBoC,QDwGxB,SClFZ,eC7DiB,cHqBjB,wBAuNA,4BElOW,OD2GV,MC9EmC;;YD8GpC,4BAIC,MEzJgB;;YF+JjB,gBAcC,SE7KgB,QFwKhB,QExKgB,QFmKhB,MC5HmC","version":3,"file":"Socket.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Dns.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/net/Socket.hx","../../../../../../../../haxe/versions/4.0.1/std/StdTypes.hx","../../../../../../../../haxe/versions/4.0.1/std/js/_std/String.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.extern.EitherType;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of possible Int `options` values for `Dns.lookup`.\r\n**/\r\n@:enum abstract DnsAddressFamily(Int) from Int to Int {\r\n\tvar IPv4 = 4;\r\n\tvar IPv6 = 6;\r\n}\r\n\r\n/**\r\n\tType of the `options` argument for `Dns.lookup`.\r\n**/\r\ntypedef DnsLookupOptions = {\r\n\t/**\r\n\t\tThe record family. If not provided, both IP v4 and v6 addresses are accepted.\r\n\t**/\r\n\t@:optional var family:DnsAddressFamily;\r\n\r\n\t/**\r\n\t\tIf present, it should be one or more of the supported `getaddrinfo` flags.\r\n\t\tIf hints is not provided, then no flags are passed to `getaddrinfo`.\r\n\t\tMultiple flags can be passed through hints by logically ORing their values.\r\n\t**/\r\n\t@:optional var hints:Int;\r\n\r\n\t/**\r\n\t\tWhen true, the callback returns all resolved addresses in an array, otherwise returns a single address.\r\n\t\tDefaults to false.\r\n\t**/\r\n\t@:optional var all:Bool;\r\n}\r\n\r\n/**\r\n\tEnumeration of possible `rrtype` value for `Dns.resolve`.\r\n**/\r\n@:enum abstract DnsRrtype(String) from String to String {\r\n\t/**\r\n\t\tIPV4 addresses, default\r\n\t**/\r\n\tvar A = \"A\";\r\n\r\n\t/**\r\n\t\tIPV6 addresses\r\n\t**/\r\n\tvar AAAA = \"AAAA\";\r\n\r\n\t/**\r\n\t\tmail exchange records\r\n\t**/\r\n\tvar MX = \"MX\";\r\n\r\n\t/**\r\n\t\ttext records\r\n\t**/\r\n\tvar TXT = \"TXT\";\r\n\r\n\t/**\r\n\t\tSRV records\r\n\t**/\r\n\tvar SRV = \"SRV\";\r\n\r\n\t/**\r\n\t\tused for reverse IP lookups\r\n\t**/\r\n\tvar PTR = \"PTR\";\r\n\r\n\t/**\r\n\t\tname server records\r\n\t**/\r\n\tvar NS = \"NS\";\r\n\r\n\t/**\r\n\t\tcanonical name records\r\n\t**/\r\n\tvar CNAME = \"CNAME\";\r\n\r\n\t/**\r\n\t\tstart of authority record\r\n\t**/\r\n\tvar SOA = \"SOA\";\r\n}\r\n\r\n/**\r\n\tTypes of address data returned by `resolve` functions.\r\n**/\r\ntypedef DnsResolvedAddressMX = {priority:Int, exchange:String};\r\n\r\ntypedef DnsResolvedAddressSRV = {priority:Int, weight:Int, port:Int, name:String};\r\ntypedef DnsResolvedAddressSOA = {nsname:String, hostmaster:String, serial:Int, refresh:Int, retry:Int, expire:Int, minttl:Int};\r\ntypedef DnsResolvedAddress = EitherType<String, EitherType<DnsResolvedAddressMX, EitherType<DnsResolvedAddressSOA, DnsResolvedAddressSRV>>>;\r\n\r\n/**\r\n\tError objects returned by dns lookups are of this type\r\n**/\r\nextern class DnsError extends Error {\r\n\t/**\r\n\t\tValues for error codes are listed in `Dns` class.\r\n\t**/\r\n\tvar code(default, null):DnsErrorCode;\r\n}\r\n\r\n/**\r\n\tEach DNS query can return one of the following error codes\r\n**/\r\n@:jsRequire(\"dns\")\r\n@:enum extern abstract DnsErrorCode(String) {\r\n\t/**\r\n\t\tDNS server returned answer with no data.\r\n\t**/\r\n\tvar NODATA;\r\n\r\n\t/**\r\n\t\tDNS server claims query was misformatted.\r\n\t**/\r\n\tvar FORMERR;\r\n\r\n\t/**\r\n\t\tDNS server returned general failure.\r\n\t**/\r\n\tvar SERVFAIL;\r\n\r\n\t/**\r\n\t\tDomain name not found.\r\n\t**/\r\n\tvar NOTFOUND;\r\n\r\n\t/**\r\n\t\tDNS server does not implement requested operation.\r\n\t**/\r\n\tvar NOTIMP;\r\n\r\n\t/**\r\n\t\tDNS server refused query.\r\n\t**/\r\n\tvar REFUSED;\r\n\r\n\t/**\r\n\t\tMisformatted DNS query.\r\n\t**/\r\n\tvar BADQUERY;\r\n\r\n\t/**\r\n\t\tMisformatted domain name.\r\n\t**/\r\n\tvar BADNAME;\r\n\r\n\t/**\r\n\t\tUnsupported address family.\r\n\t**/\r\n\tvar BADFAMILY;\r\n\r\n\t/**\r\n\t\tMisformatted DNS reply.\r\n\t**/\r\n\tvar BADRESP;\r\n\r\n\t/**\r\n\t\tCould not contact DNS servers.\r\n\t**/\r\n\tvar CONNREFUSED;\r\n\r\n\t/**\r\n\t\tTimeout while contacting DNS servers.\r\n\t**/\r\n\tvar TIMEOUT;\r\n\r\n\t/**\r\n\t\tEnd of file.\r\n\t**/\r\n\tvar EOF;\r\n\r\n\t/**\r\n\t\tError reading file.\r\n\t**/\r\n\tvar FILE;\r\n\r\n\t/**\r\n\t\tOut of memory.\r\n\t**/\r\n\tvar NOMEM;\r\n\r\n\t/**\r\n\t\tChannel is being destroyed.\r\n\t**/\r\n\tvar DESTRUCTION;\r\n\r\n\t/**\r\n\t\tMisformatted string.\r\n\t**/\r\n\tvar BADSTR;\r\n\r\n\t/**\r\n\t\tIllegal flags specified.\r\n\t**/\r\n\tvar BADFLAGS;\r\n\r\n\t/**\r\n\t\tGiven hostname is not numeric.\r\n\t**/\r\n\tvar NONAME;\r\n\r\n\t/**\r\n\t\tIllegal hints flags specified.\r\n\t**/\r\n\tvar BADHINTS;\r\n\r\n\t/**\r\n\t\tc-ares library initialization not yet performed.\r\n\t**/\r\n\tvar NOTINITIALIZED;\r\n\r\n\t/**\r\n\t\tError loading iphlpapi.dll.\r\n\t**/\r\n\tvar LOADIPHLPAPI;\r\n\r\n\t/**\r\n\t\tCould not find GetNetworkParams function.\r\n\t**/\r\n\tvar ADDRGETNETWORKPARAMS;\r\n\r\n\t/**\r\n\t\tDNS query cancelled.\r\n\t**/\r\n\tvar CANCELLED;\r\n}\r\n\r\ntypedef DnsLookupCallbackSingle = #if (haxe_ver >= 4) (err : DnsError, address : String, family : DnsAddressFamily) -> Void; #else DnsError->String->\r\n\tDnsAddressFamily->Void #end\r\ntypedef DnsLookupCallbackAll = #if (haxe_ver >= 4) (err : DnsError, addresses : Array<DnsLookupCallbackAllEntry>) -> Void; #else DnsError->\r\n\tArray<DnsLookupCallbackAllEntry>->Void; #end\r\ntypedef DnsLookupCallbackAllEntry = {address:String, family:DnsAddressFamily};\r\n\r\n/**\r\n\tThis module contains functions that belong to two different categories:\r\n\r\n\t1) Functions that use the underlying operating system facilities to perform name resolution,\r\n\tand that do not necessarily do any network communication. This category contains only one function: `lookup`.\r\n\tDevelopers looking to perform name resolution in the same way that other applications on the same operating\r\n\tsystem behave should use `lookup`.\r\n\r\n\t2) Functions that connect to an actual DNS server to perform name resolution,\r\n\tand that always use the network to perform DNS queries. This category contains all functions in the dns module but `lookup`.\r\n\tThese functions do not use the same set of configuration files than what `lookup` uses. For instance,\r\n\tthey do not use the configuration from /etc/hosts. These functions should be used by developers who do not want\r\n\tto use the underlying operating system's facilities for name resolution, and instead want to always perform DNS queries.\r\n**/\r\n@:jsRequire(\"dns\")\r\nextern class Dns {\r\n\t/**\r\n\t\tResolves a `hostname` (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record.\r\n\r\n\t\tIf `options` is not provided, then IP v4 and v6 addresses are both valid.\r\n\r\n\t\tThe `family` can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family.\r\n\r\n\t\tThe `callback` has arguments (err, address, family).\r\n\t\tThe `address` argument is a string representation of a IP v4 or v6 address.\r\n\t\tThe `family` argument is either the integer 4 or 6 and denotes the family\r\n\t\tof address (not necessarily the value initially passed to lookup).\r\n\r\n\t\tWith the `all` option set, the arguments change to (err, addresses), with addresses being an array of objects\r\n\t\twith the properties `address` and `family`.\r\n\r\n\t\tKeep in mind that `err.code` will be set to 'ENOENT' not only when the hostname does not exist but\r\n\t\talso when the lookup fails in other ways such as no available file descriptors.\r\n\r\n\t\t`lookup` doesn't necessarily have anything to do with the DNS protocol. It's only an operating system facility\r\n\t\tthat can associate name with addresses, and vice versa.\r\n\t**/\r\n\t@:overload(function(hostname:String, options:EitherType<DnsAddressFamily, DnsLookupOptions>,\r\n\t\tcallback:EitherType<DnsLookupCallbackSingle, DnsLookupCallbackAll>):Void {})\r\n\tstatic function lookup(hostname:String, callback:DnsLookupCallbackSingle):Void;\r\n\r\n\t/**\r\n\t\tA flag passed in the `hints` argument of `lookup` method.\r\n\r\n\t\tReturned address types are determined by the types of addresses supported by the current system.\r\n\t\tFor example, IPv4 addresses are only returned if the current system has at least one IPv4 address configured.\r\n\t\tLoopback addresses are not considered.\r\n\t**/\r\n\tstatic var ADDRCONFIG(default, null):Int;\r\n\r\n\t/**\r\n\t\tA flag passed in the `hints` argument of `lookup` method.\r\n\r\n\t\tIf the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses.\r\n\t\tNote that it is not supported on some operating systems (e.g FreeBSD 10.1).\r\n\t**/\r\n\tstatic var V4MAPPED(default, null):Int;\r\n\r\n\t/**\r\n\t\tResolves the given `address` and `port` into a hostname and service using `getnameinfo`.\r\n\r\n\t\tThe `callback` has arguments (err, hostname, service).\r\n\t\tThe `hostname` and `service` arguments are strings (e.g. 'localhost' and 'http' respectively).\r\n\r\n\t\tOn error, `err` is an Error object, where `err.code` is the error code.\r\n\t**/\r\n\tstatic function lookupService(address:String, port:Int, callback:DnsError->String->String->Void):Void;\r\n\r\n\t/**\r\n\t\tResolves a `hostname` (e.g. 'google.com') into an array of the record types specified by `rrtype`.\r\n\r\n\t\tThe `callback` has arguments (err, addresses).\r\n\t\tThe type of each item in `addresses` is determined by the record type,\r\n\t\tand described in the documentation for the corresponding lookup methods below.\r\n\r\n\t\tOn error, `err` is an Error object, where `err.code` is the error code.\r\n\t**/\r\n\t@:overload(function(hostname:String, callback:DnsError->Array<DnsResolvedAddress>->Void):Void {})\r\n\tstatic function resolve(hostname:String, rrtype:DnsRrtype, callback:DnsError->Array<DnsResolvedAddress>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for IPv4 queries (A records).\r\n\t\t`addresses` is an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106']).\r\n\t**/\r\n\tstatic function resolve4(hostname:String, callback:DnsError->Array<String>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve4` except for IPv6 queries (an AAAA query).\r\n\t**/\r\n\tstatic function resolve6(hostname:String, callback:DnsError->Array<String>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for mail exchange queries (MX records).\r\n\t\t`addresses` is an array of MX records, each with a priority\r\n\t\tand an exchange attribute (e.g. [{'priority': 10, 'exchange': 'mx.example.com'},...]).\r\n\t**/\r\n\tstatic function resolveMx(hostname:String, callback:DnsError->Array<DnsResolvedAddressMX>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for text queries (TXT records).\r\n\t\t`addresses` is a 2-d array of the text records available for hostname (e.g., [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]).\r\n\t\tEach sub-array contains TXT chunks of one record. Depending on the use case, the could be either joined together\r\n\t\tor treated separately.\r\n\t**/\r\n\tstatic function resolveTxt(hostname:String, callback:DnsError->Array<Array<String>>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for service records (SRV records).\r\n\t\t`addresses` is an array of the SRV records available for `hostname`.\r\n\t\tProperties of SRV records are priority, weight, port, and name\r\n\t\t(e.g., [{'priority': 10, 'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]).\r\n\t**/\r\n\tstatic function resolveSrv(hostname:String, callback:DnsError->Array<DnsResolvedAddressSRV>->Void):Void;\r\n\r\n\t/**\r\n\t\tUses the DNS protocol to resolve pointer records (PTR records) for the `hostname`.\r\n\t\tThe addresses argument passed to the callback function will be an array of strings containing the reply records.\r\n\t**/\r\n\tstatic function resolvePtr(hostname:String, callback:DnsError->Array<String>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for start of authority record queries (SOA record).\r\n\r\n\t\t`addresses` is an object with the following structure:\r\n\t\t{\r\n\t\t  nsname: 'ns.example.com',\r\n\t\t  hostmaster: 'root.example.com',\r\n\t\t  serial: 2013101809,\r\n\t\t  refresh: 10000,\r\n\t\t  retry: 2400,\r\n\t\t  expire: 604800,\r\n\t\t  minttl: 3600\r\n\t\t}\r\n\t**/\r\n\tstatic function resolveSoa(hostname:String, callback:DnsError->DnsResolvedAddressSOA->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for name server records (NS records).\r\n\t\t`addresses` is an array of the name server records available for hostname (e.g., ['ns1.example.com', 'ns2.example.com']).\r\n\t**/\r\n\tstatic function resolveNs(hostname:String, callback:DnsError->Array<String>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe same as `resolve`, but only for canonical name records (CNAME records).\r\n\t\t`addresses` is an array of the canonical name records available for hostname (e.g., ['bar.example.com']).\r\n\t**/\r\n\tstatic function resolveCname(hostname:String, callback:DnsError->Array<String>->Void):Void;\r\n\r\n\t/**\r\n\t\tReverse resolves an `ip` address to an array of hostnames.\r\n\t\tThe `callback` has arguments (err, hostname).\r\n\t**/\r\n\tstatic function reverse(ip:String, callback:DnsError->Array<String>->Void):Void;\r\n\r\n\t/**\r\n\t\tReturns an array of IP addresses as strings that are currently being used for resolution.\r\n\t**/\r\n\tstatic function getServers():Array<String>;\r\n\r\n\t/**\r\n\t\tGiven an array of IP addresses as strings, set them as the servers to use for resolving.\r\n\r\n\t\tIf you specify a port with the address it will be stripped, as the underlying library doesn't support that.\r\n\r\n\t\tThis will throw if you pass invalid input.\r\n\t**/\r\n\tstatic function setServers(servers:Array<String>):Void;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.net;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.Dns;\r\nimport js.node.events.EventEmitter.Event;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events for `Socket` objects.\r\n**/\r\n@:enum abstract SocketEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted after resolving the hostname but before connecting.\r\n\t\tNot applicable to UNIX sockets.\r\n\t**/\r\n\tvar Lookup:SocketEvent<Null<Error>->String->DnsAddressFamily->Void> = \"lookup\";\r\n\r\n\t/**\r\n\t\tEmitted when a socket connection is successfully established. See `Socket.connect`.\r\n\t**/\r\n\tvar Connect:SocketEvent<Void->Void> = \"connect\";\r\n\r\n\t/**\r\n\t\tEmitted when data is received.\r\n\t\tThe argument data will be a `Buffer` or `String`.\r\n\t\tEncoding of data is set by `Socket.setEncoding`.\r\n\r\n\t\tNote that the data will be lost if there is no listener when a Socket emits a 'data' event.\r\n\t**/\r\n\tvar Data:SocketEvent<EitherType<Buffer, String>->Void> = \"data\";\r\n\r\n\t/**\r\n\t\tEmitted when the other end of the socket sends a FIN packet.\r\n\r\n\t\tBy default (allowHalfOpen == false) the socket will destroy its file descriptor once\r\n\t\tit has written out its pending write queue. However, by setting allowHalfOpen == true\r\n\t\tthe socket will not automatically `end` its side allowing the user to write arbitrary amounts of data,\r\n\t\twith the caveat that the user is required to `end` their side now.\r\n\t**/\r\n\tvar End:SocketEvent<Void->Void> = \"end\";\r\n\r\n\t/**\r\n\t\tEmitted if the socket times out from inactivity.\r\n\t\tThis is only to notify that the socket has been idle\r\n\t\tThe user must manually close the connection.\r\n\t\tSee also: `Socket.setTimeout`\r\n\t**/\r\n\tvar Timeout:SocketEvent<Void->Void> = \"timeout\";\r\n\r\n\t/**\r\n\t\tEmitted when the write buffer becomes empty. Can be used to throttle uploads.\r\n\t\tSee also: the return values of `Socket.write`\r\n\t**/\r\n\tvar Drain:SocketEvent<Void->Void> = \"drain\";\r\n\r\n\t/**\r\n\t\tEmitted when an error occurs. The 'close' event will be called directly following this event.\r\n\t**/\r\n\tvar Error:SocketEvent<Error->Void> = \"error\";\r\n\r\n\t/**\r\n\t\tEmitted once the socket is fully closed.\r\n\t\tThe argument `had_error` is a boolean which says if the socket was closed due to a transmission error.\r\n\r\n\t\tListener arguments:\r\n\t\t\thad_error - true if the socket had a transmission error\r\n\t**/\r\n\tvar Close:SocketEvent<Bool->Void> = \"close\";\r\n}\r\n\r\ntypedef SocketOptionsBase = {\r\n\t/**\r\n\t\tIf true, then the socket won't automatically send a FIN packet\r\n\t\twhen the other end of the socket sends a FIN packet.\r\n\r\n\t\tThe socket becomes non-readable, but still writable. You should call the `end` method explicitly.\r\n\t\tSee `end` event for more information.\r\n\r\n\t\tDefault: false\r\n\t**/\r\n\t@:optional var allowHalfOpen:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for creating new `Socket` object.\r\n**/\r\ntypedef SocketOptions = {\r\n\t> SocketOptionsBase,\r\n\r\n\t/**\r\n\t\tallows you to specify the existing file descriptor of socket.\r\n\t**/\r\n\t@:optional var fd:Null<Int>;\r\n\r\n\t/**\r\n\t\tallow reads on this socket (NOTE: Works only when `fd` is passed)\r\n\t**/\r\n\t@:optional var readable:Bool;\r\n\r\n\t/**\r\n\t\tallow writes on this socket (NOTE: Works only when `fd` is passed)\r\n\t**/\r\n\t@:optional var writable:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for the `Socket.connect` method (TCP version).\r\n**/\r\ntypedef SocketConnectOptionsTcp = {\r\n\t/**\r\n\t\tPort the client should connect to\r\n\t**/\r\n\tvar port:Int;\r\n\r\n\t/**\r\n\t\tHost the client should connect to.\r\n\t\tDefaults to 'localhost'.\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tLocal interface to bind to for network connections.\r\n\t**/\r\n\t@:optional var localAddress:String;\r\n\r\n\t/**\r\n\t\tLocal port to bind to for network connections.\r\n\t**/\r\n\t@:optional var localPort:Int;\r\n\r\n\t/**\r\n\t\tVersion of IP stack. Defaults to 4.\r\n\t**/\r\n\t@:optional var family:DnsAddressFamily;\r\n\r\n\t/**\r\n\t\tCustom lookup function. Defaults to `Dns.lookup`.\r\n\t**/\r\n\t@:optional var lookup:String->DnsLookupOptions->DnsLookupCallbackSingle->Void;\r\n}\r\n\r\n/**\r\n\tOptions for the `Socket.connect` method (Local domain socket version).\r\n**/\r\ntypedef SocketConnectOptionsUnix = {\r\n\t/**\r\n\t\tPath the client should connect to\r\n\t**/\r\n\tvar path:String;\r\n}\r\n\r\n/**\r\n\tBound address, the address family name and port of the socket as reported by the operating system.\r\n**/\r\ntypedef SocketAdress = {\r\n\t/**\r\n\t\tConnection port.\r\n\t**/\r\n\tvar port:Int;\r\n\r\n\t/**\r\n\t\tIP Family.\r\n\t**/\r\n\tvar family:SocketAdressFamily;\r\n\r\n\t/**\r\n\t\tIP Address.\r\n\t**/\r\n\tvar address:String;\r\n}\r\n\r\n/**\r\n\tEnumeration of possible socket family values.\r\n**/\r\n@:enum abstract SocketAdressFamily(String) to String {\r\n\tvar IPv4 = \"IPv4\";\r\n\tvar IPv6 = \"IPv6\";\r\n}\r\n\r\n@:jsRequire(\"net\", \"Socket\")\r\nextern class Socket extends js.node.stream.Duplex<Socket> {\r\n\t/**\r\n\t\tConstruct a new socket object.\r\n\t**/\r\n\tfunction new(?options:SocketOptions);\r\n\r\n\t/**\r\n\t\tOpens the connection for a given socket.\r\n\r\n\t\tIf `port` and `host` are given, then the socket will be opened as a TCP socket,\r\n\t\tif `host` is omitted, localhost will be assumed.\r\n\t\tIf a `path` is given, the socket will be opened as a unix socket to that path.\r\n\r\n\t\tNormally this method is not needed, as `Net.createConnection` opens the socket.\r\n\t\tUse this only if you are implementing a custom `Socket`.\r\n\r\n\t\tThis function is asynchronous. When the 'connect' event is emitted the socket is established.\r\n\t\tIf there is a problem connecting, the 'connect' event will not be emitted,\r\n\t\tthe 'error' event will be emitted with the exception\r\n\r\n\t\tThe `connectListener` parameter will be added as an listener for the 'connect' event.\r\n\t**/\r\n\t@:overload(function(path:String, ?connectListener:Void->Void):Socket {})\r\n\t@:overload(function(port:Int, ?connectListener:Void->Void):Socket {})\r\n\t@:overload(function(port:Int, host:String, ?connectListener:Void->Void):Socket {})\r\n\tfunction connect(options:EitherType<SocketConnectOptionsTcp, SocketConnectOptionsUnix>, ?connectListener:Void->Void):Socket;\r\n\r\n\t/**\r\n\t\t`Socket` has the property that `socket.write` always works. This is to help users get up and running quickly.\r\n\t\tThe computer cannot always keep up with the amount of data that is written to a socket - the network connection\r\n\t\tsimply might be too slow. Node will internally queue up the data written to a socket and send it out over the\r\n\t\twire when it is possible. (Internally it is polling on the socket's file descriptor for being writable).\r\n\r\n\t\tThe consequence of this internal buffering is that memory may grow. This property shows the number of characters\r\n\t\tcurrently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written,\r\n\t\tbut the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)\r\n\r\n\t\tUsers who experience large or growing `bufferSize` should attempt to \"throttle\" the data flows\r\n\t\tin their program with `pause` and `resume`.\r\n\t**/\r\n\tvar bufferSize:Int;\r\n\r\n\t/**\r\n\t\tA boolean value that indicates if the connection is destroyed or not.\r\n\t\tOnce a connection is destroyed no further data can be transferred using it.\r\n\r\n\t\tdefine in Stream/Readable.hx\r\n\t**/\r\n\t// var destroyed(default, null):Bool;\r\n\r\n\t#if haxe4\r\n\t/**\r\n\t\tEnsures that no more I/O activity happens on this socket.\r\n\t\tOnly necessary in case of errors (parse error or so).\r\n\r\n\t\tIf `exception` is specified, an 'error' event will be emitted and\r\n\t\tany listeners for that event will receive exception as an argument.\r\n\t**/\r\n\tfunction destroy(?exception:Error):Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\tSets the socket to timeout after `timeout` milliseconds of inactivity on the socket.\r\n\t\tBy default `Socket` do not have a timeout.\r\n\r\n\t\tWhen an idle timeout is triggered the socket will receive a 'timeout' event but the connection will not be severed.\r\n\t\tThe user must manually `end` or `destroy` the socket.\r\n\r\n\t\tIf `timeout` is 0, then the existing idle timeout is disabled.\r\n\r\n\t\tThe optional `callback` parameter will be added as a one time listener for the 'timeout' event.\r\n\t**/\r\n\tfunction setTimeout(timeout:Int, ?callback:Void->Void):Void;\r\n\r\n\t/**\r\n\t\tDisables the Nagle algorithm.\r\n\t\tBy default TCP connections use the Nagle algorithm, they buffer data before sending it off.\r\n\t\tSetting true for `noDelay` will immediately fire off data each time `write` is called.\r\n\t\t`noDelay` defaults to true.\r\n\t**/\r\n\tfunction setNoDelay(?noDelay:Bool):Void;\r\n\r\n\t/**\r\n\t\tEnable/disable keep-alive functionality, and optionally set the initial delay\r\n\t\tbefore the first keepalive probe is sent on an idle socket.\r\n\r\n\t\t`enable` defaults to false.\r\n\r\n\t\tSet `initialDelay` (in milliseconds) to set the delay between the last data packet received and\r\n\t\tthe first keepalive probe.\r\n\r\n\t\tSetting 0 for `initialDelay` will leave the value unchanged from the default (or previous) setting.\r\n\t\tDefaults to 0.\r\n\t**/\r\n\t@:overload(function(?initialDelay:Int):Void {})\r\n\tfunction setKeepAlive(enable:Bool, ?initialDelay:Int):Void;\r\n\r\n\t/**\r\n\t\tReturns the bound address, the address family name and port of the socket as reported by the operating system.\r\n\t**/\r\n\tfunction address():SocketAdress;\r\n\r\n\t/**\r\n\t\tCalling `unref` on a socket will allow the program to exit if this is the only active socket in the event system.\r\n\t\tIf the socket is already `unref`d calling `unref` again will have no effect.\r\n\t**/\r\n\tfunction unref():Socket;\r\n\r\n\t/**\r\n\t\tOpposite of `unref`, calling `ref` on a previously `unref`d socket will not let the program exit\r\n\t\tif it's the only socket left (the default behavior).\r\n\t\tIf the socket is `ref`d calling `ref` again will have no effect.\r\n\t**/\r\n\tfunction ref():Socket;\r\n\r\n\t/**\r\n\t\tThe string representation of the remote IP address.\r\n\t\tFor example, '74.125.127.100' or '2001:4860:a005::68'.\r\n\t**/\r\n\tvar remoteAddress(default, null):String;\r\n\r\n\t/**\r\n\t\tThe string representation of the remote IP family.\r\n\t\t'IPv4' or 'IPv6'.\r\n\t**/\r\n\tvar remoteFamily(default, null):SocketAdressFamily;\r\n\r\n\t/**\r\n\t\tThe numeric representation of the remote port. For example, 80 or 21.\r\n\t**/\r\n\tvar remotePort(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe string representation of the local IP address the remote client is connecting on.\r\n\t\tFor example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1',\r\n\t\tthe value would be '192.168.1.1'.\r\n\t**/\r\n\tvar localAddress(default, null):String;\r\n\r\n\t/**\r\n\t\tThe numeric representation of the local port. For example, 80 or 21.\r\n\t**/\r\n\tvar localPort(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe amount of received bytes.\r\n\t**/\r\n\tvar bytesRead(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe amount of bytes sent.\r\n\t**/\r\n\tvar bytesWritten(default, null):Int;\r\n\r\n\t/**\r\n\t\tAlways true for TLSSocket instances.\r\n\r\n\t\tMay be used to distinguish TLS sockets from regular ones.\r\n\t**/\r\n\tvar encrypted(default, null):Bool;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}