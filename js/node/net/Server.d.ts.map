{"sourceRoot":"","names":[],"mappings":";YA4DQ,2BACI,YCqBZ,OAWoC;;YD1BpC,0BAIY,UCWZ,OAtBoC,QDCxB,YCqBZ,OAWoC,SDvBxB,OCYZ,OC7DiB,QFgDL,OCaZ,OAtBoC;;YDiBpC,2BAhBY,YCqBZ,OAWoC,SDdxB,OCGZ,OC7DiB","version":3,"file":"Server.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/net/Server.hx","../../../../../../../../haxe/versions/4.1.4/std/StdTypes.hx","../../../../../../../../haxe/versions/4.1.4/std/js/_std/String.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.net;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.events.EventEmitter;\r\nimport js.node.net.Socket.SocketAdress;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events emitted by the `Server` objects\r\n**/\r\n@:enum abstract ServerEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted when the server has been bound after calling `Server.listen`.\r\n\t**/\r\n\tvar Listening:ServerEvent<Void->Void> = \"listening\";\r\n\r\n\t/**\r\n\t\tEmitted when a new connection is made.\r\n\t**/\r\n\tvar Connection:ServerEvent<Socket->Void> = \"connection\";\r\n\r\n\t/**\r\n\t\tEmitted when the server closes.\r\n\t\tNote that if connections exist, this event is not emitted until all connections are ended.\r\n\t**/\r\n\tvar Close:ServerEvent<Void->Void> = \"close\";\r\n\r\n\t/**\r\n\t\tEmitted when an error occurs.\r\n\t\tThe 'close' event will be called directly following this event. See example in discussion of server.listen.\r\n\t**/\r\n\tvar Error:ServerEvent<Error->Void> = \"error\";\r\n}\r\n\r\nprivate typedef ServerListenOptionsBase = {\r\n\t@:optional var exclusive:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for the `Server.listen` method (TCP version).\r\n**/\r\ntypedef ServerListenOptionsTcp = {\r\n\t> ServerListenOptionsBase,\r\n\t@:optional var port:Int;\r\n\t@:optional var host:String;\r\n\t@:optional var backlog:Int;\r\n}\r\n\r\n/**\r\n\tOptions for the `Server.listen` method (UNIX version).\r\n**/\r\ntypedef ServerListenOptionsUnix = {\r\n\t> ServerListenOptionsBase,\r\n\t@:optional var path:String;\r\n}\r\n\r\n/**\r\n\tThis class is used to create a TCP or local server.\r\n**/\r\n@:jsRequire(\"net\", \"Server\")\r\nextern class Server extends EventEmitter<Server> {\r\n\t/**\r\n\t\tBegin accepting connections on the specified `port` and `hostname`.\r\n\r\n\t\tIf the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,\r\n\t\tor any IPv4 address (0.0.0.0) otherwise.\r\n\t\tA `port` value of zero will assign a random port.\r\n\r\n\t\t`backlog` is the maximum length of the queue of pending connections. The actual length will be determined\r\n\t\tby your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.\r\n\t\tThe default value of this parameter is 511 (not 512).\r\n\r\n\t\tWhen `path` is provided, start a local socket server listening for connections on the given path.\r\n\r\n\t\tWhen `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),\r\n\t\tor a {fd: <n>} object. This will cause the server to accept connections on the specified handle,\r\n\t\tbut it is presumed that the file descriptor or handle has already been bound to a port or domain socket.\r\n\t\tListening on a file descriptor is not supported on Windows.\r\n\r\n\t\tThis function is asynchronous. When the server has been bound, 'listening' event will be emitted.\r\n\t\tThe last parameter `callback` will be added as an listener for the 'listening' event.\r\n\t**/\r\n\t@:overload(function(path:String, ?callback:Void->Void):Void {})\r\n\t@:overload(function(handle:EitherType<Dynamic, {fd:Int}>, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, backlog:Int, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, hostname:String, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, hostname:String, backlog:Int, ?callback:Void->Void):Void {})\r\n\tfunction listen(options:EitherType<ServerListenOptionsTcp, ServerListenOptionsUnix>, ?callback:Void->Void):Void;\r\n\r\n\t/**\r\n\t\tStops the server from accepting new connections and keeps existing connections.\r\n\t\tThis function is asynchronous, the server is finally closed when all connections are ended\r\n\t\tand the server emits a 'close' event.\r\n\r\n\t\tThe optional callback will be called once the 'close' event occurs. Unlike that event,\r\n\t\tit will be called with an Error as its only argument if the server was not open when it was closed.\r\n\t**/\r\n\t@:overload(function(callback:Error->Void):Void {})\r\n\tfunction close(?callback:Void->Void):Void;\r\n\r\n\t/**\r\n\t\tReturns the bound address, the address family name and port of the server as reported by the operating system.\r\n\t\tUseful to find which port was assigned when giving getting an OS-assigned address.\r\n\t**/\r\n\tfunction address():SocketAdress;\r\n\r\n\t/**\r\n\t\tCalling `unref` on a server will allow the program to exit if this is the only active server in the event system.\r\n\t\tIf the server is already `unref`d calling `unref` again will have no effect.\r\n\t**/\r\n\tfunction unref():Void;\r\n\r\n\t/**\r\n\t\tOpposite of `unref`, calling `ref` on a previously `unref`d server\r\n\t\twill not let the program exit if it's the only server left (the default behavior).\r\n\r\n\t\tIf the server is `ref`d calling `ref` again will have no effect.\r\n\t**/\r\n\tfunction ref():Void;\r\n\r\n\t/**\r\n\t\tA boolean indicating whether or not the server is listening for connections.\r\n\t**/\r\n\tvar listening(default, null):Bool;\r\n\r\n\t/**\r\n\t\tSet this property to reject connections when the server's connection count gets high.\r\n\t\tIt is not recommended to use this option once a socket has been sent to a child with child_process.fork().\r\n\t**/\r\n\tvar maxConnections:Int;\r\n\r\n\t/**\r\n\t\tThe number of concurrent connections on the server.\r\n\r\n\t\tThis becomes null when sending a socket to a child with child_process.fork().\r\n\t\tTo poll forks and get current number of active connections use asynchronous `getConnections` instead.\r\n\t**/\r\n\t@:deprecated(\"please use `getConnections` instead\")\r\n\tvar connections(default, null):Null<Int>;\r\n\r\n\t/**\r\n\t\tAsynchronously get the number of concurrent connections on the server.\r\n\t\tWorks when sockets were sent to forks.\r\n\t**/\r\n\tfunction getConnections(callback:Error->Int->Void):Void;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}