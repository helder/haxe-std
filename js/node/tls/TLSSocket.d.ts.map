{"sourceRoot":"","names":[],"mappings":"QAsFO;QC3CA;;ACmBP,gCCfY,eCmCZ,OC5DO,ACDU,QCcjB,GNQO,QEwBK,cCeZ,qBE7DiB,oBEIV,UCqFA,mBL/EI,OF2CC,WEQZ,OAWoC,SDnDxB,qBCwCZ,OAWoC,SDnCxB,cCwBZ,OAWoC,SDXxB,cCAZ,OAWoC,SFxBxB,gBEaZ,OK4BO,ePlCK,SEMZ,OJIO,QGVK,UCMZ,OHvCO","version":3,"file":"TLSSocket.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/net/Server.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/tls/TLSSocket.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Tls.hx","../../../../../../../../haxe/versions/4.0.3/std/StdTypes.hx","../../../../../../../../haxe/versions/4.0.3/std/js/_std/Array.hx","../../../../../../../../haxe/versions/4.0.3/std/js/_std/String.hx","../../../../../../../../haxe/versions/4.0.3/std/haxe/extern/EitherType.hx","../../../../../../../../haxe/versions/4.0.3/std/js/lib/Error.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/tls/SecureContext.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.net;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.events.EventEmitter;\r\nimport js.node.net.Socket.SocketAdress;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events emitted by the `Server` objects\r\n**/\r\n@:enum abstract ServerEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted when the server has been bound after calling `Server.listen`.\r\n\t**/\r\n\tvar Listening:ServerEvent<Void->Void> = \"listening\";\r\n\r\n\t/**\r\n\t\tEmitted when a new connection is made.\r\n\t**/\r\n\tvar Connection:ServerEvent<Socket->Void> = \"connection\";\r\n\r\n\t/**\r\n\t\tEmitted when the server closes.\r\n\t\tNote that if connections exist, this event is not emitted until all connections are ended.\r\n\t**/\r\n\tvar Close:ServerEvent<Void->Void> = \"close\";\r\n\r\n\t/**\r\n\t\tEmitted when an error occurs.\r\n\t\tThe 'close' event will be called directly following this event. See example in discussion of server.listen.\r\n\t**/\r\n\tvar Error:ServerEvent<Error->Void> = \"error\";\r\n}\r\n\r\nprivate typedef ServerListenOptionsBase = {\r\n\t@:optional var exclusive:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for the `Server.listen` method (TCP version).\r\n**/\r\ntypedef ServerListenOptionsTcp = {\r\n\t> ServerListenOptionsBase,\r\n\t@:optional var port:Int;\r\n\t@:optional var host:String;\r\n\t@:optional var backlog:Int;\r\n}\r\n\r\n/**\r\n\tOptions for the `Server.listen` method (UNIX version).\r\n**/\r\ntypedef ServerListenOptionsUnix = {\r\n\t> ServerListenOptionsBase,\r\n\t@:optional var path:String;\r\n}\r\n\r\n/**\r\n\tThis class is used to create a TCP or local server.\r\n**/\r\n@:jsRequire(\"net\", \"Server\")\r\nextern class Server extends EventEmitter<Server> {\r\n\t/**\r\n\t\tBegin accepting connections on the specified `port` and `hostname`.\r\n\r\n\t\tIf the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,\r\n\t\tor any IPv4 address (0.0.0.0) otherwise.\r\n\t\tA `port` value of zero will assign a random port.\r\n\r\n\t\t`backlog` is the maximum length of the queue of pending connections. The actual length will be determined\r\n\t\tby your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.\r\n\t\tThe default value of this parameter is 511 (not 512).\r\n\r\n\t\tWhen `path` is provided, start a local socket server listening for connections on the given path.\r\n\r\n\t\tWhen `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),\r\n\t\tor a {fd: <n>} object. This will cause the server to accept connections on the specified handle,\r\n\t\tbut it is presumed that the file descriptor or handle has already been bound to a port or domain socket.\r\n\t\tListening on a file descriptor is not supported on Windows.\r\n\r\n\t\tThis function is asynchronous. When the server has been bound, 'listening' event will be emitted.\r\n\t\tThe last parameter `callback` will be added as an listener for the 'listening' event.\r\n\t**/\r\n\t@:overload(function(path:String, ?callback:Void->Void):Void {})\r\n\t@:overload(function(handle:EitherType<Dynamic, {fd:Int}>, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, backlog:Int, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, hostname:String, ?callback:Void->Void):Void {})\r\n\t@:overload(function(port:Int, hostname:String, backlog:Int, ?callback:Void->Void):Void {})\r\n\tfunction listen(options:EitherType<ServerListenOptionsTcp, ServerListenOptionsUnix>, ?callback:Void->Void):Void;\r\n\r\n\t/**\r\n\t\tStops the server from accepting new connections and keeps existing connections.\r\n\t\tThis function is asynchronous, the server is finally closed when all connections are ended\r\n\t\tand the server emits a 'close' event.\r\n\r\n\t\tThe optional callback will be called once the 'close' event occurs. Unlike that event,\r\n\t\tit will be called with an Error as its only argument if the server was not open when it was closed.\r\n\t**/\r\n\t@:overload(function(callback:Error->Void):Void {})\r\n\tfunction close(?callback:Void->Void):Void;\r\n\r\n\t/**\r\n\t\tReturns the bound address, the address family name and port of the server as reported by the operating system.\r\n\t\tUseful to find which port was assigned when giving getting an OS-assigned address.\r\n\t**/\r\n\tfunction address():SocketAdress;\r\n\r\n\t/**\r\n\t\tCalling `unref` on a server will allow the program to exit if this is the only active server in the event system.\r\n\t\tIf the server is already `unref`d calling `unref` again will have no effect.\r\n\t**/\r\n\tfunction unref():Void;\r\n\r\n\t/**\r\n\t\tOpposite of `unref`, calling `ref` on a previously `unref`d server\r\n\t\twill not let the program exit if it's the only server left (the default behavior).\r\n\r\n\t\tIf the server is `ref`d calling `ref` again will have no effect.\r\n\t**/\r\n\tfunction ref():Void;\r\n\r\n\t/**\r\n\t\tA boolean indicating whether or not the server is listening for connections.\r\n\t**/\r\n\tvar listening(default, null):Bool;\r\n\r\n\t/**\r\n\t\tSet this property to reject connections when the server's connection count gets high.\r\n\t\tIt is not recommended to use this option once a socket has been sent to a child with child_process.fork().\r\n\t**/\r\n\tvar maxConnections:Int;\r\n\r\n\t/**\r\n\t\tThe number of concurrent connections on the server.\r\n\r\n\t\tThis becomes null when sending a socket to a child with child_process.fork().\r\n\t\tTo poll forks and get current number of active connections use asynchronous `getConnections` instead.\r\n\t**/\r\n\t@:deprecated(\"please use `getConnections` instead\")\r\n\tvar connections(default, null):Null<Int>;\r\n\r\n\t/**\r\n\t\tAsynchronously get the number of concurrent connections on the server.\r\n\t\tWorks when sockets were sent to forks.\r\n\t**/\r\n\tfunction getConnections(callback:Error->Int->Void):Void;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.buffer;\r\n\r\nimport haxe.io.Bytes;\r\nimport haxe.io.UInt8Array;\r\n#if haxe4\r\nimport js.lib.ArrayBuffer;\r\nimport js.lib.ArrayBufferView;\r\nimport js.lib.Object;\r\nimport js.lib.Uint8Array;\r\n#else\r\nimport js.html.ArrayBuffer;\r\nimport js.html.ArrayBufferView;\r\nimport js.html.Uint8Array;\r\n#end\r\n\r\n/**\r\n\tThe `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.\r\n\r\n\t@see https://nodejs.org/api/buffer.html#buffer_class_buffer\r\n**/\r\n@:jsRequire(\"buffer\", \"Buffer\")\r\nextern class Buffer extends Uint8Array {\r\n\t/**\r\n\t\tAllocates a new buffer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding\r\n\t**/\r\n\t@:deprecated\r\n\t@:overload(function(array:Array<Int>):Void {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Void {})\r\n\t@:overload(function(buffer:UInt8Array):Void {})\r\n\t@:overload(function(size:Int):Void {})\r\n\tfunction new(string:String, ?encoding:String):Void;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\r\n\t**/\r\n\t@:overload(function(size:Int, fill:String, ?encoding:String):Buffer {})\r\n\t@:overload(function(size:Int, fill:Uint8Array):Buffer {})\r\n\t@:overload(function(size:Int, fill:Int):Buffer {})\r\n\tstatic function alloc(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\r\n\t**/\r\n\tstatic function allocUnsafe(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size\r\n\t**/\r\n\tstatic function allocUnsafeSlow(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tReturns the actual byte length of a string. This is not the same as\r\n\t\t`String.prototype.length` since that returns the number of characters in\r\n\t\ta string.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding\r\n\t**/\r\n\t#if (haxe_ver >= 3.3)\r\n\t// it need extern SharedArrayBuffer for Node\r\n\t// @:overload(function(string:SharedArrayBuffer):Int {})\r\n\t@:overload(function(string:String, ?encoding:String):Int {})\r\n\t@:overload(function(string:ArrayBufferView):Int {})\r\n\t@:overload(function(string:ArrayBuffer):Int {})\r\n\tstatic function byteLength(string:Buffer):Int;\r\n\t#end\r\n\r\n\t#if (haxe_ver >= 3.3)\r\n\t@:deprecated(\"In haxe 3.3+, use Buffer.byteLength instead!\")\r\n\t#end\r\n\tinline static function _byteLength(string:String, ?encoding:String):Int\r\n\t\treturn untyped Buffer['byteLength'](string, encoding);\r\n\r\n\t/**\r\n\t\tCompares `buf1` to `buf2` typically for the purpose of sorting arrays of\r\n\t\t`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2\r\n\t**/\r\n\t@:native(\"compare\")\r\n\tstatic function compareBuffers(buf1:Uint8Array, buf2:Uint8Array):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength\r\n\t**/\r\n\tstatic function concat<T:Uint8Array>(list:Array<T>, ?totalLength:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding\r\n\t**/\r\n\t// it need extern SharedArrayBuffer for node\r\n\t// @:overload(function(arrayBuffer:SharedArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(array:Array<Int>):Buffer {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(buffer:Uint8Array):Buffer {})\r\n\t@:overload(function(object:{}, ?offset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(object:{}, ?encoding:String, ?length:Int):Buffer {})\r\n\tstatic function from(string:String, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tReturns `true` if `obj` is a `Buffer`, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj\r\n\t**/\r\n\tstatic function isBuffer(obj:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns `true` if `encoding` contains a supported character encoding, or `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding\r\n\t**/\r\n\tstatic function isEncoding(encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tThis is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize\r\n\t**/\r\n\tstatic var poolSize:Int;\r\n\r\n\t// buf[index]\r\n\t// var buffer:ArrayBuffer;\r\n\r\n\t/**\r\n\t\tWhen setting `byteOffset` in `Buffer.from(ArrayBuffer, byteOffset, length)`\r\n\t\tor sometimes when allocating a buffer smaller than `Buffer.poolSize` the\r\n\t\tbuffer doesn't start from a zero offset on the underlying `ArrayBuffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_byteoffset\r\n\t**/\r\n\tstatic var byteOffset(default, null):Int;\r\n\r\n\t/**\r\n\t\tCompares `buf` with `target` and returns a number indicating whether `buf` comes before, after,\r\n\t\tor is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Int {})\r\n\tfunction compare(target:Uint8Array, ?targetStart:Int, ?targetEnd:Int, ?sourceStart:Int, ?sourceEnd:Int):Int;\r\n\r\n\t/**\r\n\t\tCopies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Void {})\r\n\tfunction copy(target:Uint8Array, ?targetStart:Int, ?sourceStart:Int, ?sourceEnd:Int):Void;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `[index, byte]` pairs from the contents of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_entries\r\n\t**/\r\n\tfunction entries():js.node.Iterator<js.node.KeyValue<Int, Int>>;\r\n\r\n\t/**\r\n\t\tReturns `true` if both `buf` and `otherBuffer` have exactly the same bytes, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer\r\n\t**/\r\n\tfunction equals(otherBuffer:Uint8Array):Bool;\r\n\r\n\t/**\r\n\t\tFills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?offset:Int, ?end:Int):Buffer {})\r\n\t@:overload(function(value:Int, ?offset:Int, ?end:Int):Buffer {})\r\n\tfunction fill(value:String, ?offset:Int, ?end:Int, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tEquivalent to `buf.indexOf() !== -1`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Bool {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Bool {})\r\n\tfunction includes(value:String, ?byteOffset:Int, ?encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tIf `value` is:\r\n\r\n\t\t- a string, `value` is interpreted according to the character encoding in `encoding`.\r\n\t\t- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().\r\n\t\t- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction indexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `buf` keys (indices).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_keys\r\n\t**/\r\n\tfunction keys():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tIdentical to `buf.indexOf()`, except the last occurrence of `value` is found\r\n\t\trather than the first occurrence.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction lastIndexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t// var length(default, null):Int;\r\n\t// these functions need BigInt implementation.\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64be_offset\r\n\t// **/\r\n\t// function readBigInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64le_offset\r\n\t// **/\r\n\t// function readBigInt64LE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64be_offset\r\n\t// **/\r\n\t// function readBigUInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64le_offset\r\n\t// **/\r\n\t// function readBigUInt64LE(?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset\r\n\t**/\r\n\tfunction readDoubleBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset\r\n\t**/\r\n\tfunction readDoubleLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset\r\n\t**/\r\n\tfunction readFloatBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset\r\n\t**/\r\n\tfunction readFloatLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a signed 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\thttps://nodejs.org/api/buffer.html#buffer_buf_readint8_offset\r\n\t**/\r\n\tfunction readInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset\r\n\t**/\r\n\tfunction readInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset\r\n\t**/\r\n\tfunction readInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength\r\n\t**/\r\n\tfunction readIntBE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength\r\n\t**/\r\n\tfunction readIntLE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset\r\n\t**/\r\n\tfunction readUInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset\r\n\t**/\r\n\tfunction readUInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset\r\n\t**/\r\n\tfunction readUInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_subarray_start_end\r\n\t**/\r\n\t#if haxe4\r\n\tfunction subarray(?start:Int, ?end:Int):Buffer;\r\n\t#else\r\n\toverride function subarray(start:Int, ?end:Int):Buffer;\r\n\t#end\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end\r\n\t**/\r\n\tfunction slice(?start:Int, ?end:Int):Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 16-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 2.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap16\r\n\t**/\r\n\tfunction swap16():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 32-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 4.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap32\r\n\t**/\r\n\tfunction swap32():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of 64-bit numbers and swaps byte order in-place.\r\n\t\tThrows `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap64\r\n\t**/\r\n\tfunction swap64():Buffer;\r\n\r\n\t/**\r\n\t\tReturns a JSON representation of `buf`. `JSON.stringify()` implicitly calls\r\n\t\tthis function when stringifying a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tojson\r\n\t**/\r\n\tfunction toJSON():Dynamic;\r\n\r\n\t/**\r\n\t\tDecodes `buf` to a string according to the specified character encoding in `encoding`.\r\n\t\t`start` and `end` may be passed to decode only a subset of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end\r\n\t**/\r\n\t@:overload(function(?encoding:String, ?start:Int, ?end:Int):String {})\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator for `buf` values (bytes). This function is called automatically\r\n\t\twhen a `Buffer` is used in a `for..of` statement.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_values\r\n\t**/\r\n\tfunction values():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tWrites `string` to `buf` at `offset` according to the character encoding in `encoding`.\r\n\t\tThe `length` parameter is the number of bytes to write.\r\n\t\tIf `buf` did not contain enough space to fit the entire `string`, only part of string will be written.\r\n\t\tHowever, partially encoded characters will not be written.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding\r\n\t**/\r\n\tfunction write(string:String, ?offset:Int, ?length:Int, ?encoding:String):Int;\r\n\r\n\t// these functions need BigInt Implementation.\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64be_value_offset\r\n\t// **/\r\n\t// function writeBigInt64BE(value:Int, ?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64le_value_offset\r\n\t// **/\r\n\t// function writeBigInt64LE(value:Int, ?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset\r\n\t**/\r\n\tfunction writeDoubleBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset\r\n\t**/\r\n\tfunction writeDoubleLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset\r\n\t**/\r\n\tfunction writeFloatBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset\r\n\t**/\r\n\tfunction writeFloatLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid signed 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset\r\n\t**/\r\n\tfunction writeInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset\r\n\t**/\r\n\tfunction writeInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset\r\n\t**/\r\n\tfunction writeInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset\r\n\t**/\r\n\tfunction writeInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset\r\n\t**/\r\n\tfunction writeInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntBE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntLE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid unsigned 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset\r\n\t**/\r\n\tfunction writeUInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset\r\n\t**/\r\n\tfunction writeUInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset\r\n\t**/\r\n\tfunction writeUInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset\r\n\t**/\r\n\tfunction writeUInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset\r\n\t**/\r\n\tfunction writeUInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tDefault: `50`\r\n\r\n\t\tReturns the maximum number of bytes that will be returned when `buf.inspect()` is called.\r\n\t\tThis can be overridden by user modules.\r\n\t\tSee `util.inspect()` for more details on `buf.inspect()` behavior.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes\r\n\t**/\r\n\tstatic var INSPECT_MAX_BYTES(get, set):Int;\r\n\r\n\tprivate static inline function get_INSPECT_MAX_BYTES():Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES;\r\n\t}\r\n\tprivate static inline function set_INSPECT_MAX_BYTES(bytes:Int):Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES = bytes;\r\n\t}\r\n\r\n\t/**\r\n\t\tAn alias for `buffer.constants.MAX_LENGTH`.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength\r\n\t**/\r\n\tstatic var kMaxLength(get, never):Int;\r\n\r\n\tprivate static inline function get_kMaxLength():Int {\r\n\t\treturn BufferModule.kMaxLength;\r\n\t}\r\n\r\n\t/**\r\n\t\tRe-encodes the given `Buffer` or `Uint8Array` instance from one character encoding to another.\r\n\t\tReturns a new `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_transcode_source_fromenc_toenc\r\n\t**/\r\n\tstatic inline function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer {\r\n\t\treturn BufferModule.transcode(source, fromEnc, toEnc);\r\n\t};\r\n\r\n\t/**\r\n\t\t`buffer.constants` is a property on the `buffer` module returned by `require('buffer')`,\r\n\t\tnot on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants\r\n\t**/\r\n\tstatic var constants(default, never):BufferConstants;\r\n\r\n\tprivate static inline function get_constants():BufferConstants {\r\n\t\treturn BufferModule.constants;\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.\r\n\t\tAny modifications done using the returned object will be reflected in the `this` buffer.\r\n\t**/\r\n\tinline function hxToBytes():Bytes {\r\n\t\treturn Helper.bytesOfBuffer(this);\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.\r\n\t\tAny modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.\r\n\t**/\r\n\tstatic inline function hxFromBytes(b:Bytes):Buffer {\r\n\t\tvar data = @:privateAccess b.b;\r\n\t\treturn Buffer.from(data.buffer, data.byteOffset, b.length);\r\n\t}\r\n}\r\n\r\n@:dce\r\nprivate class Helper {\r\n\tpublic static function bytesOfBuffer(b:Buffer):haxe.io.Bytes untyped {\r\n\t\tvar o = Object.create(haxe.io.Bytes.prototype);\r\n\t\t// the following is basically a haxe.io.Bytes constructor,\r\n\t\t// but using given buffer instead of creating new Uint8Array\r\n\t\to.length = b.byteLength;\r\n\t\to.b = b;\r\n\t\tb.bufferValue = b;\r\n\t\tb.hxBytes = o;\r\n\t\tb.bytes = b;\r\n\t\treturn o;\r\n\t}\r\n}\r\n\r\n@:jsRequire(\"buffer\")\r\nprivate extern class BufferModule {\r\n\tstatic var INSPECT_MAX_BYTES:Int;\r\n\tstatic var kMaxLength(default, never):Int;\r\n\tstatic function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer;\r\n\tstatic var constants(default, never):BufferConstants;\r\n}\r\n\r\ntypedef BufferConstants = {\r\n\t/**\r\n\t\tOn 32-bit architectures, this value is `(2^30)-1` (`~1GB`).\r\n\t\tOn 64-bit architectures, this value is `(2^31)-1` (`~2GB`).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length\r\n\t**/\r\n\tvar MAX_LENGTH(default, never):Int;\r\n\r\n\t/**\r\n\t\tRepresents the largest `length` that a `string` primitive can have, counted\r\n\t\tin UTF-16 code units.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_string_length\r\n\t**/\r\n\tvar MAX_STRING_LENGTH(default, never):Int;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.tls;\r\n\r\nimport haxe.Constraints.Function;\r\nimport js.node.Buffer;\r\nimport js.node.Tls.TlsClientOptionsBase;\r\nimport js.node.Tls.TlsServerOptionsBase;\r\nimport js.node.events.EventEmitter.Event;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events emitted by `TLSSocket` objects in addition to its parent class events.\r\n**/\r\n@:enum abstract TLSSocketEvent<T:Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tThis event is emitted after a new connection has been successfully handshaked.\r\n\r\n\t\tThe listener will be called no matter if the server's certificate was authorized or not.\r\n\r\n\t\tIt is up to the user to test `TLSSocket.authorized` to see if the server certificate\r\n\t\twas signed by one of the specified CAs. If `TLSSocket.authorized` is false then the error\r\n\t\tcan be found in `TLSSocket.authorizationError`. Also if NPN was used - you can\r\n\t\tcheck `TLSSocket.npnProtocol` for negotiated protocol.\r\n\t**/\r\n\tvar SecureConnect:TLSSocketEvent<Void->Void> = \"secureConnect\";\r\n\r\n\t/**\r\n\t\tThis event will be emitted if `requestOCSP` option was set.\r\n\r\n\t\t`response` is a `Buffer` object, containing server's OCSP response.\r\n\r\n\t\tTraditionally, the response is a signed object from the server's CA\r\n\t\tthat contains information about server's certificate revocation status.\r\n\t**/\r\n\tvar OCSPResponse:TLSSocketEvent<Buffer->Void> = \"OCSPResponse\";\r\n}\r\n\r\ntypedef TLSSocketOptions = {\r\n\t> TlsServerOptionsBase,\r\n\t> TlsClientOptionsBase,\r\n\r\n\t/**\r\n\t\tAn optional TLS context object from `Tls.createSecureContext`\r\n\t**/\r\n\t@:optional var secureContext:SecureContext;\r\n\r\n\t/**\r\n\t\tIf true - TLS socket will be instantiated in server-mode\r\n\t**/\r\n\t@:optional var isServer:Bool;\r\n\r\n\t@:optional var server:js.node.net.Server;\r\n}\r\n\r\n/**\r\n\tThis is a wrapped version of `net.Socket` that does transparent encryption\r\n\tof written data and all required TLS negotiation.\r\n\r\n\tIts `encrypted` field is always true.\r\n**/\r\n@:jsRequire(\"tls\", \"TLSSocket\")\r\nextern class TLSSocket extends js.node.net.Socket {\r\n\t/**\r\n\t\tConstruct a new TLSSocket object from existing TCP socket.\r\n\t**/\r\n\tfunction new(socket:js.node.net.Socket, options:TLSSocketOptions);\r\n\r\n\t/**\r\n\t\ttrue if the peer certificate was signed by one of the specified CAs, otherwise false\r\n\t**/\r\n\tvar authorized(default, null):Bool;\r\n\r\n\t/**\r\n\t\tThe reason why the peer's certificate has not been verified.\r\n\r\n\t\tThis property becomes available only when `authorized` is false.\r\n\t**/\r\n\tvar authorizationError(default, null):Null<String>;\r\n\r\n\t/**\r\n\t\tNegotiated protocol name.\r\n\t**/\r\n\tvar npnProtocol(default, null):String;\r\n\r\n\t/**\r\n\t\tReturns an object representing the peer's certificate.\r\n\r\n\t\tThe returned object has some properties corresponding to the field of the certificate.\r\n\t\tIf `detailed` argument is true - the full chain with issuer property will be returned,\r\n\t\tif false - only the top certificate without issuer property.\r\n\t**/\r\n\tfunction getPeerCertificate(?detailed:Bool):Dynamic; // TODO: is there a well defined structure for this?\r\n\r\n\t/**\r\n\t\tReturns an object representing the cipher name and the SSL/TLS protocol version of the current connection.\r\n\r\n\t\tExample: { name: 'AES256-SHA', version: 'TLSv1/SSLv3' }\r\n\r\n\t\tSee SSL_CIPHER_get_name() and SSL_CIPHER_get_version() in http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS for more information.\r\n\t**/\r\n\tfunction getCipher():{name:String, version:String};\r\n\r\n\t/**\r\n\t\tInitiate TLS renegotiation process.\r\n\r\n\t\tThe `options` may contain the following fields: rejectUnauthorized, requestCert (See `Tls.createServer` for details).\r\n\r\n\t\t`callback(err)` will be executed with null as err, once the renegotiation is successfully completed.\r\n\r\n\t\tNOTE: Can be used to request peer's certificate after the secure connection has been established.\r\n\t\tANOTHER NOTE: When running as the server, socket will be destroyed with an error after handshakeTimeout timeout.\r\n\t**/\r\n\tfunction renegotiate(options:{?rejectUnauthorized:Bool, ?requestCert:Bool}, ?callback:Error->Void):Bool;\r\n\r\n\t/**\r\n\t\tSet maximum TLS fragment size (default and maximum value is: 16384, minimum is: 512).\r\n\r\n\t\tReturns true on success, false otherwise.\r\n\r\n\t\tSmaller fragment size decreases buffering latency on the client: large fragments are buffered by the TLS layer\r\n\t\tuntil the entire fragment is received and its integrity is verified; large fragments can span multiple roundtrips,\r\n\t\tand their processing can be delayed due to packet loss or reordering. However, smaller fragments add\r\n\t\textra TLS framing bytes and CPU overhead, which may decrease overall server throughput.\r\n\t**/\r\n\tfunction setMaxSendFragment(size:Int):Bool;\r\n\r\n\t/**\r\n\t\tReturns a string containing the negotiated SSL/TLS protocol version of the current connection.\r\n\r\n\t\t'unknown' will be returned for connected sockets that have not completed the handshaking process.\r\n\t\t`null` will be returned for server sockets or disconnected client sockets.\r\n\t**/\r\n\tfunction getProtocol():String;\r\n\r\n\t/**\r\n\t\tReturn ASN.1 encoded TLS session or null if none was negotiated.\r\n\t\tCould be used to speed up handshake establishment when reconnecting to the server.\r\n\t**/\r\n\tfunction getSession():Null<Buffer>;\r\n\r\n\t/**\r\n\t\tNOTE: Works only with client TLS sockets.\r\n\r\n\t\tUseful only for debugging, for session reuse provide session option to tls.connect.\r\n\r\n\t\tReturn TLS session ticket or null if none was negotiated.\r\n\t**/\r\n\tfunction getTLSTicket():Null<Buffer>;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.Buffer;\r\nimport js.node.tls.SecureContext;\r\nimport js.node.tls.SecurePair;\r\nimport js.node.tls.Server;\r\nimport js.node.tls.TLSSocket;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\ntypedef TlsOptionsBase = {\r\n\t/**\r\n\t\tIf true the server will reject any connection which is not authorized with the list of supplied CAs.\r\n\t\tThis option only has an effect if `requestCert` is true.\r\n\t\tDefault: false.\r\n\t**/\r\n\t@:optional var rejectUnauthorized:Bool;\r\n\r\n\t/**\r\n\t\tpossible NPN protocols. (Protocols should be ordered by their priority).\r\n\t**/\r\n\t@:optional var NPNProtocols:EitherType<Array<String>, Buffer>;\r\n}\r\n\r\ntypedef TlsServerOptionsBase = {\r\n\t> TlsOptionsBase,\r\n\r\n\t/**\r\n\t\tIf true the server will request a certificate from clients that connect\r\n\t\tand attempt to verify that certificate.\r\n\t\tDefault: false.\r\n\t**/\r\n\t@:optional var requestCert:Bool;\r\n\r\n\t/**\r\n\t\tA function that will be called if client supports SNI TLS extension.\r\n\t\tTwo argument will be passed to it: `servername`, and `cb`.\r\n\t\tSNICallback should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance.\r\n\t\t(You can use tls.createSecureContext(...) to get proper `SecureContext`).\r\n\t\tIf `SNICallback` wasn't provided - default callback with high-level API will be used.\r\n\t**/\r\n\t@:optional var SNICallback:#if (haxe_ver >= 4)(servername:String, cb:(Error->SecureContext)) -> Void #else String->(Error->SecureContext)->Void #end;\r\n}\r\n\r\ntypedef TlsClientOptionsBase = {\r\n\t> TlsOptionsBase,\r\n\r\n\t/**\r\n\t\tA Buffer instance, containing TLS session.\r\n\t**/\r\n\t@:optional var session:Buffer;\r\n\r\n\t/**\r\n\t\tIf true - OCSP status request extension would be added to client hello,\r\n\t\tand OCSPResponse event will be emitted on socket before establishing secure communication\r\n\t**/\r\n\t@:optional var requestOCSP:Bool;\r\n}\r\n\r\n/**\r\n\tBase structure for options object used in tls methods.\r\n**/\r\ntypedef TlsCreateServerOptions = {\r\n\t> TlsServerOptionsBase,\r\n\t> SecureContextOptions,\r\n\r\n\t/**\r\n\t\tAbort the connection if the SSL/TLS handshake does not finish in this many milliseconds.\r\n\t\tThe default is 120 seconds.\r\n\t\tA 'clientError' is emitted on the `tls.Server` object whenever a handshake times out.\r\n\t**/\r\n\t@:optional var handshakeTimeout:Int;\r\n\r\n\t/**\r\n\t\tAn integer specifying the seconds after which TLS session identifiers\r\n\t\tand TLS session tickets created by the server are timed out.\r\n\t\tSee SSL_CTX_set_timeout for more details.\r\n\t**/\r\n\t@:optional var sessionTimeout:Int;\r\n\r\n\t/**\r\n\t\tA 48-byte `Buffer` instance consisting of 16-byte prefix, 16-byte hmac key, 16-byte AES key.\r\n\t\tYou could use it to accept tls session tickets on multiple instances of tls server.\r\n\r\n\t\tNOTE: Automatically shared between cluster module workers.\r\n\t**/\r\n\t@:optional var ticketKeys:Buffer;\r\n}\r\n\r\ntypedef TlsConnectOptions = {\r\n\t> TlsClientOptionsBase,\r\n\t> SecureContextOptions,\r\n\r\n\t/**\r\n\t\tHost the client should connect to.\r\n\t\tDefaults to 'localhost'\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tPort the client should connect to\r\n\t**/\r\n\t@:optional var port:Int;\r\n\r\n\t/**\r\n\t\tEstablish secure connection on a given socket rather than creating a new socket.\r\n\t\tIf this option is specified, `host` and `port` are ignored.\r\n\t**/\r\n\t@:optional var socket:js.node.net.Socket;\r\n\r\n\t/**\r\n\t\tCreates unix socket connection to path.\r\n\t\tIf this option is specified, host and port are ignored.\r\n\t**/\r\n\t@:optional var path:String;\r\n\r\n\t/**\r\n\t\tServername for SNI (Server Name Indication) TLS extension.\r\n\t**/\r\n\t@:optional var servername:String;\r\n\r\n\t/**\r\n\t\tAn override for checking server's hostname against the certificate.\r\n\t\tShould return an error if verification fails. Return `js.Lib.undefined` if passing.\r\n\t**/\r\n\t@:optional var checkServerIdentity:String -> {}->Dynamic; // TODO: peer cerficicate structure\r\n\r\n}\r\n\r\n/**\r\n\tThe tls module uses OpenSSL to provide Transport Layer Security\r\n\tand/or Secure Socket Layer: encrypted stream communication.\r\n**/\r\n@:jsRequire(\"tls\")\r\nextern class Tls {\r\n\t/**\r\n\t\trenegotiation limit, default is 3.\r\n\t**/\r\n\tstatic var CLIENT_RENEG_LIMIT:Int;\r\n\r\n\t/**\r\n\t\trenegotiation window in seconds, default is 10 minutes.\r\n\t**/\r\n\tstatic var CLIENT_RENEG_WINDOW:Int;\r\n\r\n\t/**\r\n\t\tSize of slab buffer used by all tls servers and clients. Default: 10 * 1024 * 1024.\r\n\r\n\t\tDon't change the defaults unless you know what you are doing.\r\n\t**/\r\n\tstatic var SLAB_BUFFER_SIZE:Int;\r\n\r\n\t/**\r\n\t\tReturns an array with the names of the supported SSL ciphers.\r\n\t**/\r\n\tstatic function getCiphers():Array<String>;\r\n\r\n\t/**\r\n\t\tCreates a new `Server`.\r\n\t\tThe `connectionListener` argument is automatically set as a listener for the 'secureConnection' event.\r\n\t**/\r\n\tstatic function createServer(options:TlsCreateServerOptions, ?secureConnectionListener:TLSSocket->Void):Server;\r\n\r\n\t/**\r\n\t\tCreates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.\r\n\t\tIf `host` is omitted, it defaults to 'localhost'.\r\n\t**/\r\n\t@:overload(function(port:Int, ?callback:Void->Void):TLSSocket {})\r\n\t@:overload(function(port:Int, options:TlsConnectOptions, ?callback:Void->Void):TLSSocket {})\r\n\t@:overload(function(port:Int, host:String, ?callback:Void->Void):TLSSocket {})\r\n\t@:overload(function(port:Int, host:String, options:TlsConnectOptions, ?callback:Void->Void):TLSSocket {})\r\n\tstatic function connect(options:TlsConnectOptions, ?callback:Void->Void):TLSSocket;\r\n\r\n\t/**\r\n\t\tCreates a credentials object.\r\n\t**/\r\n\tstatic function createSecureContext(?details:SecureContextOptions):SecureContext;\r\n\r\n\t/**\r\n\t\tCreates a new secure pair object with two streams, one of which reads/writes encrypted data,\r\n\t\tand one reads/writes cleartext data.\r\n\t\tGenerally the encrypted one is piped to/from an incoming encrypted data stream,\r\n\t\tand the cleartext one is used as a replacement for the initial encrypted stream.\r\n\t**/\r\n\tstatic function createSecurePair(?context:SecureContext, ?isServer:Bool, ?requestCert:Bool, ?rejectUnauthorized:Bool):SecurePair;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():Iterator<T> {\n\t\treturn @:privateAccess HxOverrides.iter(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.extern;\n\n/**\n\tAn abstract type allowing values to be either of `T1` or `T2` type.\n\tSupports implicit casts from/to either types.\n\n\tIt is useful for interfacing with external code on dynamic platforms\n\tsuch as JavaScript or Python.\n\n\tOtherwise, use of this type is discouraged.\n\n\t@see <https://haxe.org/manual/lf-externs.html>\n**/\nabstract EitherType<T1, T2>(Dynamic) from T1 to T1 from T2 to T2 {}\n","/*\n * Copyright (C)2005-2018 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n@:native(\"Error\")\nextern class Error {\n\tvar message:String;\n\tvar name:String;\n\tvar stack(default, null):String;\n\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"EvalError\")\nextern class EvalError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"RangeError\")\nextern class RangeError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"ReferenceError\")\nextern class ReferenceError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"SyntaxError\")\nextern class SyntaxError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"TypeError\")\nextern class TypeError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"URIError\")\nextern class URIError extends Error {\n\tfunction new(?message:String):Void;\n}\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.tls;\r\n\r\nimport haxe.extern.EitherType;\r\n\r\ntypedef SecureContextOptions = {\r\n\t/**\r\n\t\tprivate key, certificate and CA certs of the server in PFX or PKCS12 format.\r\n\t**/\r\n\t@:optional var pfx:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tpassphrase for the private key or pfx.\r\n\t**/\r\n\t@:optional var passphrase:String;\r\n\r\n\t/**\r\n\t\tprivate key of the server in PEM format.\r\n\t**/\r\n\t@:optional var key:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tcertificate key of the server in PEM format.\r\n\t**/\r\n\t@:optional var cert:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\ttrusted certificates in PEM format.\r\n\t\tIf this is omitted several well known \"root\" CAs will be used, like VeriSign.\r\n\t\tThese are used to authorize connections.\r\n\t**/\r\n\t@:optional var ca:Array<EitherType<String, Buffer>>;\r\n\r\n\t/**\r\n\t\tPEM encoded CRLs (Certificate Revocation List)\r\n\t**/\r\n\t@:optional var crl:EitherType<String, Array<String>>;\r\n\r\n\t/**\r\n\t\tciphers to use or exclude.\r\n\r\n\t\tTo mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`\r\n\t\toption described below to prioritize the non-CBC cipher.\r\n\r\n\t\tDefaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.\r\n\r\n\t\tConsult the OpenSSL cipher list format documentation for details on the format.\r\n\t\tECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.\r\n\t**/\r\n\t@:optional var ciphers:String;\r\n\r\n\t/**\r\n\t\tnamed curve to use for ECDH key agreement or false to disable ECDH.\r\n\r\n\t\tDefaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.\r\n\t\tOn recent releases, openssl ecparam -list_curves will also display the name and description\r\n\t\tof each available elliptic curve.\r\n\t**/\r\n\t@:optional var ecdhCurve:String;\r\n\r\n\t/**\r\n\t\tDiffie Hellman parameters, required for Perfect Forward Secrecy.\r\n\r\n\t\tUse openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,\r\n\t\totherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.\r\n\t\tIf omitted or invalid, it is silently discarded and DHE ciphers won't be available.\r\n\t**/\r\n\t@:optional var dhparam:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tThe SSL method to use, e.g. SSLv3_method to force SSL version 3.\r\n\t\tThe possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.\r\n\t**/\r\n\t@:optional var secureProtocol:String;\r\n\r\n\t/**\r\n\t\topaque identifier for session resumption.\r\n\t\tIf `requestCert` is true, the default is MD5 hash value generated from command-line.\r\n\t\tOtherwise, the default is not provided.\r\n\t**/\r\n\t@:optional var sessionIdContext:String;\r\n\r\n\t/**\r\n\t\tWhen choosing a cipher, use the server's preferences instead of the client preferences.\r\n\t\tDefault: true.\r\n\t**/\r\n\t@:optional var honorCipherOrder:Bool;\r\n}\r\n\r\nextern class SecureContext {}\r\n"]}