{"sourceRoot":"","names":[],"mappings":";YAiGA,2BAQY,WCvBZ,OAWoC","version":3,"file":"ChildProcess.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/child_process/ChildProcess.hx","../../../../../../../../haxe/versions/4.1.1/std/StdTypes.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.child_process;\r\n\r\nimport js.node.Stream;\r\nimport js.node.events.EventEmitter;\r\nimport js.node.stream.Readable;\r\nimport js.node.stream.Writable;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events emitted by `ChildProcess` objects.\r\n**/\r\n@:enum abstract ChildProcessEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted when:\r\n\t\t\t1. The process could not be spawned, or\r\n\t\t\t2. The process could not be killed, or\r\n\t\t\t3. Sending a message to the child process failed for whatever reason.\r\n\r\n\t\tNote that the exit-event may or may not fire after an error has occured.\r\n\t\tIf you are listening on both events to fire a function, remember to guard against calling your function twice.\r\n\r\n\t\tSee also `ChildProcess.kill` and `ChildProcess.send`.\r\n\t**/\r\n\tvar Error:ChildProcessEvent<Error->Void> = \"error\";\r\n\r\n\t/**\r\n\t\tThis event is emitted after the child process ends.\r\n\r\n\t\tListener arguments:\r\n\t\t\tcode - the exit code, if it exited normally.\r\n\t\t\tsignal - the signal passed to kill the child process, if it was killed by the parent.\r\n\r\n\t\tIf the process terminated normally, `code` is the final exit code of the process, otherwise null.\r\n\t\tIf the process terminated due to receipt of a signal, `signal` is the string name of the signal, otherwise null.\r\n\r\n\t\tNote that the child process stdio streams might still be open.\r\n\r\n\t\tAlso, note that node establishes signal handlers for 'SIGINT' and 'SIGTERM',\r\n\t\tso it will not terminate due to receipt of those signals, it will exit.\r\n\t\tSee waitpid(2).\r\n\t**/\r\n\tvar Exit:ChildProcessEvent<Int->String->Void> = \"exit\";\r\n\r\n\t/**\r\n\t\tThis event is emitted when the stdio streams of a child process have all terminated.\r\n\t\tThis is distinct from `Exit`, since multiple processes might share the same stdio streams.\r\n\r\n\t\tListener arguments:\r\n\t\t\tcode - the exit code, if it exited normally.\r\n\t\t\tsignal - the signal passed to kill the child process, if it was killed by the parent.\r\n\t**/\r\n\tvar Close:ChildProcessEvent<Int->String->Void> = \"close\";\r\n\r\n\t/**\r\n\t\tThis event is emitted after calling the `disconnect` method in the parent or in the child.\r\n\t\tAfter disconnecting it is no longer possible to send messages, and the `connected` property is false.\r\n\t**/\r\n\tvar Disconnect:ChildProcessEvent<Void->Void> = \"disconnect\";\r\n\r\n\t/**\r\n\t\tMessages send by `send` are obtained using the message event.\r\n\r\n\t\tThis event can also be listened on the `process` object to receive messages from the parent.\r\n\r\n\t\tListener arguments:\r\n\t\t\tmessage - a parsed JSON object or primitive value\r\n\t\t\tsendHandle - a Socket or Server object\r\n\t**/\r\n\tvar Message:ChildProcessEvent<Dynamic->Dynamic->Void> = \"message\";\r\n}\r\n\r\ntypedef ChildProcessSendOptions = {\r\n\t/**\r\n\t\tCan be used when passing instances of `js.node.net.Socket`.\r\n\r\n\t\tWhen true, the socket is kept open in the sending process.\r\n\r\n\t\tDefaults to false.\r\n\t**/\r\n\t@:optional var keepOpen:Bool;\r\n}\r\n\r\n/**\r\n\tAn object representing a child process.\r\n\r\n\tThe `ChildProcess` class is not intended to be used directly. Use the spawn() or fork() module methods\r\n\tto create a `ChildProcess` instance.\r\n**/\r\nextern class ChildProcess extends EventEmitter<ChildProcess> {\r\n\t/**\r\n\t\tA Writable Stream that represents the child process's stdin.\r\n\t\tClosing this stream via `end` often causes the child process to terminate.\r\n\r\n\t\tIf the child stdio streams are shared with the parent, then this will not be set.\r\n\t**/\r\n\tvar stdin(default, null):IWritable;\r\n\r\n\t/**\r\n\t\tA Readable Stream that represents the child process's stdout.\r\n\r\n\t\tIf the child stdio streams are shared with the parent, then this will not be set.\r\n\t**/\r\n\tvar stdout(default, null):IReadable;\r\n\r\n\t/**\r\n\t\tA Readable Stream that represents the child process's stderr.\r\n\r\n\t\tIf the child stdio streams are shared with the parent, then this will not be set.\r\n\t**/\r\n\tvar stderr(default, null):IReadable;\r\n\r\n\t/**\r\n\t\tThe parent end of the stdio pipes.\r\n\t**/\r\n\tvar stdio(default, null):Array<IStream>;\r\n\r\n\t/**\r\n\t\tThe PID of the child process.\r\n\t**/\r\n\tvar pid(default, null):Int;\r\n\r\n\t/**\r\n\t\tSet to false after `disconnect' is called\r\n\t\tIf `connected` is false, it is no longer possible to send messages.\r\n\t**/\r\n\tvar connected(default, null):Bool;\r\n\r\n\t/**\r\n\t\tSend a signal to the child process.\r\n\r\n\t\tIf no argument is given, the process will be sent 'SIGTERM'.\r\n\t\tSee signal(7) for a list of available signals.\r\n\r\n\t\tMay emit an 'error' event when the signal cannot be delivered.\r\n\r\n\t\tSending a signal to a child process that has already exited is not an error\r\n\t\tbut may have unforeseen consequences: if the PID (the process ID) has been reassigned to another process,\r\n\t\tthe signal will be delivered to that process instead. What happens next is anyone's guess.\r\n\r\n\t\tNote that while the function is called `kill`, the signal delivered to the child process may not actually kill it.\r\n\t\t`kill` really just sends a signal to a process. See kill(2)\r\n\t**/\r\n\tfunction kill(?signal:String):Void;\r\n\r\n\t/**\r\n\t\tWhen using `fork` you can write to the child using `send` and messages are received by a 'message' event on the child.\r\n\r\n\t\tIn the child the `Process` object will have a `send` method, and process will emit objects each time it receives\r\n\t\ta message on its channel.\r\n\r\n\t\tPlease note that the `send` method on both the parent and child are synchronous - sending large chunks of data is\r\n\t\tnot advised (pipes can be used instead, see `spawn`).\r\n\r\n\t\tThere is a special case when sending a {cmd: 'NODE_foo'} `message`. All messages containing a `NODE_` prefix in\r\n\t\tits cmd property will not be emitted in the 'message' event, since they are internal messages used by node core.\r\n\t\tMessages containing the prefix are emitted in the 'internalMessage' event, you should by all means avoid using\r\n\t\tthis feature, it is subject to change without notice.\r\n\r\n\t\tThe `sendHandle` option is for sending a TCP server or socket object to another process.\r\n\t\tThe child will receive the object as its second argument to the message event.\r\n\r\n\t\tThe `callback` option is a function that is invoked after the message is sent but before the target may have received it.\r\n\t\tIt is called with a single argument: null on success, or an `Error` object on failure.\r\n\r\n\t\tEmits an 'error' event if the message cannot be sent, for example because the child process has already exited.\r\n\r\n\t\tReturns true under normal circumstances or false when the backlog of unsent messages exceeds a threshold that\r\n\t\tmakes it unwise to send more. Use the callback mechanism to implement flow control.\r\n\t**/\r\n\t@:overload(function(message:Dynamic, sendHandle:Dynamic, options:ChildProcessSendOptions, ?callback:Error->Void):Bool {})\r\n\t@:overload(function(message:Dynamic, sendHandle:Dynamic, ?callback:Error->Void):Bool {})\r\n\tfunction send(message:Dynamic, ?callback:Error->Void):Bool;\r\n\r\n\t/**\r\n\t\tClose the IPC channel between parent and child, allowing the child to exit gracefully once there are no other\r\n\t\tconnections keeping it alive.\r\n\r\n\t\tAfter calling this method the `connected` flag will be set to false in both the parent and child,\r\n\t\tand it is no longer possible to send messages.\r\n\r\n\t\tThe 'disconnect' event will be emitted when there are no messages in the process of being received,\r\n\t\tmost likely immediately.\r\n\r\n\t\tNote that you can also call `process.disconnect` in the child process.\r\n\t**/\r\n\tfunction disconnect():Void;\r\n\r\n\t/**\r\n\t\tBy default, the parent will wait for the detached child to exit.\r\n\t\tTo prevent the parent from waiting for a given child, use the `unref` method,\r\n\t\tand the parent's event loop will not include the child in its reference count.\r\n\t**/\r\n\tfunction unref():Void;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}