{"sourceRoot":"","names":[],"mappings":";YAiCA,eASY,YCwCZ,OAtBoC,QDIxB,kBA3BA,QC6CZ,OAtBoC,QDXxB,QCiCZ,OAtBoC,QDNxB,WC4BZ,OAtBoC,QDDxB,WCuBZ,OAtBoC,QDhBxB,aCsCZ,OAtBoC","version":3,"file":"Zlib.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Zlib.hx","../../../../../../../haxe/versions/4.1.2/std/StdTypes.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.Buffer;\r\nimport js.node.zlib.*;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\ntypedef ZlibOptions = {\r\n\t/**\r\n\t\tdefault: `Zlib.Z_NO_FLUSH`\r\n\t**/\r\n\t@:optional var flush:Int;\r\n\r\n\t/**\r\n\t\tdefault: 16*1024\r\n\t**/\r\n\t@:optional var chunkSize:Int;\r\n\r\n\t@:optional var windowBits:Int;\r\n\r\n\t/**\r\n\t\tcompression only\r\n\t**/\r\n\t@:optional var level:Int;\r\n\r\n\t/**\r\n\t\tcompression only\r\n\t**/\r\n\t@:optional var memLevel:Int;\r\n\r\n\t/**\r\n\t\tcompression only\r\n\t**/\r\n\t@:optional var strategy:Int;\r\n\r\n\t/**\r\n\t\tdeflate/inflate only, empty dictionary by default\r\n\t**/\r\n\t@:optional var dictionary:Buffer;\r\n}\r\n\r\n/**\r\n\tThis provides bindings to Gzip/Gunzip, Deflate/Inflate, and DeflateRaw/InflateRaw classes.\r\n\tEach class takes the same options, and is a readable/writable Stream.\r\n**/\r\n@:jsRequire(\"zlib\")\r\nextern class Zlib {\r\n\t/**\r\n\t\tAllowed `flush` values.\r\n\t**/\r\n\tstatic var Z_NO_FLUSH(default, null):Int;\r\n\r\n\tstatic var Z_PARTIAL_FLUSH(default, null):Int;\r\n\tstatic var Z_SYNC_FLUSH(default, null):Int;\r\n\tstatic var Z_FULL_FLUSH(default, null):Int;\r\n\tstatic var Z_FINISH(default, null):Int;\r\n\tstatic var Z_BLOCK(default, null):Int;\r\n\tstatic var Z_TREES(default, null):Int;\r\n\r\n\t/**\r\n\t\tReturn codes for the compression/decompression functions.\r\n\t\tNegative values are errors, positive values are used for special but normal events.\r\n\t**/\r\n\tstatic var Z_OK(default, null):Int;\r\n\r\n\tstatic var Z_STREAM_END(default, null):Int;\r\n\tstatic var Z_NEED_DICT(default, null):Int;\r\n\tstatic var Z_ERRNO(default, null):Int;\r\n\tstatic var Z_STREAM_ERROR(default, null):Int;\r\n\tstatic var Z_DATA_ERROR(default, null):Int;\r\n\tstatic var Z_MEM_ERROR(default, null):Int;\r\n\tstatic var Z_BUF_ERROR(default, null):Int;\r\n\tstatic var Z_VERSION_ERROR(default, null):Int;\r\n\r\n\t/**\r\n\t\tCompression levels.\r\n\t**/\r\n\tstatic var Z_NO_COMPRESSION(default, null):Int;\r\n\r\n\tstatic var Z_BEST_SPEED(default, null):Int;\r\n\tstatic var Z_BEST_COMPRESSION(default, null):Int;\r\n\tstatic var Z_DEFAULT_COMPRESSION(default, null):Int;\r\n\r\n\t/**\r\n\t\tCompression strategy.\r\n\t**/\r\n\tstatic var Z_FILTERED(default, null):Int;\r\n\r\n\tstatic var Z_HUFFMAN_ONLY(default, null):Int;\r\n\tstatic var Z_RLE(default, null):Int;\r\n\tstatic var Z_FIXED(default, null):Int;\r\n\tstatic var Z_DEFAULT_STRATEGY(default, null):Int;\r\n\r\n\t/**\r\n\t\tPossible values of the data_type field.\r\n\t**/\r\n\tstatic var Z_BINARY(default, null):Int;\r\n\r\n\tstatic var Z_TEXT(default, null):Int;\r\n\tstatic var Z_ASCII(default, null):Int;\r\n\tstatic var Z_UNKNOWN(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe deflate compression method (the only one supported in this version).\r\n\t**/\r\n\tstatic var Z_DEFLATED(default, null):Int;\r\n\r\n\t/**\r\n\t\tFor initializing zalloc, zfree, opaque.\r\n\t**/\r\n\tstatic var Z_NULL(default, null):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Gzip` object with an `options`.\r\n\t**/\r\n\tstatic function createGzip(?options:ZlibOptions):Gzip;\r\n\r\n\t/**\r\n\t\tReturns a new `Gunzip` object with an `options`.\r\n\t**/\r\n\tstatic function createGunzip(?options:ZlibOptions):Gunzip;\r\n\r\n\t/**\r\n\t\tReturns a new `Deflate` object with an `options`.\r\n\t**/\r\n\tstatic function createDeflate(?options:ZlibOptions):Deflate;\r\n\r\n\t/**\r\n\t\tReturns a new `Inflate` object with an `options`.\r\n\t**/\r\n\tstatic function createInflate(?options:ZlibOptions):Inflate;\r\n\r\n\t/**\r\n\t\tReturns a new `DeflateRaw` object with an `options`.\r\n\t**/\r\n\tstatic function createDeflateRaw(?options:ZlibOptions):DeflateRaw;\r\n\r\n\t/**\r\n\t\tReturns a new `InflateRaw` object with an `options`.\r\n\t**/\r\n\tstatic function createInflateRaw(?options:ZlibOptions):InflateRaw;\r\n\r\n\t/**\r\n\t\tReturns a new `Unzip` object with an `options`.\r\n\t**/\r\n\tstatic function createUnzip(?options:ZlibOptions):Unzip;\r\n\r\n\t/**\r\n\t\tCompress a string with `Deflate`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function deflate(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tCompress a string with `Deflate` (synchronous version).\r\n\t**/\r\n\tstatic function deflateSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n\r\n\t/**\r\n\t\tCompress a string with `DeflateRaw`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function deflateRaw(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tCompress a string with `DeflateRaw` (synchronous version).\r\n\t**/\r\n\tstatic function deflateRawSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n\r\n\t/**\r\n\t\tCompress a string with `Gzip`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function gzip(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tCompress a string with `Gzip` (synchronous version).\r\n\t**/\r\n\tstatic function gzipSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `Gunzip`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function gunzip(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `Gunzip` (synchronous version).\r\n\t**/\r\n\tstatic function gunzipSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `Inflate`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function inflate(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `Inflate` (synchronous version).\r\n\t**/\r\n\tstatic function inflateSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `InflateRaw`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function inflateRaw(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `InflateRaw` (synchronous version).\r\n\t**/\r\n\tstatic function inflateRawSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `Unzip`.\r\n\t**/\r\n\t@:overload(function(buf:EitherType<String, Buffer>, options:ZlibOptions, callback:Error->Buffer->Void):Void {})\r\n\tstatic function unzip(buf:EitherType<String, Buffer>, callback:Error->Buffer->Void):Void;\r\n\r\n\t/**\r\n\t\tDecompress a raw Buffer with `Unzip` (synchronous version).\r\n\t**/\r\n\tstatic function unzipSync(buf:EitherType<String, Buffer>, ?options:ZlibOptions):Buffer;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}