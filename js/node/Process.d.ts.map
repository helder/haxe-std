{"sourceRoot":"","names":[],"mappings":";AA0VA,2BAEC,WC/SmC,QDgTnC,UChTmC,QD8SnC,KC9SmC","version":3,"file":"Process.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Process.hx","../../../../../../../haxe/versions/4.0.2/std/StdTypes.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.DynamicAccess;\r\nimport haxe.extern.EitherType;\r\nimport haxe.extern.Rest;\r\nimport js.node.child_process.ChildProcess.ChildProcessSendOptions;\r\nimport js.node.events.EventEmitter;\r\nimport js.node.stream.Readable;\r\nimport js.node.stream.Writable;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events emitted by the Process class.\r\n**/\r\n@:enum abstract ProcessEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted when the process is about to exit.\r\n\t\tThere is no way to prevent the exiting of the event loop at this point,\r\n\t\tand once all exit listeners have finished running the process will exit.\r\n\t\tTherefore you must only perform synchronous operations in this handler.\r\n\t\tThis is a good hook to perform checks on the module's state (like for unit tests).\r\n\t\tThe callback takes one argument, the code the process is exiting with.\r\n\t**/\r\n\tvar Exit:ProcessEvent<Int->Void> = \"exit\";\r\n\r\n\t/**\r\n\t\tEmitted when node empties it's event loop and has nothing else to schedule.\r\n\r\n\t\tNormally, node exits when there is no work scheduled, but a listener for `beforeExit`\r\n\t\tcan make asynchronous calls, and cause node to continue.\r\n\r\n\t\t`beforeExit` is not emitted for conditions causing explicit termination, such as `process.exit()`\r\n\t\tor uncaught exceptions, and should not be used as an alternative to the `exit` event\r\n\t\tunless the intention is to schedule more work.\r\n\t**/\r\n\tvar BeforeExit:ProcessEvent<Int->Void> = \"beforeExit\";\r\n\r\n\t/**\r\n\t\tEmitted when an exception bubbles all the way back to the event loop.\r\n\t\tIf a listener is added for this exception, the default action (which is to print a stack trace and exit)\r\n\t\twill not occur.\r\n\t**/\r\n\tvar UncaughtException:ProcessEvent<Error->Void> = \"uncaughtException\";\r\n}\r\n\r\nextern class Process extends EventEmitter<Process> {\r\n\t/**\r\n\t\tA Writable Stream to stdout.\r\n\r\n\t\t`stderr` and `stdout` are unlike other streams in Node in that writes to them are usually blocking.\r\n\t**/\r\n\tvar stdout:IWritable;\r\n\r\n\t/**\r\n\t\tA writable stream to stderr.\r\n\r\n\t\t`stderr` and `stdout` are unlike other streams in Node in that writes to them are usually blocking.\r\n\t**/\r\n\tvar stderr:IWritable;\r\n\r\n\t/**\r\n\t\tA Readable Stream for stdin.\r\n\t**/\r\n\tvar stdin:IReadable;\r\n\r\n\t/**\r\n\t\tAn array containing the command line arguments.\r\n\t\tThe first element will be `node`, the second element will be the name of the JavaScript file.\r\n\t\tThe next elements will be any additional command line arguments.\r\n\r\n\t\tE.g:\r\n\t\t\t$ node process-2.js one two=three four\r\n\t\t\t0: node\r\n\t\t\t1: /Users/mjr/work/node/process-2.js\r\n\t\t\t2: one\r\n\t\t\t3: two=three\r\n\t\t\t4: four\r\n\t**/\r\n\tvar argv:Array<String>;\r\n\r\n\t/**\r\n\t\tThis is the absolute pathname of the executable that started the process.\r\n\t**/\r\n\tvar execPath:String;\r\n\r\n\t/**\r\n\t\tThis is the set of node-specific command line options from the executable that started the process.\r\n\t\tThese options do not show up in `argv`, and do not include the node executable, the name of the script,\r\n\t\tor any options following the script name.\r\n\r\n\t\tThese options are useful in order to spawn child processes with the same execution environment as the parent.\r\n\t**/\r\n\tvar execArgv:Array<String>;\r\n\r\n\t/**\r\n\t\tThis causes node to emit an abort. This will cause node to exit and generate a core file.\r\n\t**/\r\n\tfunction abort():Void;\r\n\r\n\t/**\r\n\t\tChanges the current working directory of the process or throws an exception if that fails.\r\n\t**/\r\n\tfunction chdir(directory:String):Void;\r\n\r\n\t/**\r\n\t\tReturns the current working directory of the process.\r\n\t**/\r\n\tfunction cwd():String;\r\n\r\n\t/**\r\n\t\tAn object containing the user environment. See environ(7).\r\n\t**/\r\n\tvar env:DynamicAccess<String>;\r\n\r\n\t/**\r\n\t\tEnds the process with the specified `code`. If the `code` is omitted, exit uses either the\r\n\t\t'success' code `0` or the value of `process.exitCode` if specified.\r\n\t**/\r\n\tfunction exit(?code:Int):Void;\r\n\r\n\t/**\r\n\t\tA number which will be the process exit code, when the process either exits gracefully,\r\n\t\tor is exited via `process.exit()` without specifying a code.\r\n\r\n\t\tSpecifying a code to `process.exit(code)` will override any previous setting of `process.exitCode`.\r\n\t**/\r\n\tvar exitCode:Null<Int>;\r\n\r\n\t/**\r\n\t\tGets the group identity of the process. See getgid(2).\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t**/\r\n\tfunction getgid():Int;\r\n\r\n\t/**\r\n\t\tSets the group identity of the process. See setgid(2).\r\n\t\tThis accepts either a numerical ID or a groupname string.\r\n\t\tIf a groupname is specified, this method blocks while resolving it to a numerical ID.\r\n\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t**/\r\n\t@:overload(function(id:String):Void {})\r\n\tfunction setgid(id:Int):Void;\r\n\r\n\t/**\r\n\t\tGets the user identity of the process. See getuid(2).\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t**/\r\n\tfunction getuid():Int;\r\n\r\n\t/**\r\n\t\tSets the user identity of the process. See setuid(2).\r\n\t\tThis accepts either a numerical ID or a username string.\r\n\t\tIf a username is specified, this method blocks while resolving it to a numerical ID.\r\n\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t**/\r\n\t@:overload(function(id:String):Void {})\r\n\tfunction setuid(id:Int):Void;\r\n\r\n\t/**\r\n\t\tReturns an array with the supplementary group IDs.\r\n\t\tPOSIX leaves it unspecified if the effective group ID is included but node.js ensures it always is.\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t**/\r\n\tfunction getgroups():Array<Int>;\r\n\r\n\t/**\r\n\t\tSets the supplementary group IDs.\r\n\t\tThis is a privileged operation, meaning you need to be root or have the CAP_SETGID capability.\r\n\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t\tThe list can contain group IDs, group names or both.\r\n\t**/\r\n\tfunction setgroups(groups:Array<EitherType<String, Int>>):Void;\r\n\r\n\t/**\r\n\t\tReads /etc/group and initializes the group access list, using all groups of which the user is a member.\r\n\t\tThis is a privileged operation, meaning you need to be root or have the CAP_SETGID capability.\r\n\r\n\t\tNote: this function is only available on POSIX platforms (i.e. not Windows)\r\n\t**/\r\n\tfunction initgroups(user:EitherType<String, Int>, extra_group:EitherType<String, Int>):Void;\r\n\r\n\t/**\r\n\t\tA compiled-in property that exposes NODE_VERSION.\r\n\t**/\r\n\tvar version(default, null):String;\r\n\r\n\t/**\r\n\t\tA property exposing version strings of node and its dependencies.\r\n\t**/\r\n\tvar versions:DynamicAccess<String>;\r\n\r\n\t/**\r\n\t\tAn Object containing the JavaScript representation of the configure options that were used to compile the current node executable.\r\n\t\tThis is the same as the \"config.gypi\" file that was produced when running the ./configure script.\r\n\t**/\r\n\tvar config:Dynamic<Dynamic>;\r\n\r\n\t/**\r\n\t\tSend a signal to a process.\r\n\t\t`pid` is the process id and `signal` is the string describing the signal to send. Signal names are strings like 'SIGINT' or 'SIGHUP'.\r\n\r\n\t\tIf omitted, the `signal` will be 'SIGTERM'. See Signal Events and kill(2) for more information.\r\n\r\n\t\tWill throw an error if target does not exist, and as a special case,\r\n\t\ta signal of 0 can be used to test for the existence of a process.\r\n\r\n\t\tNote that just because the name of this function is `kill`, it is really just a signal sender, like the kill system call.\r\n\t\tThe signal sent may do something other than kill the target process.\r\n\t**/\r\n\tfunction kill(pid:Int, ?signal:String):Void;\r\n\r\n\t/**\r\n\t\tThe PID of the process.\r\n\t**/\r\n\tvar pid(default, null):Int;\r\n\r\n\t/**\r\n\t\tGetter/setter to set what is displayed in 'ps'.\r\n\r\n\t\tWhen used as a setter, the maximum length is platform-specific and probably short.\r\n\t\tOn Linux and OS X, it's limited to the size of the binary name plus the length of the\r\n\t\tcommand line arguments because it overwrites the argv memory.\r\n\t**/\r\n\tvar title:String;\r\n\r\n\t/**\r\n\t\tWhat processor architecture you're running on: 'arm', 'ia32', or 'x64'.\r\n\t**/\r\n\tvar arch:String;\r\n\r\n\t/**\r\n\t\tWhat platform you're running on: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'\r\n\t**/\r\n\tvar platform:String;\r\n\r\n\t/**\r\n\t\tReturns an object describing the memory usage of the Node process measured in bytes.\r\n\t**/\r\n\tfunction memoryUsage():MemoryUsage;\r\n\r\n\t/**\r\n\t\tOn the next loop around the event loop call this callback.\r\n\t\tThis is not a simple alias to setTimeout(fn, 0), it's much more efficient.\r\n\t\tIt typically runs before any other I/O events fire, but there are some exceptions.\r\n\r\n\t\tThis is important in developing APIs where you want to give the user the chance to\r\n\t\tassign event handlers after an object has been constructed, but before any I/O has occurred.\r\n\t**/\r\n\tfunction nextTick(callback:Void->Void, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tSets or reads the process's file mode creation mask.\r\n\t\tChild processes inherit the mask from the parent process.\r\n\t\tReturns the old mask if mask argument is given, otherwise returns the current mask.\r\n\t**/\r\n\tfunction umask(?mask:Int):Int;\r\n\r\n\t/**\r\n\t\tNumber of seconds Node has been running.\r\n\t**/\r\n\tfunction uptime():Float;\r\n\r\n\t/**\r\n\t\tReturns the current high-resolution real time in a [seconds, nanoseconds] tuple Array.\r\n\t\tIt is relative to an arbitrary time in the past.\r\n\t\tIt is not related to the time of day and therefore not subject to clock drift.\r\n\t\tThe primary use is for measuring performance between intervals.\r\n\t\tYou may pass in the result of a previous call to `hrtime` to get a diff reading,\r\n\t\tuseful for benchmarks and measuring intervals\r\n\t**/\r\n\t@:overload(function(prev:Array<Float>):Array<Float> {})\r\n\tfunction hrtime():Array<Float>;\r\n\r\n\t/**\r\n\t\tAlternate way to retrieve require.main. The difference is that if the main module changes at runtime,\r\n\t\trequire.main might still refer to the original main module in modules that were required\r\n\t\tbefore the change occurred. Generally it's safe to assume that the two refer to the same module.\r\n\r\n\t\tAs with require.main, it will be undefined if there was no entry script.\r\n\t**/\r\n\tvar mainModule(default, null):Module;\r\n\r\n\t/**\r\n\t\tSend a message to the parent process.\r\n\r\n\t\tOnly available for child processes. See `ChildProcess.send`.\r\n\t**/\r\n\t@:overload(function(message:Dynamic, sendHandle:Dynamic, options:ChildProcessSendOptions, ?callback:Error->Void):Bool {})\r\n\t@:overload(function(message:Dynamic, sendHandle:Dynamic, ?callback:Error->Void):Bool {})\r\n\tfunction send(message:Dynamic, ?callback:Error->Void):Bool;\r\n\r\n\t/**\r\n\t\tClose the IPC channel to parent process.\r\n\r\n\t\tOnly available for child processes. See `ChildProcess.disconnect`.\r\n\t**/\r\n\tfunction disconnect():Void;\r\n\r\n\t/**\r\n\t\tDisable run-time deprecation warnings.\r\n\t\tSee `Util.deprecate`.\r\n\t**/\r\n\tvar noDeprecation:Bool;\r\n\r\n\t/**\r\n\t\tEnable logging of deprecation warnings.\r\n\t\tSee `Util.deprecate`.\r\n\t**/\r\n\tvar traceDeprecation:Bool;\r\n\r\n\t/**\r\n\t\tThrow on deprecated API usage.\r\n\t\tSee `Util.deprecate`.\r\n\t**/\r\n\tvar throwDeprecation:Bool;\r\n}\r\n\r\ntypedef MemoryUsage = {\r\n\trss:Float,\r\n\theapTotal:Float,\r\n\theapUsed:Float\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n"]}