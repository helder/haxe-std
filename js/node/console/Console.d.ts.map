{"sourceRoot":"","names":[],"mappings":"QA6RA;;ACnDA,8BAqBW,WClKyB,OC1DpC,GCdiB,QHmON,cC3JyB,SDuKzB,gBDyBX,gBC1CW,QIsHJ,WJ3HN,QI2HM","version":3,"file":"Console.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Util.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/console/Console.hx","../../../../../../../../haxe/versions/4.0.3/std/StdTypes.hx","../../../../../../../../haxe/versions/4.0.3/std/haxe/extern/EitherType.hx","../../../../../../../../haxe/versions/4.0.3/std/js/_std/String.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Writable.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.Constraints.Function;\r\nimport haxe.extern.EitherType;\r\nimport haxe.extern.Rest;\r\nimport js.node.stream.Readable;\r\nimport js.node.stream.Writable;\r\n#if haxe4\r\nimport js.lib.Error;\r\nimport js.lib.Promise;\r\n#else\r\nimport js.Error;\r\nimport js.Promise;\r\n#end\r\n\r\n/**\r\n\tThe `util` module is primarily designed to support the needs of Node.js' own internal APIs.\r\n\r\n\t@see https://nodejs.org/api/util.html#util_util\r\n**/\r\n@:jsRequire(\"util\")\r\nextern class Util {\r\n\t/**\r\n\t\tTakes an `async` function (or a function that returns a `Promise`) and returns a function following the\r\n\t\terror-first callback style, i.e. taking an `(err, value) => ...` callback as the last argument.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_callbackify_original\r\n\t**/\r\n\tstatic function callbackify(original:Function, args:Rest<Dynamic>):Null<Error>->Null<Dynamic>->Void;\r\n\r\n\t/**\r\n\t\tThe `util.debuglog()` method is used to create a function that conditionally writes debug messages to `stderr`\r\n\t\tbased on the existence of the `NODE_DEBUG` environment variable.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_debuglog_section\r\n\t**/\r\n\tstatic function debuglog(section:String):Rest<Dynamic>->Void;\r\n\r\n\t/**\r\n\t\tThe `util.deprecate()` method wraps `fn` (which may be a function or class) in such a way that it is marked\r\n\t\tasdeprecated.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_deprecate_fn_msg_code\r\n\t**/\r\n\tstatic function deprecate<T:haxe.Constraints.Function>(fun:T, msg:String, ?code:String):T;\r\n\r\n\t/**\r\n\t\tThe `util.format()` method returns a formatted string using the first argument as a `printf`-like format string\r\n\t\twhich can contain zero or more format specifiers.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_format_format_args\r\n\t**/\r\n\t@:overload(function(args:Rest<Dynamic>):String {})\r\n\tstatic function format(format:String, args:Rest<Dynamic>):String;\r\n\r\n\t/**\r\n\t\tThis function is identical to `util.format()`, except in that it takes an `inspectOptions` argument which\r\n\t\tspecifies options that are passed along to `util.inspect()`.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_formatwithoptions_inspectoptions_format_args\r\n\t**/\r\n\t@:overload(function(inspectOptions:InspectOptions, args:Rest<Dynamic>):String {})\r\n\tstatic function formatWithOptions(inspectOptions:InspectOptions, format:String, args:Rest<Dynamic>):String;\r\n\r\n\t/**\r\n\t\tReturns the string name for a numeric error code that comes from a Node.js API.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_getsystemerrorname_err\r\n\t**/\r\n\tstatic function getSystemErrorName(err:Int):String;\r\n\r\n\t/**\r\n\t\tInherit the prototype methods from one `constructor` into another.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function inherits(constructor:Class<Dynamic>, superConstructor:Class<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tThe `util.inspect()` method returns a string representation of `object` that is intended for debugging.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_inspect_object_options\r\n\t**/\r\n\t@:overload(function(object:Dynamic, ?showHidden:Bool, ?depth:Int, ?colors:Bool):String {})\r\n\tstatic function inspect(object:Dynamic, ?options:InspectOptions):String;\r\n\r\n\t/**\r\n\t\tReturns `true` if there is deep strict equality between `val1` and `val2`.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_isdeepstrictequal_val1_val2\r\n\t**/\r\n\tstatic function isDeepStrictEqual(val1:Dynamic, val2:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tTakes a function following the common error-first callback style, i.e. taking an `(err, value) => ...` callback\r\n\t\tas the last argument, and returns a version that returns promises.\r\n\r\n\t\t@see https://nodejs.org/api/util.html#util_util_promisify_original\r\n\t**/\r\n\tstatic function promisify(original:Function):Rest<Dynamic>->Promise<Dynamic>;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of `Console.error`.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.error instead\")\r\n\tstatic function debug(string:String):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of console.error.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.error instead\")\r\n\tstatic function error(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is an Array. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isArray(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Bool. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isBoolean(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Buffer. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isBuffer(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Date. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isDate(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is an Error. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isError(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Function. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isFunction(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is strictly null. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isNull(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is null or undefined. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isNullOrUndefined(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Float. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isNumber(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is strictly an Object and not a Function. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isObject(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a primitive type. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isPrimitive(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a RegExp. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isRegExp(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a String. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isString(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is a Symbol. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isSymbol(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns true if the given \"object\" is undefined. false otherwise.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function isUndefined(object:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tOutput with timestamp on stdout.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function log(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of console.log.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.log instead\")\r\n\tstatic function print(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of console.log.\r\n\t**/\r\n\t@:deprecated(\"Use js.Node.console.log instead\")\r\n\tstatic function puts(args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tDeprecated predecessor of stream.pipe().\r\n\t**/\r\n\t@:deprecated(\"Use `readableStream.pipe(writableStream)` instead\")\r\n\tstatic function pump(readableStream:IReadable, writableStream:IWritable, ?callback:Error->Void):Void;\r\n}\r\n\r\n/**\r\n\tOptions object used by `Console.dir`.\r\n**/\r\ntypedef InspectOptionsBase = {\r\n\t/**\r\n\t\tIf `true`, `object`'s non-enumerable symbols and properties are included in the formatted result.\r\n\t\t`WeakMap` and `WeakSet` entries are also included.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var showHidden:Bool;\r\n\r\n\t/**\r\n\t\tSpecifies the number of times to recurse while formatting `object`.\r\n\t\tThis is useful for inspecting large objects. To recurse up to the maximum call stack size pass `Infinity` or\r\n\t\t`null`.\r\n\r\n\t\tDefault: `2`.\r\n\t**/\r\n\t@:optional var depth:Null<Int>;\r\n\r\n\t/**\r\n\t\tIf `true`, the output is styled with ANSI color codes.\r\n\t\tColors are customizable.\r\n\t\tSee Customizing `util.inspect` colors.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var colors:Bool;\r\n}\r\n\r\n/**\r\n\tOptions object used by `Util.inspect`.\r\n**/\r\ntypedef InspectOptions = {\r\n\t> InspectOptionsBase,\r\n\r\n\t/**\r\n\t\tIf `false`, `[util.inspect.custom](depth, opts)` functions are not invoked.\r\n\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var customInspect:Bool;\r\n\r\n\t/**\r\n\t\tIf `true`, `Proxy` inspection includes the `target` and `handler` objects.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var showProxy:Bool;\r\n\r\n\t/**\r\n\t\tSpecifies the maximum number of `Array`, `TypedArray`, `WeakMap` and `WeakSet` elements to include when\r\n\t\tformatting.\r\n\t\tSet to `null` or `Infinity` to show all elements.\r\n\t\tSet to `0` or negative to show no elements.\r\n\r\n\t\tDefault: `100`.\r\n\t**/\r\n\t@:optional var maxArrayLength:Null<Int>;\r\n\r\n\t/**\r\n\t\tThe length at which input values are split across multiple lines.\r\n\t\tSet to `Infinity` to format the input as a single line (in combination with `compact` set to `true` or any\r\n\t\tnumber >= `1`).\r\n\r\n\t\tDefault: `80`.\r\n\t**/\r\n\t@:optional var breakLength:Float;\r\n\r\n\t/**\r\n\t\tSetting this to `false` causes each object key to be displayed on a new line.\r\n\t\tIt will also add new lines to text that is longer than `breakLength`.\r\n\t\tIf set to a number, the most `n` inner elements are united on a single line as long as all properties fit into\r\n\t\t`breakLength`.\r\n\t\tShort array elements are also grouped together.\r\n\t\tNo text will be reduced below 16 characters, no matter the `breakLength` size.\r\n\t\tFor more information, see the example below.\r\n\r\n\t\tDefault: `3`.\r\n\t**/\r\n\t@:optional var compact:EitherType<Bool, Int>;\r\n\r\n\t/**\r\n\t\tIf set to `true` or a function, all properties of an object, and `Set` and `Map` entries are sorted in the\r\n\t\tresulting string.\r\n\t\tIf set to `true` the default sort is used.\r\n\t\tIf set to a function, it is used as a compare function.\r\n\t**/\r\n\t@:optional var sorted:EitherType<Bool, Dynamic->Dynamic->Int>;\r\n\r\n\t/**\r\n\t\tIf set to `true`, getters are inspected.\r\n\t\tIf set to `'get'`, only getters without a corresponding setter are inspected.\r\n\t\tIf set to `'set'`, only getters with a corresponding setter are inspected.\r\n\t\tThis might cause side effects depending on the getter function.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var getters:EitherType<Bool, String>;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.console;\r\n\r\nimport haxe.extern.EitherType;\r\nimport haxe.extern.Rest;\r\nimport js.node.stream.Writable;\r\n\r\n/**\r\n\tThe `Console` class can be used to create a simple logger with configurable output streams\r\n\tand can be accessed using either `require('console').Console` or `console.Console` (or their destructured counterparts):\r\n\r\n\t@see https://nodejs.org/api/console.html#console_class_console\r\n**/\r\n@:jsRequire(\"console\", \"Console\")\r\nextern class Console {\r\n\t/**\r\n\t\tCreates a new `Console` with one or two writable stream instances. `stdout` is a writable stream to print log or info output.\r\n\t\t`stderr` is used for warning or error output. If `stderr` is not provided, `stdout` is used for stderr.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_new_console_stdout_stderr_ignoreerrors\r\n\t**/\r\n\t@:overload(function(options:ConsoleOptions):Void {})\r\n\tfunction new(stdout:IWritable, ?stderr:IWritable, ?ignoreerrors:Bool):Void;\r\n\r\n\t/**\r\n\t\tA simple assertion test that verifies whether `value` is truthy. If it is not, `Assertion` failed is logged.\r\n\t\tIf provided, the error `message` is formatted using `util.format()` by passing along all message arguments. The output is used as the error message.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_assert_value_message\r\n\t**/\r\n\tfunction assert(value:Dynamic, message:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tWhen `stdout` is a TTY, calling `console.clear()` will attempt to clear the TTY. When `stdout` is not a TTY, this method does nothing.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_clear\r\n\t**/\r\n\tfunction clear():Void;\r\n\r\n\t/**\r\n\t\tMaintains an internal counter specific to `label` and outputs to `stdout` the number of times `console.count()` has been called with the given `label`.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_count_label\r\n\t**/\r\n\tfunction count(?label:String):Void;\r\n\r\n\t/**\r\n\t\tResets the internal counter specific to `label`.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_countreset_label\r\n\t**/\r\n\tfunction countReset(?label:String):Void;\r\n\r\n\t/**\r\n\t\tThe `console.debug()` function is an alias for `console.log()`.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_debug_data_args\r\n\t**/\r\n\tfunction debug(data:Dynamic, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tUses util.inspect() on `obj` and prints the resulting string to `stdout`. This function bypasses any custom `inspect()` function defined on `obj`.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_dir_obj_options\r\n\t**/\r\n\tfunction dir(obj:Dynamic, ?options:Util.InspectOptionsBase):Void;\r\n\r\n\t/**\r\n\t\tThis method calls `console.log()` passing it the arguments received. This method does not produce any XML formatting.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_dirxml_data\r\n\t**/\r\n\tfunction dirxml(data:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tPrints to `stderr` with newline. Multiple arguments can be passed,\r\n\t\twith the first used as the primary message and all additional used as substitution values similar to printf(3)\r\n\t\t(the arguments are all passed to util.format()).\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_error_data_args\r\n\t**/\r\n\tfunction error(data:Dynamic, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tIf one or more `label`s are provided, those are printed first without the additional indentation.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_group_label\r\n\t**/\r\n\tfunction group(label:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tAn alias for console.group().\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_groupcollapsed\r\n\t**/\r\n\tfunction groupCollapsed():Void;\r\n\r\n\t/**\r\n\t\tDecreases indentation of subsequent lines by two spaces.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_groupend\r\n\t**/\r\n\tfunction groupEnd():Void;\r\n\r\n\t/**\r\n\t\tThe `console.info()` function is an alias for console.log().\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_info_data_args\r\n\t**/\r\n\tfunction info(data:Dynamic, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tPrints to `stdout` with newline. Multiple arguments can be passed,\r\n\t\twith the first used as the primary message and all additional used as substitution values similar to printf(3)\r\n\t\t(the arguments are all passed to util.format()).\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_log_data_args\r\n\t**/\r\n\tfunction log(data:Dynamic, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tTry to construct a table with the columns of the properties of `tabularData` (or use `properties`)\r\n\t\tand rows of `tabularData` and log it. Falls back to just logging the argument if it can’t be parsed as tabular.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_table_tabulardata_properties\r\n\t**/\r\n\tfunction table(tabularData:Dynamic, ?properties:Array<String>):Void;\r\n\r\n\t/**\r\n\t\tStarts a timer that can be used to compute the duration of an operation. Timers are identified by a unique `label`.\r\n\t\tUse the same `label` when calling console.timeEnd() to stop the timer and output the elapsed time in milliseconds to `stdout`.\r\n\t\tTimer durations are accurate to the sub-millisecond.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_time_label\r\n\t**/\r\n\tfunction time(?label:String):Void;\r\n\r\n\t/**\r\n\t\tStops a timer that was previously started by calling console.time() and prints the result to `stdout`:\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_timeend_label\r\n\t**/\r\n\tfunction timeEnd(?label:String):Void;\r\n\r\n\t/**\r\n\t\tFor a timer that was previously started by calling console.time(), prints the elapsed time and other `data` arguments to `stdout`:\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_timelog_label_data\r\n\t**/\r\n\tfunction timeLog(?label:String, data:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tPrints to `stderr` the string `'Trace: '`, followed by the util.format() formatted message and stack trace to the current position in the code.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_trace_message_args\r\n\t**/\r\n\tfunction trace(message:Dynamic, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tThe `console.warn()` function is an alias for console.error().\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_warn_data_args\r\n\t**/\r\n\tfunction warn(data:Dynamic, args:Rest<Dynamic>):Void;\r\n\r\n\t/**\r\n\t\tThis method does not display anything unless used in the inspector. The `console.markTimeline()` method is the deprecated form of console.timeStamp().\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_marktimeline_label\r\n\t**/\r\n\tfunction markTimeline(?label:String):Void;\r\n\r\n\t/**\r\n\t\tThis method does not display anything unless used in the inspector.\r\n\t\tThe `console.profile()` method starts a JavaScript CPU profile with an optional label until console.profileEnd() is called.\r\n\t\tThe profile is then added to the Profile panel of the inspector.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_profile_label\r\n\t**/\r\n\tfunction profile(?label:String):Void;\r\n\r\n\t/**\r\n\t\tThis method does not display anything unless used in the inspector.\r\n\t\tStops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector.\r\n\t\tSee console.profile() for an example.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_profileend_label\r\n\t**/\r\n\tfunction profileEnd(?label:String):Void;\r\n\r\n\t/**\r\n\t\tThis method does not display anything unless used in the inspector.\r\n\t\tThe `console.timeStamp()` method adds an event with the label `'label'` to the Timeline panel of the inspector.\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_timestamp_label\r\n\t**/\r\n\tfunction timeStamp(?label:String):Void;\r\n\r\n\t/**\r\n\t\tThis method does not display anything unless used in the inspector. The `console.timeline()` method is the deprecated form of console.time().\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_timeline_label\r\n\t**/\r\n\tfunction timeline(?label:String):Void;\r\n\r\n\t/**\r\n\t\tThis method does not display anything unless used in the inspector. The `console.timelineEnd()` method is the deprecated form of console.timeEnd().\r\n\r\n\t\t@see https://nodejs.org/api/console.html#console_console_timelineend_label\r\n\t**/\r\n\tfunction timelineEnd(?label:String):Void;\r\n}\r\n\r\ntypedef ConsoleOptions = {\r\n\t/**\r\n\t\t`stdout` is a writable stream to print log or info output.\r\n\t**/\r\n\tvar stdout:IWritable;\r\n\r\n\t/**\r\n\t\t`stderr` is used for warning or error output. If stderr is not provided, stdout is used for stderr.\r\n\t**/\r\n\t@optional var stderr:IWritable;\r\n\r\n\t/**\r\n\t\tIgnore errors when writing to the underlying streams. Default: `true`.\r\n\t**/\r\n\t@optional var ignoreErrors:Bool;\r\n\r\n\t/**\r\n\t\tSet color support for this `Console` instance. Setting to `true` enables coloring while inspecting values,\r\n\t\tsetting to `'auto'` will make color support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the respective stream.\r\n\t\t This option can not be used, if `inspectOptions.colors` is set as well. Default: `'auto'`.\r\n\t**/\r\n\t@optional var colorMode:EitherType<Bool, String>;\r\n\r\n\t/**\r\n\t\tSpecifies options that are passed along to util.inspect().\r\n\t**/\r\n\t@optional var inspectOptions:Util.InspectOptions;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.extern;\n\n/**\n\tAn abstract type allowing values to be either of `T1` or `T2` type.\n\tSupports implicit casts from/to either types.\n\n\tIt is useful for interfacing with external code on dynamic platforms\n\tsuch as JavaScript or Python.\n\n\tOtherwise, use of this type is discouraged.\n\n\t@see <https://haxe.org/manual/lf-externs.html>\n**/\nabstract EitherType<T1, T2>(Dynamic) from T1 to T1 from T2 to T2 {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.stream;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.Stream;\r\nimport js.node.events.EventEmitter.Event;\r\nimport js.node.stream.Readable.IReadable;\r\n#if haxe4\r\nimport js.lib.Error;\r\nimport js.lib.Object;\r\nimport js.lib.Uint8Array;\r\n#else\r\nimport js.Error;\r\nimport js.html.Uint8Array;\r\n#end\r\n\r\n/**\r\n\tWritable streams are an abstraction for a destination to which data is written.\r\n\r\n\t@see https://nodejs.org/api/stream.html#stream_writable_streams\r\n**/\r\n@:enum abstract WritableEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tThe `'close'` event is emitted when the stream and any of its underlying resources\r\n\t\t(a file descriptor, for example) have been closed.\r\n\t\tThe event indicates that no more events will be emitted, and no further computation will occur.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_close\r\n\t**/\r\n\tvar Close:WritableEvent<Void->Void> = \"close\";\r\n\r\n\t/**\r\n\t\tIf a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted\r\n\t\twhen it is appropriate to resume writing data to the stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_drain\r\n\t**/\r\n\tvar Drain:WritableEvent<Void->Void> = \"drain\";\r\n\r\n\t/**\r\n\t\tThe `'error'` event is emitted if an `error` occurred while writing or piping data.\r\n\t\tThe listener callback is passed a single Error argument when called.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_error\r\n\t**/\r\n\tvar Error:WritableEvent<Error->Void> = \"error\";\r\n\r\n\t/**\r\n\t\tThe `'finish'` event is emitted after the stream.end() method has been called,\r\n\t\tand all data has been flushed to the underlying system.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_finish\r\n\t**/\r\n\tvar Finish:WritableEvent<Void->Void> = \"finish\";\r\n\r\n\t/**\r\n\t\tThe `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,\r\n\t\tadding this writable to its set of destinations.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_pipe\r\n\t**/\r\n\tvar Pipe:WritableEvent<IReadable->Void> = \"pipe\";\r\n\r\n\t/**\r\n\t\tThe `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,\r\n\t\tremoving this Writable from its set of destinations.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_unpipe\r\n\t**/\r\n\tvar Unpipe:WritableEvent<IReadable->Void> = \"unpipe\";\r\n}\r\n\r\n/**\r\n\tThe Writable stream interface is an abstraction for a destination that you are writing data to.\r\n\r\n\tExamples of writable streams include:\r\n\r\n\t\t- http requests, on the client\r\n\t\t- http responses, on the server\r\n\t\t- fs write streams\r\n\t\t- zlib streams\r\n\t\t- crypto streams\r\n\t\t- tcp sockets\r\n\t\t- child process stdin\r\n\t\t- process.stdout, process.stderr\r\n**/\r\n@:jsRequire(\"stream\", \"Writable\")\r\nextern class Writable<TSelf:Writable<TSelf>> extends Stream<TSelf> implements IWritable {\r\n\t/**\r\n\t\tThe `writable.cork()` method forces all written data to be buffered in memory.\r\n\t\tThe buffered data will be flushed when either the `stream.uncork()` or `stream.end()` methods are called.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_cork\r\n\t**/\r\n\tfunction cork():Void;\r\n\r\n\t/**\r\n\t\tDestroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.\r\n\t\tAfter this call, the writable stream has ended and subsequent calls to `write()` or `end()` will result in an `ERR_STREAM_DESTROYED` error.\r\n\t\tThis is a destructive and immediate way to destroy a stream. Previous calls to `write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.\r\n\t\tUse `end()` instead of destroy if data should flush before close, or wait for the `'drain'` event before destroying the stream.\r\n\t\tImplementors should not override this method, but instead implement `writable._destroy()`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_destroy_error\r\n\t**/\r\n\tfunction destroy(?error:Error):TSelf;\r\n\r\n\t/**\r\n\t\tIs `true` after `writable.destroy()` has been called.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_destroyed\r\n\t**/\r\n\tvar destroyed(default, null):Bool;\r\n\r\n\t/**\r\n\t\tCalling the `writable.end()` method signals that no more data will be written to the Writable.\r\n\t\tThe optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.\r\n\t\tIf provided, the optional `callback` function is attached as a listener for the 'finish' event.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback\r\n\t**/\r\n\t@:overload(function(?callback:EitherType<Void->Void, Null<Error>->Void>):Void {})\r\n\tfunction end(chunk:Dynamic, ?encoding:String, ?callback:EitherType<Void->Void, Null<Error>->Void>):Void;\r\n\r\n\t/**\r\n\t\tThe `writable.setDefaultEncoding()` method sets the default `encoding` for a Writable stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_setdefaultencoding_encoding\r\n\t**/\r\n\tfunction setDefaultEncoding(encoding:String):TSelf;\r\n\r\n\t/**\r\n\t\tThe `writable.uncork()` method flushes all data buffered since `stream.cork()` was called.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_uncork\r\n\t**/\r\n\tfunction uncork():Void;\r\n\r\n\t/**\r\n\t\tIs `true` if it is safe to call `writable.write()`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writable\r\n\t**/\r\n\tvar writable(default, null):Bool;\r\n\r\n\t/**\r\n\t\tIs `true` after `writable.end()` has been called. This property\r\n\t\tdoes not indicate whether the data has been flushed, for this use\r\n\t\t`writable.writableFinished` instead.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writableended\r\n\t**/\r\n\tvar writableEnded(default, null):Bool;\r\n\r\n\t/**\r\n\t\tIs set to `true` immediately before the 'finish' event is emitted.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writablefinished\r\n\t**/\r\n\tvar writableFinished(default, null):Bool;\r\n\r\n\t/**\r\n\t\tReturn the value of `highWaterMark` passed when constructing this `Writable`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writablehighwatermark\r\n\t**/\r\n\tvar writablehighWaterMark(default, null):Int;\r\n\r\n\t/**\r\n\t\tThis property contains the number of bytes (or objects) in the queue ready to be written.\r\n\t\tThe value provides introspection data regarding the status of the `highWaterMark`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writablelength\r\n\t**/\r\n\tvar writableLength(default, null):Int;\r\n\r\n\t/**\r\n\t\tGetter for the property `objectMode` of a given `Writable` stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writableobjectmode\r\n\t**/\r\n\tvar writableObjectMode(default, null):Bool;\r\n\r\n\t/**\r\n\t\tThe `writable.write()` method writes some data to the stream, and calls the supplied `callback` once the data has been fully handled.\r\n\t\tIf an error occurs, the `callback` may or may not be called with the error as its first argument.\r\n\t\tTo reliably detect write errors, add a listener for the `'error'` event.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback\r\n\t**/\r\n\tfunction write(chunk:Dynamic, ?encoding:String, ?callback:EitherType<Void->Void, Null<Error>->Void>):Bool;\r\n\r\n\t// --------- API for implementing a Writable Stream -----------------------\r\n\r\n\t/**\r\n\t\t@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\r\n\t**/\r\n\tfunction new(?options:WritableNewOptionsAdapter);\r\n\r\n\t/**\r\n\t\tAll `Writable` stream implementations must provide a `writable._write()` method to send data to the underlying resource.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1\r\n\t**/\r\n\tprivate function _write(chunk:Dynamic, encoding:String, callback:Null<Error>->Void):Void;\r\n\r\n\t/**\r\n\t\tThis function **MUST NOT** be called by application code directly.\r\n\t\tIt should be implemented by child classes, and called by the internal `Writable` class methods only.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback\r\n\t**/\r\n\tprivate function _writev(chunks:Array<Chunk>, callback:Null<Error>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe `_destroy()` method is called by `writable.destroy()`.\r\n\t\tIt can be overridden by child classes but it **must not** be called directly.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_destroy_err_callback\r\n\t**/\r\n\tprivate function _destroy(err:Null<Error>, callback:Null<Error>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe `_final()` method **must not** be called directly.\r\n\t\tt may be implemented by child classes, and if so, will be called by the internal `Writable` class methods only.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_final_callback\r\n\t**/\r\n\tprivate function _final(callback:Null<Error>->Void):Void;\r\n\r\n\t// --------- TTY module API  ----------------------------------------------\r\n\r\n\t/**\r\n\t\tTerminal write streams (i.e. process.stdout) have this property set to true.\r\n\t\tIt is false for any other write streams.\r\n\r\n\t\t@see https://nodejs.org/api/tty.html#tty_writestream_istty\r\n\t**/\r\n\tvar isTTY(default, null):Bool;\r\n}\r\n\r\n/**\r\n\t@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\r\n**/\r\ntypedef WritableNewOptions = {\r\n\t/**\r\n\t\t`highWaterMark` <number> Buffer level when stream.write() starts returning `false`. Default: `16384` (16kb), or 16 for `objectMode` streams.\r\n\t**/\r\n\t@:optional var highWaterMark:Int;\r\n\r\n\t/**\r\n\t\t`decodeStrings` <boolean> Whether to encode `string`s passed to stream.write() to `Buffer`s (with the encoding specified in the stream.write() call) before passing them to stream._write().\r\n\t\tOther types of data are not converted (i.e. `Buffer`s are not decoded into `string`s). Setting to false will prevent strings from being converted.\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var decodeStrings:Bool;\r\n\r\n\t/**\r\n\t\t`defaultEncoding` <string> The default encoding that is used when no encoding is specified as an argument to stream.write().\r\n\t\tDefault: `'utf8'`.\r\n\t**/\r\n\t@:optional var defaultEncoding:String;\r\n\r\n\t/**\r\n\t\t`objectMode` <boolean> Whether or not the stream.write(anyObj) is a valid operation. When set,\r\n\t\tit becomes possible to write JavaScript values other than string, `Buffer` or `Uint8Array` if supported by the stream implementation.\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var objectMode:Bool;\r\n\r\n\t/**\r\n\t\t`emitClose` <boolean> Whether or not the stream should emit `'close'` after it has been destroyed.\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var emitClose:Bool;\r\n\r\n\t/**\r\n\t\t`write` <Function> Implementation for the stream._write() method.\r\n\t**/\r\n\t#if haxe4\r\n\t@:optional var write:(chunk:Dynamic, encoding:String, callback:Null<Error>->Void) -> Void;\r\n\t#else\r\n\t@:optional var write:Dynamic->String->Null<Error>->Void->Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\t`writev` <Function> Implementation for the stream._writev() method.\r\n\t**/\r\n\t#if haxe4\r\n\t@:optional var writev:(chunks:Array<Chunk>, callback:Null<Error>->Void) -> Void;\r\n\t#else\r\n\t@:optional var writev:Array<Chunk>->(Null<Error>->Void)->Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\t`destroy` <Function> Implementation for the stream._destroy() method.\r\n\t**/\r\n\t#if haxe4\r\n\t@:optional var destroy:(error:Null<Error>, callback:Null<Error>->Void) -> Void;\r\n\t#else\r\n\t@:optional var destroy:Null<Error>->(Null<Error>->Void)->Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\t`final` <Function> Implementation for the stream._final() method.\r\n\t**/\r\n\t// TODO @native in typedef cannot work now\r\n\t// @:native(\"final\")\r\n\t#if haxe4\r\n\t@:optional var final_:(error:Null<Error>) -> Void;\r\n\t#else\r\n\t@:optional var final_:Null<Error>->Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\t`autoDestroy` <boolean> Whether this stream should automatically call .destroy() on itself after ending. Default: false.\r\n\t**/\r\n\t@:optional var autoDestroy:Bool;\r\n}\r\n\r\n@:forward\r\nabstract WritableNewOptionsAdapter(WritableNewOptions) {\r\n\t@:from\r\n\tpublic static function from(options:WritableNewOptions):WritableNewOptionsAdapter {\r\n\t\tif (!Reflect.hasField(options, \"final\")) {\r\n\t\t\t#if haxe4\r\n\t\t\tObject.defineProperty(options, \"final\", {get: function() return options.final_});\r\n\t\t\t#else\r\n\t\t\tuntyped __js__(\"Object.defineProperty({0}, {1}, {2})\", options, \"final\", {get: function() return options.final_});\r\n\t\t\t#end\r\n\t\t}\r\n\t\treturn cast options;\r\n\t}\r\n}\r\n\r\n/**\r\n\tWritable interface used for type parameter constraints.\r\n\tSee `Writable` for actual class documentation.\r\n**/\r\n@:remove\r\nextern interface IWritable extends IStream {\r\n\tfunction cork():Void;\r\n\r\n\tfunction destroy(?error:Error):IWritable;\r\n\r\n\tvar destroyed(default, null):Bool;\r\n\r\n\t@:overload(function(?callback:EitherType<Void->Void, Null<Error>->Void>):Void {})\r\n\tfunction end(chunk:Dynamic, ?encoding:String, ?callback:EitherType<Void->Void, Null<Error>->Void>):Void;\r\n\r\n\tfunction setDefaultEncoding(encoding:String):IWritable;\r\n\r\n\tfunction uncork():Void;\r\n\r\n\tvar writable(default, null):Bool;\r\n\r\n\tvar writableEnded(default, null):Bool;\r\n\r\n\tvar writableFinished(default, null):Bool;\r\n\r\n\tvar writablehighWaterMark(default, null):Int;\r\n\r\n\tvar writableLength(default, null):Int;\r\n\r\n\tvar writableObjectMode(default, null):Bool;\r\n\r\n\tfunction write(chunk:Dynamic, ?encoding:String, ?callback:EitherType<Void->Void, Null<Error>->Void>):Bool;\r\n\r\n\tvar isTTY(default, null):Bool;\r\n}\r\n\r\ntypedef Chunk = {\r\n\tvar chunk:Dynamic;\r\n\tvar encoding:String;\r\n}\r\n"]}