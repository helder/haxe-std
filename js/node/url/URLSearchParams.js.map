{"sourceRoot":"","names":[],"mappings":"QAKA;;;;ACsHA;AAAA;CACC;;;CACA;;;CAEA;EAAA,YACQ,CAAC,MAAM,OADf;EAAA;;CAIA,uBACC;EAAA,AAAO,aAAK;;CAGb,wBACC;EAAA,AAAO,aAAK","version":3,"file":"URLSearchParams.js.map","sources":["../../../../../../../../haxe/haxe_libraries/genes/0.4.1/github/179cb495c2d785321879e8afe765aa04d639783d/src/genes/Register.hx","../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/url/URLSearchParams.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : undefined');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a)) js.Syntax.code('a.iterator()') else\n      untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.url;\r\n\r\nimport js.node.Iterator;\r\n\r\n/**\r\n\tThe `URLSearchParams` API provides read and write access to the query of a `URL`.\r\n\tThe `URLSearchParams` class can also be used standalone with one of the four following constructors.\r\n\tThe `URLSearchParams` class is also available on the global object.\r\n\r\n\tThe WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose,\r\n\tbut the purpose of the querystring module is more general, as it allows the customization of delimiter characters (`&` and` `=`). On the other hand, this API is designed purely for URL query strings.\r\n**/\r\n@:jsRequire(\"url\", \"URLSearchParams\")\r\nextern class URLSearchParams {\r\n\t@:overload(function(init:String):Void {})\r\n\t@:overload(function(obj:Dynamic<String>):Void {})\r\n\t@:overload(function(array:Array<URLSearchParamsEntry>):Void {})\r\n\t@:overload(function(iter:Iterator<URLSearchParamsEntry>):Void {})\r\n\tfunction new():Void;\r\n\r\n\t/**\r\n\t\tAppend a new name-value pair to the query string.\r\n\t**/\r\n\tfunction append(name:String, value:String):Void;\r\n\r\n\t/**\r\n\t\tRemove all name-value pairs whose name is `name`.\r\n\t**/\r\n\tfunction delete(name:String):Void;\r\n\r\n\t/**\r\n\t\tReturns an ES6 `Iterator` over each of the name-value pairs in the query.\r\n\t\tEach item of the iterator is a JavaScript `Array`.\r\n\t\tThe first item of the `Array` is the `name`, the second item of the `Array` is the `value`.\r\n\t**/\r\n\tfunction entries():Iterator<URLSearchParamsEntry>;\r\n\r\n\t/**\r\n\t\tIterates over each name-value pair in the query and invokes the given function.\r\n\t**/\r\n\t#if haxe4\r\n\t@:overload(function(fn:(value:String) -> Void, ?thisArg:Dynamic):Void {})\r\n\t@:overload(function(fn:(value:String, name:String) -> Void, ?thisArg:Dynamic):Void {})\r\n\tfunction forEach(fn:(value:String, name:String, searchParams:URLSearchParams) -> Void, ?thisArg:Dynamic):Void;\r\n\t#else\r\n\t@:overload(function(fn:String->Void, ?thisArg:Dynamic):Void {})\r\n\t@:overload(function(fn:String->String->Void, ?thisArg:Dynamic):Void {})\r\n\tfunction forEach(fn:String->String->URLSearchParams->Void, ?thisArg:Dynamic):Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\tReturns the value of the first name-value pair whose name is `name`.\r\n\t\tIf there are no such pairs, `null` is returned.\r\n\t**/\r\n\tfunction get(name:String):String;\r\n\r\n\t/**\r\n\t\tReturns the values of all name-value pairs whose name is `name`.\r\n\t\tIf there are no such pairs, an empty array is returned.\r\n\t**/\r\n\tfunction getAll(name:String):Array<String>;\r\n\r\n\t/**\r\n\t\tReturns `true` if there is at least one name-value pair whose name is `name`.\r\n\t**/\r\n\tfunction has(name:String):Bool;\r\n\r\n\t/**\r\n\t\tReturns an ES6 `Iterator` over the names of each name-value pair.\r\n\t**/\r\n\tfunction keys():Iterator<String>;\r\n\r\n\t/**\r\n\t\tSets the value in the `URLSearchParams` object associated with `name` to `value`.\r\n\t\tIf there are any pre-existing name-value pairs whose names are `name`, set the first such pair's value to `value` and remove all others.\r\n\t\tIf not, append the name-value pair to the query string.\r\n\t**/\r\n\tfunction set(name:String, value:String):Void;\r\n\r\n\t/**\r\n\t\tSort all existing name-value pairs in-place by their names. Sorting is done with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability),\r\n\t\tso relative order between name-value pairs with the same name is preserved.\r\n\r\n\t\tThis method can be used, in particular, to increase cache hits.\r\n\t**/\r\n\tfunction sort():Void;\r\n\r\n\t/**\r\n\t\tReturns the search parameters serialized as a string, with characters percent-encoded where necessary.\r\n\t**/\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tReturns an ES6 `Iterator` over the values of each name-value pair.\r\n\t**/\r\n\tfunction values():Iterator<String>;\r\n}\r\n\r\n/**\r\n\tThe name-value pair access helper for `js.node.url.URLSearchParams.entries()`.\r\n**/\r\nabstract URLSearchParamsEntry(Array<String>) {\r\n\tpublic var name(get, never):String;\r\n\tpublic var value(get, never):String;\r\n\r\n\tpublic function new(name:String, value:String) {\r\n\t\tthis = [name, value];\r\n\t}\r\n\r\n\tinline function get_name():String {\r\n\t\treturn this[0];\r\n\t}\r\n\r\n\tinline function get_value():String {\r\n\t\treturn this[1];\r\n\t}\r\n}\r\n"]}