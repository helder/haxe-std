{"sourceRoot":"","names":[],"mappings":";AA2HA;CACC,sBCvGgB;CDwGhB,uBCxGgB;QD0GhB,WC1GgB,wBCCV,ADDU","version":3,"file":"URLSearchParams.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/url/URLSearchParams.hx","../../../../../../../../haxe/versions/4.0.2/std/js/_std/String.hx","../../../../../../../../haxe/versions/4.0.2/std/js/_std/Array.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.url;\r\n\r\nimport js.node.Iterator;\r\n\r\n/**\r\n\tThe `URLSearchParams` API provides read and write access to the query of a `URL`.\r\n\tThe `URLSearchParams` class can also be used standalone with one of the four following constructors.\r\n\tThe `URLSearchParams` class is also available on the global object.\r\n\r\n\tThe WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose,\r\n\tbut the purpose of the querystring module is more general, as it allows the customization of delimiter characters (`&` and` `=`). On the other hand, this API is designed purely for URL query strings.\r\n**/\r\n@:jsRequire(\"url\", \"URLSearchParams\")\r\nextern class URLSearchParams {\r\n\t@:overload(function(init:String):Void {})\r\n\t@:overload(function(obj:Dynamic<String>):Void {})\r\n\t@:overload(function(array:Array<URLSearchParamsEntry>):Void {})\r\n\t@:overload(function(iter:Iterator<URLSearchParamsEntry>):Void {})\r\n\tfunction new():Void;\r\n\r\n\t/**\r\n\t\tAppend a new name-value pair to the query string.\r\n\t**/\r\n\tfunction append(name:String, value:String):Void;\r\n\r\n\t/**\r\n\t\tRemove all name-value pairs whose name is `name`.\r\n\t**/\r\n\tfunction delete(name:String):Void;\r\n\r\n\t/**\r\n\t\tReturns an ES6 `Iterator` over each of the name-value pairs in the query.\r\n\t\tEach item of the iterator is a JavaScript `Array`.\r\n\t\tThe first item of the `Array` is the `name`, the second item of the `Array` is the `value`.\r\n\t**/\r\n\tfunction entries():Iterator<URLSearchParamsEntry>;\r\n\r\n\t/**\r\n\t\tIterates over each name-value pair in the query and invokes the given function.\r\n\t**/\r\n\t#if haxe4\r\n\t@:overload(function(fn:(value:String) -> Void, ?thisArg:Dynamic):Void {})\r\n\t@:overload(function(fn:(value:String, name:String) -> Void, ?thisArg:Dynamic):Void {})\r\n\tfunction forEach(fn:(value:String, name:String, searchParams:URLSearchParams) -> Void, ?thisArg:Dynamic):Void;\r\n\t#else\r\n\t@:overload(function(fn:String->Void, ?thisArg:Dynamic):Void {})\r\n\t@:overload(function(fn:String->String->Void, ?thisArg:Dynamic):Void {})\r\n\tfunction forEach(fn:String->String->URLSearchParams->Void, ?thisArg:Dynamic):Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\tReturns the value of the first name-value pair whose name is `name`.\r\n\t\tIf there are no such pairs, `null` is returned.\r\n\t**/\r\n\tfunction get(name:String):String;\r\n\r\n\t/**\r\n\t\tReturns the values of all name-value pairs whose name is `name`.\r\n\t\tIf there are no such pairs, an empty array is returned.\r\n\t**/\r\n\tfunction getAll(name:String):Array<String>;\r\n\r\n\t/**\r\n\t\tReturns `true` if there is at least one name-value pair whose name is `name`.\r\n\t**/\r\n\tfunction has(name:String):Bool;\r\n\r\n\t/**\r\n\t\tReturns an ES6 `Iterator` over the names of each name-value pair.\r\n\t**/\r\n\tfunction keys():Iterator<String>;\r\n\r\n\t/**\r\n\t\tSets the value in the `URLSearchParams` object associated with `name` to `value`.\r\n\t\tIf there are any pre-existing name-value pairs whose names are `name`, set the first such pair's value to `value` and remove all others.\r\n\t\tIf not, append the name-value pair to the query string.\r\n\t**/\r\n\tfunction set(name:String, value:String):Void;\r\n\r\n\t/**\r\n\t\tSort all existing name-value pairs in-place by their names. Sorting is done with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability),\r\n\t\tso relative order between name-value pairs with the same name is preserved.\r\n\r\n\t\tThis method can be used, in particular, to increase cache hits.\r\n\t**/\r\n\tfunction sort():Void;\r\n\r\n\t/**\r\n\t\tReturns the search parameters serialized as a string, with characters percent-encoded where necessary.\r\n\t**/\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tReturns an ES6 `Iterator` over the values of each name-value pair.\r\n\t**/\r\n\tfunction values():Iterator<String>;\r\n}\r\n\r\n/**\r\n\tThe name-value pair access helper for `js.node.url.URLSearchParams.entries()`.\r\n**/\r\nabstract URLSearchParamsEntry(Array<String>) {\r\n\tpublic var name(get, never):String;\r\n\tpublic var value(get, never):String;\r\n\r\n\tpublic function new(name:String, value:String) {\r\n\t\tthis = [name, value];\r\n\t}\r\n\r\n\tinline function get_name():String {\r\n\t\treturn this[0];\r\n\t}\r\n\r\n\tinline function get_value():String {\r\n\t\treturn this[1];\r\n\t}\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():Iterator<T> {\n\t\treturn @:privateAccess HxOverrides.iter(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n"]}