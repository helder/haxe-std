{"sourceRoot":"","names":[],"mappings":";YAmGA,oBAMY,OCvBZ,OAWoC,SDmBxB,WC9BZ,OAWoC,SD0BxB,SCrCZ,OAWoC,SDiCxB,UC5CZ,OAWoC;;YDyCpC,aAoCY,OCxFZ,OC7DiB,QFwNL,OC3JZ,OC7DiB,QF0IL,OC7EZ,OC7DiB,QF4JL,WC/FZ,OC7DiB,QFuHL,OC1DZ,OC7DiB,QFgML,OCnIZ,OC7DiB,QF8KL,WCjHZ,OC7DiB,QFmKL,OCtGZ,OC7DiB,QF8HL,WCjEZ,OC7DiB,QFiNL,QCpJZ,OC7DiB,MCcjB,mBDdiB,SFuLL,SC1HZ,OC7DiB,QFmIL,UCtEZ,OAWoC","version":3,"file":"Url.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Url.hx","../../../../../../../haxe/versions/4.0.5/std/StdTypes.hx","../../../../../../../haxe/versions/4.0.5/std/js/_std/String.hx","../../../../../../../haxe/versions/4.0.5/std/haxe/extern/EitherType.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport js.node.url.URL;\r\n\r\n/**\r\n\tThe `url` module provides utilities for URL resolution and parsing.\r\n**/\r\n@:jsRequire(\"url\")\r\nextern class Url {\r\n\t/**\r\n\t\tReturns the Punycode ASCII serialization of the `domain`. If `domain` is an invalid domain, the empty string is returned.\r\n\r\n\t\tIt performs the inverse operation to `url.domainToUnicode()`.\r\n\t**/\r\n\tstatic function domainToASCII(domain:String):String;\r\n\r\n\t/**\r\n\t\tReturns the Unicode serialization of the `domain`. If `domain` is an invalid domain, the empty string is returned.\r\n\r\n\t\tIt performs the inverse operation to `url.dmainToASCII()`.\r\n\t**/\r\n\tstatic function domainToUnicode(domain:String):String;\r\n\r\n\t/**\r\n\t\tThis function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.\r\n\t**/\r\n\t@:overload(function(url:String):String {})\r\n\tstatic function fileURLToPath(url:URL):String;\r\n\r\n\t/**\r\n\t\tReturns a customizable serialization of a URL `String` representation of a [WHATWG URL](https://nodejs.org/api/url.html#url_the_whatwg_url_api) object.\r\n\r\n\t\tThe URL object has both a `toString()` method and href property that return string serializations of the URL.\r\n\t\tThese are not, however, customizable in any way.\r\n\t\tThe `url.format(URL[, options])` method allows for basic customization of the output.\r\n\r\n\t\t`format(urlObject:UrlObject)` and `format(urlObject:String)` are deprecated.\r\n\t**/\r\n\t@:overload(function(urlObject:UrlObject):String {})\r\n\t@:overload(function(urlObject:String):String {})\r\n\tstatic function format(url:URL, ?options:UrlFormatOptions):String;\r\n\r\n\t/**\r\n\t\tThis function ensures that `path` is resolved absolutely,\r\n\t\tand that the URL control characters are correctly encoded when converting into a File URL.\r\n\t**/\r\n\tstatic function pathToFileURL(path:String):URL;\r\n\r\n\t/**\r\n\t\tTakes a URL string, parses it, and returns a URL object.\r\n\r\n\t\tIf `parseQueryString` is true, the `query` property will always be set to an object returned by the `Querystring.parse` method.\r\n\t\tIf false, the `query` property on the returned URL object will be an unparsed, undecoded string.\r\n\t\tDefaults to false.\r\n\r\n\t\tIf `slashesDenoteHost` is true, the first token after the literal string `//` and preceding the next `/` will be interpreted as the host.\r\n\t\tFor instance, given `//foo/bar`, the result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.\r\n\t\tDefaults to false.\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function parse(urlString:String, ?parseQueryString:Bool, ?slashesDenoteHost:Bool):UrlObject;\r\n\r\n\t/**\r\n\t\tResolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.\r\n\r\n\t\tExamples:\r\n\r\n\t\t```haxe\r\n\t\tresolve('/one/two/three', 'four')         // '/one/two/four'\r\n\t\tresolve('http://example.com/', '/one')    // 'http://example.com/one'\r\n\t\tresolve('http://example.com/one', '/two') // 'http://example.com/two'\r\n\t\t```\r\n\t**/\r\n\t@:deprecated\r\n\tstatic function resolve(from:String, to:String):String;\r\n}\r\n\r\ntypedef UrlFormatOptions = {\r\n\t/**\r\n\t\t`true` if the serialized URL string should include the username and password, `false` otherwise.\r\n\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var auth:Bool;\r\n\r\n\t/**\r\n\t\t`true` if the serialized URL string should include the fragment, `false` otherwise.\r\n\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var fragment:Bool;\r\n\r\n\t/**\r\n\t\t`true` if the serialized URL string should include the search query, `false` otherwise.\r\n\r\n\t\tDefault: `true`.\r\n\t**/\r\n\t@:optional var search:Bool;\r\n\r\n\t/**\r\n\t\t`true` if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to being Punycode encoded.\r\n\r\n\t\tDefault: `false`.\r\n\t**/\r\n\t@:optional var unicode:Bool;\r\n}\r\n\r\n/**\r\n\tParsed URL objects have some or all of the following fields, depending on whether or not they exist in the URL string.\r\n\tAny parts that are not in the URL string will not be in the parsed object.\r\n**/\r\n@:deprecated\r\ntypedef UrlObject = {\r\n\t/**\r\n\t\tThe full URL string that was parsed with both the `protocol` and `host` components converted to lower-case.\r\n\r\n\t\tFor example: 'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'\r\n\t**/\r\n\t@:optional var href:String;\r\n\r\n\t/**\r\n\t\tThe URL's lower-cased protocol scheme.\r\n\r\n\t\tFor example: 'http:'\r\n\t**/\r\n\t@:optional var protocol:String;\r\n\r\n\t/**\r\n\t\tTrue if two ASCII forward-slash characters (`/`) are required following the colon in the `protocol`.\r\n\t**/\r\n\t@:optional var slashes:Bool;\r\n\r\n\t/**\r\n\t\tThe full lower-cased host portion of the URL, including the `port` if specified.\r\n\r\n\t\tFor example: 'host.com:8080'\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tThe username and password portion of the URL, also referred to as \"userinfo\".\r\n\t\tThis string subset follows the `protocol` and double slashes (if present) and precedes the `host` component,\r\n\t\tdelimited by an ASCII \"at sign\" (`@`).\r\n\r\n\t\tThe format of the string is `{username}[:{password}]`, with the `[:{password}]` portion being optional.\r\n\r\n\t\tFor example: 'user:pass'\r\n\t**/\r\n\t@:optional var auth:String;\r\n\r\n\t/**\r\n\t\tThe lower-cased host name portion of the `host` component without the `port` included.\r\n\r\n\t\tFor example: 'host.com'\r\n\t**/\r\n\t@:optional var hostname:String;\r\n\r\n\t/**\r\n\t\tThe numeric port portion of the `host` component.\r\n\r\n\t\tFor example: '8080'\r\n\t**/\r\n\t@:optional var port:String;\r\n\r\n\t/**\r\n\t\tThe entire path section of the URL. This is everything following the `host` (including the `port`) and\r\n\t\tbefore the start of the `query` or `hash` components, delimited by either the ASCII question mark (`?`) or\r\n\t\thash (`#`) characters.\r\n\r\n\t\tFor example '/p/a/t/h'\r\n\r\n\t\tNo decoding of the path string is performed.\r\n\t**/\r\n\t@:optional var pathname:String;\r\n\r\n\t/**\r\n\t\tThe entire \"query string\" portion of the URL, including the leading ASCII question mark (`?`) character.\r\n\r\n\t\tFor example: '?query=string'\r\n\r\n\t\tNo decoding of the query string is performed.\r\n\t**/\r\n\t@:optional var search:String;\r\n\r\n\t/**\r\n\t\tConcatenation of the `pathname` and `search` components.\r\n\r\n\t\tFor example: '/p/a/t/h?query=string'\r\n\r\n\t\tNo decoding of the path is performed.\r\n\t**/\r\n\t@:optional var path:String;\r\n\r\n\t/**\r\n\t\tEither the query string without the leading ASCII question mark (`?`),\r\n\t\tor an object returned by the `Querystring.parse` method.\r\n\r\n\t\tWhether the `query` property is a string or object is determined by the `parseQueryString` argument passed to `Url.parse`.\r\n\r\n\t\tFor example: 'query=string' or {'query': 'string'}\r\n\r\n\t\tIf returned as a string, no decoding of the query string is performed.\r\n\t\tIf returned as an object, both keys and values are decoded.\r\n\r\n\t\tThe type of this field can be implicitly converted to `String` or `DynamicAccess<String>`,\r\n\t\twhere either one is expected, so if you know the actual type, just assign it\r\n\t\tto properly typed variable (e.g. var s:String = url.query)\r\n\t**/\r\n\t@:optional var query:haxe.extern.EitherType<String, haxe.DynamicAccess<String>>;\r\n\r\n\t/**\r\n\t\tThe \"fragment\" portion of the URL including the leading ASCII hash (`#`) character.\r\n\r\n\t\tFor example: '#hash'\r\n\t**/\r\n\t@:optional var hash:String;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.extern;\n\n/**\n\tAn abstract type allowing values to be either of `T1` or `T2` type.\n\tSupports implicit casts from/to either types.\n\n\tIt is useful for interfacing with external code on dynamic platforms\n\tsuch as JavaScript or Python.\n\n\tOtherwise, use of this type is discouraged.\n\n\t@see <https://haxe.org/manual/lf-externs.html>\n**/\nabstract EitherType<T1, T2>(Dynamic) from T1 to T1 from T2 to T2 {}\n"]}