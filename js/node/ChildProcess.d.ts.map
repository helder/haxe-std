{"sourceRoot":"","names":[],"mappings":"QA2CO;;ACPC,yCAII,MC0CZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QF6BL,MCgCZ,OAtBoC;;ADU5B,4CA9BI,MC0CZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QFuDL,QCMZ,ODmDA,+BAnFY,MCgCZ,OAtBoC;;ADsBpC,wCA1CY,MC0CZ,OC7DiB,QFmEL,WCNZ,OAWoC,SDhDxB,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QFuDL,QCMZ,ODmDA,+BAnFY,MCgCZ,OAtBoC;;ADkCpC,4CAtDY,MC0CZ,OC7DiB,QFoLL,WCvHZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDsCxB,QChBZ,OC7DiB,MCcjB,GJQO,QCwKK,aCjIZ,OC7DiB,QFqML,YCxIZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QFuDL,QCMZ,ODmDA,+BAyEY,UC5HZ,OAtBoC,QDVxB,MCgCZ,OAtBoC;;ADyEpC,4CEhHiB,MCcjB,GCVO;;AJqKP,gDIrKO;;AJ0KC,2CA3JI,MC0CZ,OC7DiB,QFoLL,WCvHZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDuJxB,aCjIZ,OC7DiB,QFqML,YCxIZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QFyLL,UC5HZ,OAtBoC,QDVxB,MCgCZ,OAtBoC;;ADoKpC,uCAxLY,MC0CZ,OC7DiB,QFoLL,WCvHZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDuJxB,aCjIZ,OC7DiB,QFqML,YCxIZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QFyLL,UC5HZ,OAtBoC,QDVxB,MCgCZ,OAtBoC;;AD2KpC,2CA/LY,MC0CZ,OC7DiB,QFoLL,WCvHZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFkCL,MC2BZ,OAtBoC,QDuJxB,aCjIZ,OC7DiB,QFqML,YCxIZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QFyLL,UC5HZ,OAtBoC,QDVxB,MCgCZ,OAtBoC;;ADkLpC,uCAtMY,MC0CZ,OC7DiB,QFwBL,MCqCZ,uBC7DiB,SFoOL,WCvKZ,OGzDO,AFJU,UF+NL,WClKZ,OC7DiB,QFkCL,MC2BZ,OAtBoC,QDIxB,QCkBZ,OAWoC,OE1DpC,GDdiB,QF2OL,SC9KZ,OAWoC,SD3CxB,MCgCZ,OAtBoC;;AD+NpC,gDCzMA,ODqLO,eD5NA,MIRP,GDdiB,gBHsBV,MIRP,GDdiB,WDUN;;ADkQX,2CAkCC,OK1SM,OLiRN,QIjRM,ALkBA,MIRP,GDdiB,UFgRhB,KCzOmC,QDkQnC,QEzSgB,QFoShB,QC7PmC,QDwPnC,QDzQM,MIRP,GDdiB,QF0RhB,QDpQM,MIRP,GDdiB","version":3,"file":"ChildProcess.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/ChildProcess.hx","../../../../../../../haxe/versions/4.1.4/std/StdTypes.hx","../../../../../../../haxe/versions/4.1.4/std/js/_std/String.hx","../../../../../../../haxe/versions/4.1.4/std/haxe/extern/EitherType.hx","../../../../../../../haxe/versions/4.1.4/std/js/_std/Array.hx","../../../../../../../haxe/versions/4.1.4/std/js/lib/Error.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.buffer;\r\n\r\nimport haxe.io.Bytes;\r\nimport haxe.io.UInt8Array;\r\n#if haxe4\r\nimport js.lib.ArrayBuffer;\r\nimport js.lib.ArrayBufferView;\r\nimport js.lib.Object;\r\nimport js.lib.Uint8Array;\r\n#else\r\nimport js.html.ArrayBuffer;\r\nimport js.html.ArrayBufferView;\r\nimport js.html.Uint8Array;\r\n#end\r\n\r\n/**\r\n\tThe `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.\r\n\r\n\t@see https://nodejs.org/api/buffer.html#buffer_class_buffer\r\n**/\r\n@:jsRequire(\"buffer\", \"Buffer\")\r\nextern class Buffer extends Uint8Array {\r\n\t/**\r\n\t\tAllocates a new buffer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding\r\n\t**/\r\n\t@:deprecated\r\n\t@:overload(function(array:Array<Int>):Void {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Void {})\r\n\t@:overload(function(buffer:UInt8Array):Void {})\r\n\t@:overload(function(size:Int):Void {})\r\n\tfunction new(string:String, ?encoding:String):Void;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\r\n\t**/\r\n\t@:overload(function(size:Int, fill:String, ?encoding:String):Buffer {})\r\n\t@:overload(function(size:Int, fill:Uint8Array):Buffer {})\r\n\t@:overload(function(size:Int, fill:Int):Buffer {})\r\n\tstatic function alloc(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\r\n\t**/\r\n\tstatic function allocUnsafe(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size\r\n\t**/\r\n\tstatic function allocUnsafeSlow(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tReturns the actual byte length of a string. This is not the same as\r\n\t\t`String.prototype.length` since that returns the number of characters in\r\n\t\ta string.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding\r\n\t**/\r\n\t#if (haxe_ver >= 3.3)\r\n\t// it need extern SharedArrayBuffer for Node\r\n\t// @:overload(function(string:SharedArrayBuffer):Int {})\r\n\t@:overload(function(string:String, ?encoding:String):Int {})\r\n\t@:overload(function(string:ArrayBufferView):Int {})\r\n\t@:overload(function(string:ArrayBuffer):Int {})\r\n\tstatic function byteLength(string:Buffer):Int;\r\n\t#end\r\n\r\n\t#if (haxe_ver >= 3.3)\r\n\t@:deprecated(\"In haxe 3.3+, use Buffer.byteLength instead!\")\r\n\t#end\r\n\tinline static function _byteLength(string:String, ?encoding:String):Int\r\n\t\treturn untyped Buffer['byteLength'](string, encoding);\r\n\r\n\t/**\r\n\t\tCompares `buf1` to `buf2` typically for the purpose of sorting arrays of\r\n\t\t`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2\r\n\t**/\r\n\t@:native(\"compare\")\r\n\tstatic function compareBuffers(buf1:Uint8Array, buf2:Uint8Array):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength\r\n\t**/\r\n\tstatic function concat<T:Uint8Array>(list:Array<T>, ?totalLength:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding\r\n\t**/\r\n\t// it need extern SharedArrayBuffer for node\r\n\t// @:overload(function(arrayBuffer:SharedArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(array:Array<Int>):Buffer {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(buffer:Uint8Array):Buffer {})\r\n\t@:overload(function(object:{}, ?offset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(object:{}, ?encoding:String, ?length:Int):Buffer {})\r\n\tstatic function from(string:String, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tReturns `true` if `obj` is a `Buffer`, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj\r\n\t**/\r\n\tstatic function isBuffer(obj:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns `true` if `encoding` contains a supported character encoding, or `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding\r\n\t**/\r\n\tstatic function isEncoding(encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tThis is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize\r\n\t**/\r\n\tstatic var poolSize:Int;\r\n\r\n\t// buf[index]\r\n\t// var buffer:ArrayBuffer;\r\n\r\n\t/**\r\n\t\tWhen setting `byteOffset` in `Buffer.from(ArrayBuffer, byteOffset, length)`\r\n\t\tor sometimes when allocating a buffer smaller than `Buffer.poolSize` the\r\n\t\tbuffer doesn't start from a zero offset on the underlying `ArrayBuffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_byteoffset\r\n\t**/\r\n\tstatic var byteOffset(default, null):Int;\r\n\r\n\t/**\r\n\t\tCompares `buf` with `target` and returns a number indicating whether `buf` comes before, after,\r\n\t\tor is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Int {})\r\n\tfunction compare(target:Uint8Array, ?targetStart:Int, ?targetEnd:Int, ?sourceStart:Int, ?sourceEnd:Int):Int;\r\n\r\n\t/**\r\n\t\tCopies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Void {})\r\n\tfunction copy(target:Uint8Array, ?targetStart:Int, ?sourceStart:Int, ?sourceEnd:Int):Void;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `[index, byte]` pairs from the contents of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_entries\r\n\t**/\r\n\tfunction entries():js.node.Iterator<js.node.KeyValue<Int, Int>>;\r\n\r\n\t/**\r\n\t\tReturns `true` if both `buf` and `otherBuffer` have exactly the same bytes, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer\r\n\t**/\r\n\tfunction equals(otherBuffer:Uint8Array):Bool;\r\n\r\n\t/**\r\n\t\tFills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?offset:Int, ?end:Int):Buffer {})\r\n\t@:overload(function(value:Int, ?offset:Int, ?end:Int):Buffer {})\r\n\tfunction fill(value:String, ?offset:Int, ?end:Int, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tEquivalent to `buf.indexOf() !== -1`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Bool {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Bool {})\r\n\tfunction includes(value:String, ?byteOffset:Int, ?encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tIf `value` is:\r\n\r\n\t\t- a string, `value` is interpreted according to the character encoding in `encoding`.\r\n\t\t- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().\r\n\t\t- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction indexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `buf` keys (indices).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_keys\r\n\t**/\r\n\tfunction keys():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tIdentical to `buf.indexOf()`, except the last occurrence of `value` is found\r\n\t\trather than the first occurrence.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction lastIndexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t// var length(default, null):Int;\r\n\t// these functions need BigInt implementation.\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64be_offset\r\n\t// **/\r\n\t// function readBigInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64le_offset\r\n\t// **/\r\n\t// function readBigInt64LE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64be_offset\r\n\t// **/\r\n\t// function readBigUInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64le_offset\r\n\t// **/\r\n\t// function readBigUInt64LE(?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset\r\n\t**/\r\n\tfunction readDoubleBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset\r\n\t**/\r\n\tfunction readDoubleLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset\r\n\t**/\r\n\tfunction readFloatBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset\r\n\t**/\r\n\tfunction readFloatLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a signed 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\thttps://nodejs.org/api/buffer.html#buffer_buf_readint8_offset\r\n\t**/\r\n\tfunction readInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset\r\n\t**/\r\n\tfunction readInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset\r\n\t**/\r\n\tfunction readInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength\r\n\t**/\r\n\tfunction readIntBE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength\r\n\t**/\r\n\tfunction readIntLE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset\r\n\t**/\r\n\tfunction readUInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset\r\n\t**/\r\n\tfunction readUInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset\r\n\t**/\r\n\tfunction readUInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_subarray_start_end\r\n\t**/\r\n\t#if haxe4\r\n\tfunction subarray(?start:Int, ?end:Int):Buffer;\r\n\t#else\r\n\toverride function subarray(start:Int, ?end:Int):Buffer;\r\n\t#end\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end\r\n\t**/\r\n\tfunction slice(?start:Int, ?end:Int):Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 16-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 2.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap16\r\n\t**/\r\n\tfunction swap16():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 32-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 4.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap32\r\n\t**/\r\n\tfunction swap32():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of 64-bit numbers and swaps byte order in-place.\r\n\t\tThrows `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap64\r\n\t**/\r\n\tfunction swap64():Buffer;\r\n\r\n\t/**\r\n\t\tReturns a JSON representation of `buf`. `JSON.stringify()` implicitly calls\r\n\t\tthis function when stringifying a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tojson\r\n\t**/\r\n\tfunction toJSON():Dynamic;\r\n\r\n\t/**\r\n\t\tDecodes `buf` to a string according to the specified character encoding in `encoding`.\r\n\t\t`start` and `end` may be passed to decode only a subset of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end\r\n\t**/\r\n\t@:overload(function(?encoding:String, ?start:Int, ?end:Int):String {})\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator for `buf` values (bytes). This function is called automatically\r\n\t\twhen a `Buffer` is used in a `for..of` statement.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_values\r\n\t**/\r\n\tfunction values():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tWrites `string` to `buf` at `offset` according to the character encoding in `encoding`.\r\n\t\tThe `length` parameter is the number of bytes to write.\r\n\t\tIf `buf` did not contain enough space to fit the entire `string`, only part of string will be written.\r\n\t\tHowever, partially encoded characters will not be written.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding\r\n\t**/\r\n\tfunction write(string:String, ?offset:Int, ?length:Int, ?encoding:String):Int;\r\n\r\n\t// these functions need BigInt Implementation.\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64be_value_offset\r\n\t// **/\r\n\t// function writeBigInt64BE(value:Int, ?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64le_value_offset\r\n\t// **/\r\n\t// function writeBigInt64LE(value:Int, ?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset\r\n\t**/\r\n\tfunction writeDoubleBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset\r\n\t**/\r\n\tfunction writeDoubleLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset\r\n\t**/\r\n\tfunction writeFloatBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset\r\n\t**/\r\n\tfunction writeFloatLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid signed 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset\r\n\t**/\r\n\tfunction writeInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset\r\n\t**/\r\n\tfunction writeInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset\r\n\t**/\r\n\tfunction writeInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset\r\n\t**/\r\n\tfunction writeInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset\r\n\t**/\r\n\tfunction writeInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntBE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntLE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid unsigned 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset\r\n\t**/\r\n\tfunction writeUInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset\r\n\t**/\r\n\tfunction writeUInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset\r\n\t**/\r\n\tfunction writeUInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset\r\n\t**/\r\n\tfunction writeUInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset\r\n\t**/\r\n\tfunction writeUInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tDefault: `50`\r\n\r\n\t\tReturns the maximum number of bytes that will be returned when `buf.inspect()` is called.\r\n\t\tThis can be overridden by user modules.\r\n\t\tSee `util.inspect()` for more details on `buf.inspect()` behavior.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes\r\n\t**/\r\n\tstatic var INSPECT_MAX_BYTES(get, set):Int;\r\n\r\n\tprivate static inline function get_INSPECT_MAX_BYTES():Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES;\r\n\t}\r\n\tprivate static inline function set_INSPECT_MAX_BYTES(bytes:Int):Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES = bytes;\r\n\t}\r\n\r\n\t/**\r\n\t\tAn alias for `buffer.constants.MAX_LENGTH`.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength\r\n\t**/\r\n\tstatic var kMaxLength(get, never):Int;\r\n\r\n\tprivate static inline function get_kMaxLength():Int {\r\n\t\treturn BufferModule.kMaxLength;\r\n\t}\r\n\r\n\t/**\r\n\t\tRe-encodes the given `Buffer` or `Uint8Array` instance from one character encoding to another.\r\n\t\tReturns a new `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_transcode_source_fromenc_toenc\r\n\t**/\r\n\tstatic inline function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer {\r\n\t\treturn BufferModule.transcode(source, fromEnc, toEnc);\r\n\t};\r\n\r\n\t/**\r\n\t\t`buffer.constants` is a property on the `buffer` module returned by `require('buffer')`,\r\n\t\tnot on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants\r\n\t**/\r\n\tstatic var constants(default, never):BufferConstants;\r\n\r\n\tprivate static inline function get_constants():BufferConstants {\r\n\t\treturn BufferModule.constants;\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.\r\n\t\tAny modifications done using the returned object will be reflected in the `this` buffer.\r\n\t**/\r\n\tinline function hxToBytes():Bytes {\r\n\t\treturn Helper.bytesOfBuffer(this);\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.\r\n\t\tAny modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.\r\n\t**/\r\n\tstatic inline function hxFromBytes(b:Bytes):Buffer {\r\n\t\tvar data = @:privateAccess b.b;\r\n\t\treturn Buffer.from(data.buffer, data.byteOffset, b.length);\r\n\t}\r\n}\r\n\r\n@:dce\r\nprivate class Helper {\r\n\tpublic static function bytesOfBuffer(b:Buffer):haxe.io.Bytes untyped {\r\n\t\tvar o = Object.create(haxe.io.Bytes.prototype);\r\n\t\t// the following is basically a haxe.io.Bytes constructor,\r\n\t\t// but using given buffer instead of creating new Uint8Array\r\n\t\to.length = b.byteLength;\r\n\t\to.b = b;\r\n\t\tb.bufferValue = b;\r\n\t\tb.hxBytes = o;\r\n\t\tb.bytes = b;\r\n\t\treturn o;\r\n\t}\r\n}\r\n\r\n@:jsRequire(\"buffer\")\r\nprivate extern class BufferModule {\r\n\tstatic var INSPECT_MAX_BYTES:Int;\r\n\tstatic var kMaxLength(default, never):Int;\r\n\tstatic function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer;\r\n\tstatic var constants(default, never):BufferConstants;\r\n}\r\n\r\ntypedef BufferConstants = {\r\n\t/**\r\n\t\tOn 32-bit architectures, this value is `(2^30)-1` (`~1GB`).\r\n\t\tOn 64-bit architectures, this value is `(2^31)-1` (`~2GB`).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length\r\n\t**/\r\n\tvar MAX_LENGTH(default, never):Int;\r\n\r\n\t/**\r\n\t\tRepresents the largest `length` that a `string` primitive can have, counted\r\n\t\tin UTF-16 code units.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_string_length\r\n\t**/\r\n\tvar MAX_STRING_LENGTH(default, never):Int;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.DynamicAccess;\r\nimport haxe.extern.EitherType;\r\nimport js.node.child_process.ChildProcess as ChildProcessObject;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tCommon options for all `ChildProcess` methods.\r\n**/\r\nprivate typedef ChildProcessCommonOptions = {\r\n\t/**\r\n\t\tCurrent working directory of the child process.\r\n\t**/\r\n\t@:optional var cwd:String;\r\n\r\n\t/**\r\n\t\tEnvironment key-value pairs\r\n\t**/\r\n\t@:optional var env:DynamicAccess<String>;\r\n\r\n\t/**\r\n\t\tSets the user identity of the process. See setuid(2).\r\n\t**/\r\n\t@:optional var uid:Int;\r\n\r\n\t/**\r\n\t\tSets the group identity of the process. See setgid(2).\r\n\t**/\r\n\t@:optional var gid:Int;\r\n\r\n\t/**\r\n\t\tShell to execute the command with.\r\n\t\tDefault: '/bin/sh' on UNIX, 'cmd.exe' on Windows.\r\n\r\n\t\tThe shell should understand the -c switch on UNIX or /s /c on Windows.\r\n\t\tOn Windows, command line parsing should be compatible with cmd.exe.\r\n\t**/\r\n\t@:optional var shell:EitherType<Bool, String>;\r\n}\r\n\r\n/**\r\n\tCommon options for `spawn` and `spawnSync` methods.\r\n**/\r\nprivate typedef ChildProcessSpawnOptionsBase = {\r\n\t> ChildProcessCommonOptions,\r\n\r\n\t/**\r\n\t\tChild's stdio configuration.\r\n\t**/\r\n\t@:optional var stdio:ChildProcessSpawnOptionsStdio;\r\n}\r\n\r\n/**\r\n\tOptions for the `spawn` method.\r\n**/\r\ntypedef ChildProcessSpawnOptions = {\r\n\t> ChildProcessSpawnOptionsBase,\r\n\r\n\t/**\r\n\t\tThe child will be a process group leader.\r\n\t**/\r\n\t@:optional var detached:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for the `spawnSync` method.\r\n**/\r\ntypedef ChildProcessSpawnSyncOptions = {\r\n\t> ChildProcessSpawnOptionsBase,\r\n\t> ChildProcessExecOptionsBase,\r\n\r\n\t@:optional var input:EitherType<String, Buffer>;\r\n}\r\n\r\n/**\r\n\tThe `stdio` option is an array where each index corresponds to a fd in the child.\r\n\tThe value is one of the following:\r\n\r\n\t\t* 'pipe' - Create a pipe between the child process and the parent process.\r\n\t\t\t\t   The parent end of the pipe is exposed to the parent as a property on the child_process object as ChildProcess.stdio[fd].\r\n\t\t\t\t   Pipes created for fds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout and ChildProcess.stderr, respectively.\r\n\r\n\t\t* 'ipc' - Create an IPC channel for passing messages/file descriptors between parent and child.\r\n\t\t\t\t  A ChildProcess may have at most one IPC stdio file descriptor. Setting this option enables the ChildProcess.send() method.\r\n\t\t\t\t  If the child writes JSON messages to this file descriptor, then this will trigger ChildProcess.on('message').\r\n\t\t\t\t  If the child is a Node.js program, then the presence of an IPC channel will enable process.send() and process.on('message').\r\n\r\n\t\t* 'ignore' - Do not set this file descriptor in the child. Note that Node will always open fd 0 - 2 for the processes it spawns.\r\n\t\t\t\t\t When any of these is ignored node will open /dev/null and attach it to the child's fd.\r\n\r\n\t\t* Stream object - Share a readable or writable stream that refers to a tty, file, socket, or a pipe with the child process.\r\n\t\t\t\t\t\t  The stream's underlying file descriptor is duplicated in the child process to the fd that corresponds to the index\r\n\t\t\t\t\t\t  in the stdio array. Note that the stream must have an underlying descriptor (file streams do not until the 'open'\r\n\t\t\t\t\t\t  event has occurred).\r\n\r\n\t\t* Positive integer - The integer value is interpreted as a file descriptor that is is currently open in the parent process.\r\n\t\t\t\t\t\t\t It is shared with the child process, similar to how Stream objects can be shared.\r\n\r\n\t\t* null - Use default value. For stdio fds 0, 1 and 2 (in other words, stdin, stdout, and stderr) a pipe is created.\r\n\t\t\t\t For fd 3 and up, the default is 'ignore'.\r\n\r\n\t As a shorthand, the stdio argument may also be one of the following strings, rather than an array:\r\n\t\tignore - ['ignore', 'ignore', 'ignore']\r\n\t\tpipe - ['pipe', 'pipe', 'pipe']\r\n\t\tinherit - [process.stdin, process.stdout, process.stderr] or [0,1,2]\r\n**/\r\ntypedef ChildProcessSpawnOptionsStdio = EitherType<ChildProcessSpawnOptionsStdioSimple, ChildProcessSpawnOptionsStdioFull>;\r\n\r\n/**\r\n\tA shorthand for the `stdio` argument in `ChildProcessSpawnOptions`\r\n**/\r\n@:enum abstract ChildProcessSpawnOptionsStdioSimple(String) from String to String {\r\n\t/**\r\n\t\tEquivalent to ['ignore', 'ignore', 'ignore']\r\n\t**/\r\n\tvar Ignore = \"ignore\";\r\n\r\n\t/**\r\n\t\tEquivalent to ['pipe', 'pipe', 'pipe']\r\n\t**/\r\n\tvar Pipe = \"pipe\";\r\n\r\n\t/**\r\n\t\tEquivalent to [process.stdin, process.stdout, process.stderr] or [0,1,2]\r\n\t**/\r\n\tvar Inherit = \"inherit\";\r\n}\r\n\r\n/**\r\n\tEnumeration of possible `stdio` behaviours.\r\n**/\r\n@:enum abstract ChildProcessSpawnOptionsStdioBehaviour(String) from String to String {\r\n\t/**\r\n\t\tCreate a pipe between the child process and the parent process.\r\n\t\tThe parent end of the pipe is exposed to the parent as a property on the child_process object as ChildProcess.stdio[fd].\r\n\t\tPipes created for fds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout and ChildProcess.stderr, respectively.\r\n\t**/\r\n\tvar Pipe = \"pipe\";\r\n\r\n\t/**\r\n\t\tCreate an IPC channel for passing messages/file descriptors between parent and child.\r\n\t\tA ChildProcess may have at most one IPC stdio file descriptor.\r\n\r\n\t\tSetting this option enables the ChildProcess.send() method.\r\n\r\n\t\tIf the child writes JSON messages to this file descriptor, then this will trigger\r\n\t\tChildProcess.on('message').\r\n\r\n\t\tIf the child is a Node.js program, then the presence of an IPC channel will\r\n\t\tenable process.send() and process.on('message').\r\n\t**/\r\n\tvar Ipc = \"ipc\";\r\n\r\n\t/**\r\n\t\tDo not set this file descriptor in the child.\r\n\t\tNote that Node will always open fd 0 - 2 for the processes it spawns.\r\n\t\tWhen any of these is ignored node will open /dev/null and attach it to the child's fd.\r\n\t**/\r\n\tvar Ignore = \"ignore\";\r\n}\r\n\r\n// see https://github.com/HaxeFoundation/haxe/issues/3499\r\n// typedef ChildProcessSpawnOptionsStdioFull = Array<EitherType<ChildProcessSpawnOptionsStdioBehaviour,EitherType<IStream,Int>>>;\r\ntypedef ChildProcessSpawnOptionsStdioFull = Array<Dynamic>;\r\n\r\n/**\r\n\tCommon options for `exec` and `execFile` methods.\r\n**/\r\nprivate typedef ChildProcessExecOptionsBase = {\r\n\t> ChildProcessCommonOptions,\r\n\r\n\t/**\r\n\t\tDefault: 'utf8'\r\n\t**/\r\n\t@:optional var encoding:String;\r\n\r\n\t/**\r\n\t\tIf greater than 0, then it will kill the child process if it runs longer than timeout milliseconds.\r\n\t**/\r\n\t@:optional var timeout:Int;\r\n\r\n\t/**\r\n\t\tThe child process is killed with `killSignal` (default: 'SIGTERM').\r\n\t**/\r\n\t@:optional var killSignal:String;\r\n\r\n\t/**\r\n\t\tThe largest amount of data allowed on stdout or stderr.\r\n\t\tIf this value is exceeded then the child process is killed.\r\n\t\tDefault: 200*1024\r\n\t**/\r\n\t@:optional var maxBuffer:Int;\r\n}\r\n\r\n/**\r\n\tOptions for the `exec` method.\r\n**/\r\ntypedef ChildProcessExecOptions = {\r\n\t> ChildProcessExecOptionsBase,\r\n}\r\n\r\n/**\r\n\tOptions for the `execFile` method.\r\n**/\r\ntypedef ChildProcessExecFileOptions = {\r\n\t> ChildProcessExecOptionsBase,\r\n}\r\n\r\n/**\r\n\tOptions for the `fork` method.\r\n**/\r\ntypedef ChildProcessForkOptions = {\r\n\t> ChildProcessCommonOptions,\r\n\r\n\t/**\r\n\t\tExecutable used to create the child process\r\n\t**/\r\n\t@:optional var execPath:String;\r\n\r\n\t/**\r\n\t\tList of string arguments passed to the executable (Default: process.execArgv)\r\n\t**/\r\n\t@:optional var execArgv:Array<String>;\r\n\r\n\t/**\r\n\t\tIf `true`, stdin, stdout, and stderr of the child will be piped to the parent,\r\n\t\totherwise they will be inherited from the parent, see the \"pipe\" and \"inherit\"\r\n\t\toptions for `ChildProcessSpawnOptions.stdio` for more details (default is `false`)\r\n\t**/\r\n\t@:optional var silent:Bool;\r\n}\r\n\r\n/**\r\n\tAn error passed to the `ChildProcess.exec` callback.\r\n**/\r\n@:native(\"Error\")\r\nextern class ChildProcessExecError extends Error {\r\n\t/**\r\n\t\tthe exit code of the child proces.\r\n\t**/\r\n\tvar code(default, null):Int;\r\n\r\n\t/**\r\n\t\tthe signal that terminated the process.\r\n\t**/\r\n\tvar signal(default, null):String;\r\n}\r\n\r\n/**\r\n\tA callback type for `ChildProcess.exec`.\r\n\tIt receives three arguments: `error`, `stdout`, `stderr`.\r\n\r\n\tOn success, error will be `null`. On error, `error` will be an instance of `Error`\r\n\tand `error.code` will be the exit code of the child process, and `error.signal` will be set\r\n\tto the signal that terminated the process (see `ChildProcessExecError`).\r\n**/\r\ntypedef ChildProcessExecCallback = #if (haxe_ver >= 4) (error : Null<ChildProcessExecError>, stdout : EitherType<Buffer, String>, stderr : EitherType<Buffer,\r\n\tString>) -> Void; #else Null<ChildProcessExecError>->EitherType<Buffer, String>->EitherType<Buffer, String>->Void; #end\r\n\r\n/**\r\n\tObject returned from the `spawnSync` method.\r\n**/\r\ntypedef ChildProcessSpawnSyncResult = {\r\n\t/**\r\n\t\tPid of the child process\r\n\t**/\r\n\tvar pid:Int;\r\n\r\n\t/**\r\n\t\tArray of results from stdio output\r\n\t**/\r\n\tvar output:Array<EitherType<Buffer, String>>;\r\n\r\n\t/**\r\n\t\tThe contents of output[1]\r\n\t**/\r\n\tvar stdout:EitherType<Buffer, String>;\r\n\r\n\t/**\r\n\t\tThe contents of output[2]\r\n\t**/\r\n\tvar stderr:EitherType<Buffer, String>;\r\n\r\n\t/**\r\n\t\tThe exit code of the child process\r\n\t**/\r\n\tvar status:Int;\r\n\r\n\t/**\r\n\t\tThe signal used to kill the child process\r\n\t**/\r\n\tvar signal:String;\r\n\r\n\t/**\r\n\t\tThe error object if the child process failed or timed out\r\n\t**/\r\n\tvar error:Error;\r\n}\r\n\r\n@:jsRequire(\"child_process\")\r\nextern class ChildProcess {\r\n\t/**\r\n\t\tLaunches a new process with the given `command`, with command line arguments in `args`.\r\n\t\tIf omitted, `args` defaults to an empty `Array`.\r\n\r\n\t\tThe third argument is used to specify additional options, which defaults to:\r\n\t\t\t{ cwd: null,\r\n\t\t\t  env: process.env\r\n\t\t\t}\r\n\r\n\t\tNote that if spawn receives an empty options object, it will result in spawning the process with an empty\r\n\t\tenvironment rather than using `process.env`. This due to backwards compatibility issues with a deprecated API.\r\n\t**/\r\n\t@:overload(function(command:String, ?options:ChildProcessSpawnOptions):ChildProcessObject {})\r\n\t@:overload(function(command:String, args:Array<String>, ?options:ChildProcessSpawnOptions):ChildProcessObject {})\r\n\tstatic function spawn(command:String, ?args:Array<String>):ChildProcessObject;\r\n\r\n\t/**\r\n\t\tRuns a command in a shell and buffers the output.\r\n\r\n\t\t`command` is the command to run, with space-separated arguments.\r\n\r\n\t\tThe default `options` are:\r\n\t\t\t{ encoding: 'utf8',\r\n\t\t\t  timeout: 0,\r\n\t\t\t  maxBuffer: 200*1024,\r\n\t\t\t  killSignal: 'SIGTERM',\r\n\t\t\t  cwd: null,\r\n\t\t\t  env: null }\r\n\t**/\r\n\t@:overload(function(command:String, options:ChildProcessExecOptions, callback:ChildProcessExecCallback):ChildProcessObject {})\r\n\tstatic function exec(command:String, callback:ChildProcessExecCallback):ChildProcessObject;\r\n\r\n\t/**\r\n\t\tThis is similar to `exec` except it does not execute a subshell but rather the specified file directly.\r\n\t\tThis makes it slightly leaner than `exec`\r\n\t**/\r\n\t@:overload(function(file:String, args:Array<String>, options:ChildProcessExecFileOptions, ?callback:ChildProcessExecCallback):ChildProcessObject {})\r\n\t@:overload(function(file:String, options:ChildProcessExecFileOptions, ?callback:ChildProcessExecCallback):ChildProcessObject {})\r\n\t@:overload(function(file:String, args:Array<String>, ?callback:ChildProcessExecCallback):ChildProcessObject {})\r\n\tstatic function execFile(file:String, ?callback:ChildProcessExecCallback):ChildProcessObject;\r\n\r\n\t/**\r\n\t\tThis is a special case of the `spawn` functionality for spawning Node processes.\r\n\t\tIn addition to having all the methods in a normal `ChildProcess` instance,\r\n\t\tthe returned object has a communication channel built-in.\r\n\t\tSee `send` for details.\r\n\t**/\r\n\t@:overload(function(modulePath:String, args:Array<String>, options:ChildProcessForkOptions):ChildProcessObject {})\r\n\t@:overload(function(modulePath:String, options:ChildProcessForkOptions):ChildProcessObject {})\r\n\tstatic function fork(modulePath:String, ?args:Array<String>):ChildProcessObject;\r\n\r\n\t/**\r\n\t\tSynchronous version of `spawn`.\r\n\r\n\t\t`spawnSync` will not return until the child process has fully closed.\r\n\t\tWhen a timeout has been encountered and `killSignal` is sent, the method won't return until the process\r\n\t\thas completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,\r\n\t\tyour process will wait until the child process has exited.\r\n\t**/\r\n\t@:overload(function(command:String, args:Array<String>, ?options:ChildProcessSpawnSyncOptions):ChildProcessSpawnSyncResult {})\r\n\tstatic function spawnSync(command:String, ?options:ChildProcessSpawnSyncOptions):ChildProcessSpawnSyncResult;\r\n\r\n\t/**\r\n\t\tSynchronous version of `execFile`.\r\n\r\n\t\t`execFileSync` will not return until the child process has fully closed.\r\n\t\tWhen a timeout has been encountered and `killSignal` is sent, the method won't return until the process\r\n\t\thas completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,\r\n\t\tyour process will wait until the child process has exited.\r\n\r\n\t\tIf the process times out, or has a non-zero exit code, this method will throw.\r\n\t\tThe Error object will contain the entire result from `spawnSync`\r\n\t**/\r\n\t@:overload(function(command:String, ?options:ChildProcessSpawnSyncOptions):EitherType<String, Buffer> {})\r\n\t@:overload(function(command:String, args:Array<String>, ?options:ChildProcessSpawnSyncOptions):EitherType<String, Buffer> {})\r\n\tstatic function execFileSync(command:String, ?args:Array<String>):EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tSynchronous version of `exec`.\r\n\r\n\t\t`execSync` will not return until the child process has fully closed.\r\n\t\tWhen a timeout has been encountered and `killSignal` is sent, the method won't return until the process\r\n\t\thas completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,\r\n\t\tyour process will wait until the child process has exited.\r\n\r\n\t\tIf the process times out, or has a non-zero exit code, this method will throw.\r\n\t\tThe Error object will contain the entire result from `spawnSync`\r\n\t**/\r\n\tstatic function execSync(command:String, ?options:ChildProcessSpawnSyncOptions):EitherType<String, Buffer>;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.extern;\n\n/**\n\tAn abstract type allowing values to be either of `T1` or `T2` type.\n\tSupports implicit casts from/to either types.\n\n\tIt is useful for interfacing with external code on dynamic platforms\n\tsuch as JavaScript or Python.\n\n\tOtherwise, use of this type is discouraged.\n\n\t@see <https://haxe.org/manual/lf-externs.html>\n**/\nabstract EitherType<T1, T2>(Dynamic) from T1 to T1 from T2 to T2 {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2018 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n@:native(\"Error\")\nextern class Error {\n\tvar message:String;\n\tvar name:String;\n\tvar stack(default, null):String;\n\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"EvalError\")\nextern class EvalError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"RangeError\")\nextern class RangeError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"ReferenceError\")\nextern class ReferenceError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"SyntaxError\")\nextern class SyntaxError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"TypeError\")\nextern class TypeError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"URIError\")\nextern class URIError extends Error {\n\tfunction new(?message:String):Void;\n}\n"]}