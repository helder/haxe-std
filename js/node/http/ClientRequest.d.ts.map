{"sourceRoot":"","names":[],"mappings":";AAsNA,oCAMC,yBCvMgB,SDkMhB,aClMgB,QDmMhB,kBE5JmC,QF6JnC,kBE7JmC,QFiKnC,YGpMM,AFJU,UDqMhB,YE9JmC,QF+JnC,eCtMgB","version":3,"file":"ClientRequest.d.ts.map","sources":["../../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/http/ClientRequest.hx","../../../../../../../../haxe/versions/4.1.1/std/js/_std/String.hx","../../../../../../../../haxe/versions/4.1.1/std/StdTypes.hx","../../../../../../../../haxe/versions/4.1.1/std/js/_std/Array.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.http;\r\n\r\nimport haxe.DynamicAccess;\r\nimport js.node.Buffer;\r\nimport js.node.events.EventEmitter.Event;\r\nimport js.node.net.Socket;\r\nimport js.node.stream.Writable;\r\n\r\n/**\r\n\tEnumeration of events emitted by `ClientRequest`\r\n**/\r\n@:enum abstract ClientRequestEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted when the request has been aborted by the client.\r\n\t\tThis event is only emitted on the first call to `abort()`.\r\n\t**/\r\n\tvar Abort:ClientRequestEvent<Void->Void> = \"abort\";\r\n\r\n\t/**\r\n\t\tEmitted each time a server responds to a request with a `CONNECT` method.\r\n\t\tIf this event is not being listened for, clients receiving a `CONNECT` method will have their connections closed.\r\n\t**/\r\n\t#if haxe4\r\n\tvar Connect:ClientRequestEvent<(response:IncomingMessage, socket:Socket, head:Buffer) -> Void> = \"connect\";\r\n\t#else\r\n\tvar Connect:ClientRequestEvent<IncomingMessage->Socket->Buffer->Void> = \"connect\";\r\n\t#end\r\n\r\n\t/**\r\n\t\tEmitted when the server sends a '100 Continue' HTTP response,\r\n\t\tusually because the request contained 'Expect: 100-continue'.\r\n\t\tThis is an instruction that the client should send the request body.\r\n\t**/\r\n\tvar Continue:ClientRequestEvent<Void->Void> = \"continue\";\r\n\r\n\t/**\r\n\t\tEmitted when the server sends a 1xx intermediate response (excluding 101 Upgrade).\r\n\t\tThe listeners of this event will receive an object containing the HTTP version, status code, status message,\r\n\t\tkey-value headers object, and array with the raw header names followed by their respective values.\r\n\t**/\r\n\tvar Information:ClientRequestEvent<InformationEventData->Void> = \"information\";\r\n\r\n\t/**\r\n\t\tEmitted when a response is received to this request. This event is emitted only once.\r\n\t**/\r\n\tvar Response:ClientRequestEvent<IncomingMessage->Void> = \"response\";\r\n\r\n\t/**\r\n\t\tEmitted after a socket is assigned to this request.\r\n\t**/\r\n\tvar Socket:ClientRequestEvent<Socket->Void> = \"socket\";\r\n\r\n\t/**\r\n\t\tEmitted when the underlying socket times out from inactivity.\r\n\t\tThis only notifies that the socket has been idle. The request must be aborted manually.\r\n\r\n\t\tSee also: [request.setTimeout()](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\r\n\t**/\r\n\tvar Timeout:ClientRequestEvent<Socket->Void> = \"timeout\";\r\n\r\n\t/**\r\n\t\tEmitted each time a server responds to a request with an upgrade.\r\n\t\tIf this event is not being listened for and the response status code is 101 Switching Protocols,\r\n\t\tclients receiving an upgrade header will have their connections closed.\r\n\t**/\r\n\t#if haxe4\r\n\tvar Upgrade:ClientRequestEvent<(response:IncomingMessage, socket:Socket, head:Buffer) -> Void> = \"upgrade\";\r\n\t#else\r\n\tvar Upgrade:ClientRequestEvent<IncomingMessage->Socket->Buffer->Void> = \"upgrade\";\r\n\t#end\r\n}\r\n\r\n/**\r\n\tThis object is created internally and returned from http.request().\r\n\tIt represents an in-progress request whose header has already been queued.\r\n\tThe header is still mutable using the `setHeader(name, value)`, `getHeader(name)`, `removeHeader(name)` API.\r\n\tThe actual header will be sent along with the first data chunk or when calling `request.end()`.\r\n\r\n\tTo get the response, add a listener for `'response'` to the request object.\r\n\t`'response'` will be emitted from the request object when the response headers have been received.\r\n\tThe `'response'` event is executed with one argument which is an instance of `http.IncomingMessage`.\r\n\r\n\tDuring the `'response'` event, one can add listeners to the response object; particularly to listen for the `'data'` event.\r\n\r\n\tIf no `'response'` handler is added, then the response will be entirely discarded. However,\r\n\tif a `'response'` event handler is added, then the data from the response object *must* be consumed,\r\n\teither by calling `response.read()` whenever there is a `'readable'` event, or by adding a `'data'` handler,\r\n\tor by calling the `.resume()` method. Until the data is consumed, the `'end'` event will not fire.\r\n\tAlso, until the data is read it will consume memory that can eventually lead to a 'process out of memory' error.\r\n\r\n\tUnlike the `request` object, if the response closes prematurely, the response object does not emit an `'error'` event\r\n\tbut instead emits the `'aborted'` event.\r\n\r\n\tNode.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.\r\n**/\r\n@:jsRequire(\"http\", \"ClientRequest\")\r\nextern class ClientRequest extends Writable<ClientRequest> {\r\n\t/**\r\n\t\tMarks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.\r\n\t**/\r\n\tfunction abort():Void;\r\n\r\n\t/**\r\n\t\tThe request.aborted property will be true if the request has been aborted.\r\n\t**/\r\n\tvar aborted(default, null):Bool;\r\n\r\n\t/**\r\n\t\tSee `request.socket`.\r\n\t**/\r\n\tvar connection(default, null):Socket;\r\n\r\n\t/**\r\n\t\tThe `response.finished` property will be true if `response.end()` has been called.\r\n\t**/\r\n\tvar finished(default, null):Bool;\r\n\r\n\t/**\r\n\t\tFlush the request headers.\r\n\r\n\t\tFor efficiency reasons, node.js normally buffers the request headers until you call `request.end()`\r\n\t\tor write the first chunk of request data. It then tries hard to pack the request headers and data\r\n\t\tinto a single TCP packet.\r\n\r\n\t\tThat's usually what you want (it saves a TCP round-trip) but not when the first data isn't sent\r\n\t\tuntil possibly much later. `flushHeaders` lets you bypass the optimization and kickstart the request.\r\n\t**/\r\n\tfunction flushHeaders():Void;\r\n\r\n\t/**\r\n\t\tReads out a header on the request. The name is case-insensitive.\r\n\t\tThe type of the return value depends on the arguments provided to `request.setHeader()`.\r\n\t**/\r\n\tfunction getHeader(name:String):haxe.extern.EitherType<String, Array<String>>;\r\n\r\n\t/**\r\n\t\tLimits maximum response headers count. If set to 0, no limit will be applied.\r\n\r\n\t\tDefault: `2000`\r\n\t**/\r\n\tvar maxHeadersCount:Null<Int>;\r\n\r\n\t/**\r\n\t\tThe request path.\r\n\t**/\r\n\tvar path(default, null):String;\r\n\r\n\t/**\r\n\t\tRemoves a header that's already defined into headers object.\r\n\t**/\r\n\tfunction removeHeader(name:String):Void;\r\n\r\n\t/**\r\n\t\tSets a single header value for headers object.\r\n\t\tIf this header already exists in the to-be-sent headers, its value will be replaced.\r\n\t\tUse an array of strings here to send multiple headers with the same name.\r\n\t\tNon-string values will be stored without modification. Therefore, `request.getHeader()` may return non-string values.\r\n\t\tHowever, the non-string values will be converted to strings for network transmission.\r\n\t**/\r\n\t@:overload(function(name:String, value:Array<String>):Void {})\r\n\tfunction setHeader(name:String, value:String):Void;\r\n\r\n\t/**\r\n\t\tOnce a socket is assigned to this request and is connected\r\n\t\t`socket.setNoDelay` will be called.\r\n\t**/\r\n\tfunction setNoDelay(?noDelay:Bool):Void;\r\n\r\n\t/**\r\n\t\tOnce a socket is assigned to this request and is connected\r\n\t\t`socket.setKeepAlive`() will be called.\r\n\t**/\r\n\t@:overload(function(?initialDelay:Int):Void {})\r\n\tfunction setSocketKeepAlive(enable:Bool, ?initialDelay:Int):Void;\r\n\r\n\t/**\r\n\t\tOnce a socket is assigned to this request and is connected `socket.setTimeout()` will be called.\r\n\t**/\r\n\tfunction setTimeout(timeout:Int, ?callback:Socket->Void):ClientRequest;\r\n\r\n\t/**\r\n\t\tReference to the underlying socket. Usually users will not want to access this property.\r\n\t\tIn particular, the socket will not emit `'readable'` events because of how the protocol parser attaches to the socket.\r\n\t\tThe `socket` may also be accessed via `request.connection`.\r\n\t */\r\n\tvar socket(default, null):Socket;\r\n\r\n\t// This field is defined in super class.\r\n\t// var writableEnded(default, null):Bool;\r\n\t// var writableFinished(default, null):Bool;\r\n}\r\n\r\ntypedef InformationEventData = {\r\n\tvar httpVersion:String;\r\n\tvar httpVersionMajor:Int;\r\n\tvar httpVersionMinor:Int;\r\n\tvar statusCode:Int;\r\n\tvar statusMessage:String;\r\n\tvar headers:DynamicAccess<String>;\r\n\tvar rawHeaders:Array<String>;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n"]}