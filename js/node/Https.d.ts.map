{"sourceRoot":"","names":[],"mappings":"QA8MO;QAxEP;QC7EO;QCdA;;ACoCP,wCCyCY,kBCtCZ,OCrD0B,KCkBd,eFmCZ,OG5DO,ACDU,QCcjB,GRQO,QKwBK,cFeZ,qBI7DiB,oBEIV,UCqFA,mBP/EI,ODgGC,iBC7CZ,OCrD0B,KMuBd,KP8BZ,OG5DO,ACDU,MCcjB,GRQO,UUEK,OPqCZ,OI7DiB,MCcjB,GRQO,QU2BK,UPYZ,OI7DiB,QGoCL,MPyBZ,OI7DiB,MCcjB,GFbO,ACDU,UGmEL,UPNZ,OI7DiB,MCcjB,GRQO,QUoCK,YPGZ,OI7DiB,QF4EL,mBFfZ,OAtBoC,QO+CxB,mBPzBZ,OAWoC,SOrDxB,MP0CZ,OI7DiB,MCcjB,GRQO,QURK,aP+CZ,OI7DiB,QGSL,MPoDZ,OI7DiB,MCcjB,GRQO,QKDK,qBFwCZ,OAWoC,SEnCxB,cFwBZ,OAWoC,SOCxB,iBPZZ,OI7DiB,QGgFL,mBPnBZ,OI7DiB,QFmFL,iBFtBZ,OAtBoC,QEoDxB,aF9BZ,OHvCO;;AC0CP,mCItCY,eFmCZ,OG5DO,ACDU,QCcjB,GRQO,QEoGK,QC7DZ,OJzBO,KStBP,GL0DoC,SDuDxB,OClEZ,OI7DiB,QG+BL,KP8BZ,OG5DO,ACDU,MCcjB,GRQO,UUEK,OPqCZ,OI7DiB,MCcjB,GRQO,QK4GK,sBFrEZ,eI7DiB,2BGiDL,UPYZ,OI7DiB,QLwIL,mBC3EZ,kBLoDA,2CW7GO,eE8TA,YRxTI,UQwTJ,UD9RK,MPyBZ,OI7DiB,MCcjB,GFbO,ACDU,ULkJL,cCrFZ,OAtBoC,QO4BxB,UPNZ,OI7DiB,MCcjB,GRQO,QUoCK,YPGZ,OI7DiB,QLwJL,SC3FZ,OAtBoC,QDsHxB,UChGZ,uBI7DiB,MCcjB,GFbO,ACDU,WGsFL,mBPzBZ,OAWoC,SD4FxB,OCvGZ,OI7DiB,QL0KL,WC7GZ,OI7DiB,QGmBL,MP0CZ,OI7DiB,MCcjB,GRQO,QEyJK,eClHZ,OI7DiB,QLsLL,SCzHZ,OI7DiB,QGcL,aP+CZ,OI7DiB,QL+LL,OClIZ,OI7DiB,QGSL,MPoDZ,OI7DiB,MCcjB,GRQO,QEgLK,OCzIZ,OAtBoC,QDsKxB,WChJZ,OI7DiB,QFqBL,qBFwCZ,OAWoC,SEXxB,cFAZ,OAWoC,SOCxB,iBPZZ,OI7DiB,QF4HL,aF/DZ,OI7DiB,QFuDL,UFMZ,OHvCO,QU0DK,mBPnBZ,OI7DiB,QLmNL,UCtJZ,OAWoC,SEyCxB,SFpDZ,OL4HO,QI+BK,aC3JZ,OI7DiB,QL8NL,UCjKZ,OAtBoC","version":3,"file":"Https.d.ts.map","sources":["../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/net/Socket.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/http/Agent.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/buffer/Buffer.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Https.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Http.hx","../../../../../../../haxe/versions/4.0.1/std/StdTypes.hx","../../../../../../../haxe/versions/4.0.1/std/Class.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/Tls.hx","../../../../../../../haxe/versions/4.0.1/std/js/_std/Array.hx","../../../../../../../haxe/versions/4.0.1/std/js/_std/String.hx","../../../../../../../haxe/versions/4.0.1/std/haxe/extern/EitherType.hx","../../../../../../../haxe/versions/4.0.1/std/js/lib/Error.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/tls/SecureContext.hx","../../../../../../../haxe/haxe_libraries/hxnodejs/12.1.0/haxelib/src/js/node/stream/Duplex.hx"],"sourcesContent":["/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.net;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.Dns;\r\nimport js.node.events.EventEmitter.Event;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tEnumeration of events for `Socket` objects.\r\n**/\r\n@:enum abstract SocketEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t/**\r\n\t\tEmitted after resolving the hostname but before connecting.\r\n\t\tNot applicable to UNIX sockets.\r\n\t**/\r\n\tvar Lookup:SocketEvent<Null<Error>->String->DnsAddressFamily->Void> = \"lookup\";\r\n\r\n\t/**\r\n\t\tEmitted when a socket connection is successfully established. See `Socket.connect`.\r\n\t**/\r\n\tvar Connect:SocketEvent<Void->Void> = \"connect\";\r\n\r\n\t/**\r\n\t\tEmitted when data is received.\r\n\t\tThe argument data will be a `Buffer` or `String`.\r\n\t\tEncoding of data is set by `Socket.setEncoding`.\r\n\r\n\t\tNote that the data will be lost if there is no listener when a Socket emits a 'data' event.\r\n\t**/\r\n\tvar Data:SocketEvent<EitherType<Buffer, String>->Void> = \"data\";\r\n\r\n\t/**\r\n\t\tEmitted when the other end of the socket sends a FIN packet.\r\n\r\n\t\tBy default (allowHalfOpen == false) the socket will destroy its file descriptor once\r\n\t\tit has written out its pending write queue. However, by setting allowHalfOpen == true\r\n\t\tthe socket will not automatically `end` its side allowing the user to write arbitrary amounts of data,\r\n\t\twith the caveat that the user is required to `end` their side now.\r\n\t**/\r\n\tvar End:SocketEvent<Void->Void> = \"end\";\r\n\r\n\t/**\r\n\t\tEmitted if the socket times out from inactivity.\r\n\t\tThis is only to notify that the socket has been idle\r\n\t\tThe user must manually close the connection.\r\n\t\tSee also: `Socket.setTimeout`\r\n\t**/\r\n\tvar Timeout:SocketEvent<Void->Void> = \"timeout\";\r\n\r\n\t/**\r\n\t\tEmitted when the write buffer becomes empty. Can be used to throttle uploads.\r\n\t\tSee also: the return values of `Socket.write`\r\n\t**/\r\n\tvar Drain:SocketEvent<Void->Void> = \"drain\";\r\n\r\n\t/**\r\n\t\tEmitted when an error occurs. The 'close' event will be called directly following this event.\r\n\t**/\r\n\tvar Error:SocketEvent<Error->Void> = \"error\";\r\n\r\n\t/**\r\n\t\tEmitted once the socket is fully closed.\r\n\t\tThe argument `had_error` is a boolean which says if the socket was closed due to a transmission error.\r\n\r\n\t\tListener arguments:\r\n\t\t\thad_error - true if the socket had a transmission error\r\n\t**/\r\n\tvar Close:SocketEvent<Bool->Void> = \"close\";\r\n}\r\n\r\ntypedef SocketOptionsBase = {\r\n\t/**\r\n\t\tIf true, then the socket won't automatically send a FIN packet\r\n\t\twhen the other end of the socket sends a FIN packet.\r\n\r\n\t\tThe socket becomes non-readable, but still writable. You should call the `end` method explicitly.\r\n\t\tSee `end` event for more information.\r\n\r\n\t\tDefault: false\r\n\t**/\r\n\t@:optional var allowHalfOpen:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for creating new `Socket` object.\r\n**/\r\ntypedef SocketOptions = {\r\n\t> SocketOptionsBase,\r\n\r\n\t/**\r\n\t\tallows you to specify the existing file descriptor of socket.\r\n\t**/\r\n\t@:optional var fd:Null<Int>;\r\n\r\n\t/**\r\n\t\tallow reads on this socket (NOTE: Works only when `fd` is passed)\r\n\t**/\r\n\t@:optional var readable:Bool;\r\n\r\n\t/**\r\n\t\tallow writes on this socket (NOTE: Works only when `fd` is passed)\r\n\t**/\r\n\t@:optional var writable:Bool;\r\n}\r\n\r\n/**\r\n\tOptions for the `Socket.connect` method (TCP version).\r\n**/\r\ntypedef SocketConnectOptionsTcp = {\r\n\t/**\r\n\t\tPort the client should connect to\r\n\t**/\r\n\tvar port:Int;\r\n\r\n\t/**\r\n\t\tHost the client should connect to.\r\n\t\tDefaults to 'localhost'.\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tLocal interface to bind to for network connections.\r\n\t**/\r\n\t@:optional var localAddress:String;\r\n\r\n\t/**\r\n\t\tLocal port to bind to for network connections.\r\n\t**/\r\n\t@:optional var localPort:Int;\r\n\r\n\t/**\r\n\t\tVersion of IP stack. Defaults to 4.\r\n\t**/\r\n\t@:optional var family:DnsAddressFamily;\r\n\r\n\t/**\r\n\t\tCustom lookup function. Defaults to `Dns.lookup`.\r\n\t**/\r\n\t@:optional var lookup:String->DnsLookupOptions->DnsLookupCallbackSingle->Void;\r\n}\r\n\r\n/**\r\n\tOptions for the `Socket.connect` method (Local domain socket version).\r\n**/\r\ntypedef SocketConnectOptionsUnix = {\r\n\t/**\r\n\t\tPath the client should connect to\r\n\t**/\r\n\tvar path:String;\r\n}\r\n\r\n/**\r\n\tBound address, the address family name and port of the socket as reported by the operating system.\r\n**/\r\ntypedef SocketAdress = {\r\n\t/**\r\n\t\tConnection port.\r\n\t**/\r\n\tvar port:Int;\r\n\r\n\t/**\r\n\t\tIP Family.\r\n\t**/\r\n\tvar family:SocketAdressFamily;\r\n\r\n\t/**\r\n\t\tIP Address.\r\n\t**/\r\n\tvar address:String;\r\n}\r\n\r\n/**\r\n\tEnumeration of possible socket family values.\r\n**/\r\n@:enum abstract SocketAdressFamily(String) to String {\r\n\tvar IPv4 = \"IPv4\";\r\n\tvar IPv6 = \"IPv6\";\r\n}\r\n\r\n@:jsRequire(\"net\", \"Socket\")\r\nextern class Socket extends js.node.stream.Duplex<Socket> {\r\n\t/**\r\n\t\tConstruct a new socket object.\r\n\t**/\r\n\tfunction new(?options:SocketOptions);\r\n\r\n\t/**\r\n\t\tOpens the connection for a given socket.\r\n\r\n\t\tIf `port` and `host` are given, then the socket will be opened as a TCP socket,\r\n\t\tif `host` is omitted, localhost will be assumed.\r\n\t\tIf a `path` is given, the socket will be opened as a unix socket to that path.\r\n\r\n\t\tNormally this method is not needed, as `Net.createConnection` opens the socket.\r\n\t\tUse this only if you are implementing a custom `Socket`.\r\n\r\n\t\tThis function is asynchronous. When the 'connect' event is emitted the socket is established.\r\n\t\tIf there is a problem connecting, the 'connect' event will not be emitted,\r\n\t\tthe 'error' event will be emitted with the exception\r\n\r\n\t\tThe `connectListener` parameter will be added as an listener for the 'connect' event.\r\n\t**/\r\n\t@:overload(function(path:String, ?connectListener:Void->Void):Socket {})\r\n\t@:overload(function(port:Int, ?connectListener:Void->Void):Socket {})\r\n\t@:overload(function(port:Int, host:String, ?connectListener:Void->Void):Socket {})\r\n\tfunction connect(options:EitherType<SocketConnectOptionsTcp, SocketConnectOptionsUnix>, ?connectListener:Void->Void):Socket;\r\n\r\n\t/**\r\n\t\t`Socket` has the property that `socket.write` always works. This is to help users get up and running quickly.\r\n\t\tThe computer cannot always keep up with the amount of data that is written to a socket - the network connection\r\n\t\tsimply might be too slow. Node will internally queue up the data written to a socket and send it out over the\r\n\t\twire when it is possible. (Internally it is polling on the socket's file descriptor for being writable).\r\n\r\n\t\tThe consequence of this internal buffering is that memory may grow. This property shows the number of characters\r\n\t\tcurrently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written,\r\n\t\tbut the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)\r\n\r\n\t\tUsers who experience large or growing `bufferSize` should attempt to \"throttle\" the data flows\r\n\t\tin their program with `pause` and `resume`.\r\n\t**/\r\n\tvar bufferSize:Int;\r\n\r\n\t/**\r\n\t\tA boolean value that indicates if the connection is destroyed or not.\r\n\t\tOnce a connection is destroyed no further data can be transferred using it.\r\n\r\n\t\tdefine in Stream/Readable.hx\r\n\t**/\r\n\t// var destroyed(default, null):Bool;\r\n\r\n\t#if haxe4\r\n\t/**\r\n\t\tEnsures that no more I/O activity happens on this socket.\r\n\t\tOnly necessary in case of errors (parse error or so).\r\n\r\n\t\tIf `exception` is specified, an 'error' event will be emitted and\r\n\t\tany listeners for that event will receive exception as an argument.\r\n\t**/\r\n\tfunction destroy(?exception:Error):Void;\r\n\t#end\r\n\r\n\t/**\r\n\t\tSets the socket to timeout after `timeout` milliseconds of inactivity on the socket.\r\n\t\tBy default `Socket` do not have a timeout.\r\n\r\n\t\tWhen an idle timeout is triggered the socket will receive a 'timeout' event but the connection will not be severed.\r\n\t\tThe user must manually `end` or `destroy` the socket.\r\n\r\n\t\tIf `timeout` is 0, then the existing idle timeout is disabled.\r\n\r\n\t\tThe optional `callback` parameter will be added as a one time listener for the 'timeout' event.\r\n\t**/\r\n\tfunction setTimeout(timeout:Int, ?callback:Void->Void):Void;\r\n\r\n\t/**\r\n\t\tDisables the Nagle algorithm.\r\n\t\tBy default TCP connections use the Nagle algorithm, they buffer data before sending it off.\r\n\t\tSetting true for `noDelay` will immediately fire off data each time `write` is called.\r\n\t\t`noDelay` defaults to true.\r\n\t**/\r\n\tfunction setNoDelay(?noDelay:Bool):Void;\r\n\r\n\t/**\r\n\t\tEnable/disable keep-alive functionality, and optionally set the initial delay\r\n\t\tbefore the first keepalive probe is sent on an idle socket.\r\n\r\n\t\t`enable` defaults to false.\r\n\r\n\t\tSet `initialDelay` (in milliseconds) to set the delay between the last data packet received and\r\n\t\tthe first keepalive probe.\r\n\r\n\t\tSetting 0 for `initialDelay` will leave the value unchanged from the default (or previous) setting.\r\n\t\tDefaults to 0.\r\n\t**/\r\n\t@:overload(function(?initialDelay:Int):Void {})\r\n\tfunction setKeepAlive(enable:Bool, ?initialDelay:Int):Void;\r\n\r\n\t/**\r\n\t\tReturns the bound address, the address family name and port of the socket as reported by the operating system.\r\n\t**/\r\n\tfunction address():SocketAdress;\r\n\r\n\t/**\r\n\t\tCalling `unref` on a socket will allow the program to exit if this is the only active socket in the event system.\r\n\t\tIf the socket is already `unref`d calling `unref` again will have no effect.\r\n\t**/\r\n\tfunction unref():Socket;\r\n\r\n\t/**\r\n\t\tOpposite of `unref`, calling `ref` on a previously `unref`d socket will not let the program exit\r\n\t\tif it's the only socket left (the default behavior).\r\n\t\tIf the socket is `ref`d calling `ref` again will have no effect.\r\n\t**/\r\n\tfunction ref():Socket;\r\n\r\n\t/**\r\n\t\tThe string representation of the remote IP address.\r\n\t\tFor example, '74.125.127.100' or '2001:4860:a005::68'.\r\n\t**/\r\n\tvar remoteAddress(default, null):String;\r\n\r\n\t/**\r\n\t\tThe string representation of the remote IP family.\r\n\t\t'IPv4' or 'IPv6'.\r\n\t**/\r\n\tvar remoteFamily(default, null):SocketAdressFamily;\r\n\r\n\t/**\r\n\t\tThe numeric representation of the remote port. For example, 80 or 21.\r\n\t**/\r\n\tvar remotePort(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe string representation of the local IP address the remote client is connecting on.\r\n\t\tFor example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1',\r\n\t\tthe value would be '192.168.1.1'.\r\n\t**/\r\n\tvar localAddress(default, null):String;\r\n\r\n\t/**\r\n\t\tThe numeric representation of the local port. For example, 80 or 21.\r\n\t**/\r\n\tvar localPort(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe amount of received bytes.\r\n\t**/\r\n\tvar bytesRead(default, null):Int;\r\n\r\n\t/**\r\n\t\tThe amount of bytes sent.\r\n\t**/\r\n\tvar bytesWritten(default, null):Int;\r\n\r\n\t/**\r\n\t\tAlways true for TLSSocket instances.\r\n\r\n\t\tMay be used to distinguish TLS sockets from regular ones.\r\n\t**/\r\n\tvar encrypted(default, null):Bool;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.http;\r\n\r\nimport haxe.DynamicAccess;\r\nimport js.node.net.Socket;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tAn `Agent` is responsible for managing connection persistence and reuse for HTTP clients.\r\n\tIt maintains a queue of pending requests for a given host and port, reusing a single socket connection for each until the queue is empty,\r\n\tat which time the socket is either destroyed or put into a pool where it is kept to be used again for requests to the same host and port.\r\n\tWhether it is destroyed or pooled depends on the `keepAlive` option.\r\n\r\n\tPooled connections have TCP Keep-Alive enabled for them, but servers may still close idle connections, in which case they will be removed\r\n\tfrom the pool and a new connection will be made when a new HTTP request is made for that host and port.\r\n\tServers may also refuse to allow multiple requests over the same connection, in which case the connection will have to be remade for every\r\n\trequest and cannot be pooled.\r\n\tThe `Agent` will still make the requests to that server, but each one will occur over a new connection.\r\n\r\n\tWhen a connection is closed by the client or the server, it is removed from the pool.\r\n\tAny unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests.\r\n\t(see [socket.unref()](https://nodejs.org/api/net.html#net_socket_unref)).\r\n\r\n\tIt is good practice, to `destroy()` an Agent instance when it is no longer in use, because unused sockets consume OS resources.\r\n\r\n\tSockets are removed from an agent when the socket emits either a `'close'` event or an `'agentRemove'` event.\r\n\tWhen intending to keep one HTTP request open for a long time without keeping it in the agent, something like the following may be done.\r\n\r\n\tAn agent may also be used for an individual request. By providing `{agent: false}` as an option to the `http.get()` or `http.request()` functions,\r\n\ta one-time use `Agent` with default options will be used for the client connection.\r\n**/\r\n@:jsRequire(\"http\", \"Agent\")\r\nextern class Agent {\r\n\t/**\r\n\t\t`options` in socket.connect() are also supported.\r\n\r\n\t\tThe default `http.globalAgent` that is used by `http.request()` has all of these values set to their respective defaults.\r\n\r\n\t\tTo configure any of them, a custom `http.Agent` instance must be created.\r\n\t**/\r\n\tfunction new(?options:HttpAgentOptions);\r\n\r\n\t/**\r\n\t\tProduces a socket/stream to be used for HTTP requests.\r\n\r\n\t\tBy default, this function is the same as `net.createConnection()`.\r\n\t\tHowever, custom agents may override this method in case greater flexibility is desired.\r\n\r\n\t\tA socket/stream can be supplied in one of two ways: by returning the socket/stream from this function,\r\n\t\tor by passing the socket/stream to `callback`.\r\n\r\n\t\t`callback` has a signature of `(err, stream)`.\r\n\t**/\r\n\t#if haxe4\r\n\tfunction createConnection(options:SocketConnectOptionsTcp, ?callback:(err:Error, stream:Socket) -> Void):Socket;\r\n\t#else\r\n\tfunction createConnection(options:SocketConnectOptionsTcp, ?callback:Error->Socket->Void):Socket;\r\n\t#end\r\n\r\n\t/**\r\n\t\tCalled when `socket` is detached from a request and could be persisted by the `Agent`.\r\n\r\n\t\tThis method can be overridden by a particular `Agent` subclass.\r\n\t\tIf this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.\r\n\t**/\r\n\tfunction keepSocketAlive(socket:Socket):Void;\r\n\r\n\t/**\r\n\t\tCalled when `socket` is attached to `request` after being persisted because of the keep-alive options.\r\n\r\n\t\tThis method can be overridden by a particular `Agent` subclass.\r\n\t**/\r\n\tfunction reuseSocket(socket:Socket, request:ClientRequest):Void;\r\n\r\n\t/**\r\n\t\tDestroy any sockets that are currently in use by the agent.\r\n\r\n\t\tIt is usually not necessary to do this. However, if using an agent with `keepAlive` enabled,\r\n\t\tthen it is best to explicitly shut down the agent when it will no longer be used. Otherwise,\r\n\t\tsockets may hang open for quite a long time before the server terminates them.\r\n\t**/\r\n\tfunction destroy():Void;\r\n\r\n\t/**\r\n\t\tAn object which contains arrays of sockets currently awaiting use by the agent when keepAlive is enabled.\r\n\t\tDo not modify.\r\n\t */\r\n\tvar freeSockets(default, null):DynamicAccess<Array<Socket>>;\r\n\r\n\t/**\r\n\t\tGet a unique name for a set of request options, to determine whether a connection can be reused.\r\n\t\tFor an HTTP agent, this returns `host:port:localAddress` or `host:port:localAddress:family`.\r\n\t\tFor an HTTPS agent, the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options that determine socket reusability.\r\n\t**/\r\n\tfunction getName(options:js.node.Http.HttpRequestOptions):String;\r\n\r\n\t/**\r\n\t\tBy default set to `256`.\r\n\t\tFor agents with `keepAlive` enabled, this sets the maximum number of sockets that will be left open in the free state.\r\n\t**/\r\n\tvar maxFreeSockets:Float;\r\n\r\n\t/**\r\n\t\tBy default set to `Infinity`.\r\n\t\tDetermines how many concurrent sockets the agent can have open per origin. Origin is the returned value of `getName()`.\r\n\t**/\r\n\tvar maxSockets:Float;\r\n\r\n\t/**\r\n\t\tAn object which contains queues of requests that have not yet been assigned to sockets.\r\n\t\tDo not modify.\r\n\t**/\r\n\tvar requests(default, null):DynamicAccess<Array<ClientRequest>>;\r\n\r\n\t/**\r\n\t\tAn object which contains arrays of sockets currently in use by the agent.\r\n\t\tDo not modify.\r\n\t**/\r\n\tvar sockets(default, null):DynamicAccess<Array<Socket>>;\r\n}\r\n\r\n/**\r\n\tOptions for `Agent` constructor.\r\n**/\r\ntypedef HttpAgentOptions = {\r\n\t/**\r\n\t\tKeep sockets around even when there are no outstanding requests, so they can be used for future requests\r\n\t\twithout having to reestablish a TCP connection.\r\n\t\tNot to be confused with the `keep-alive` value of the `Connection` header.\r\n\t\tThe `Connection: keep-alive` header is always sent when using an agent except when the `Connection` header\r\n\t\tis explicitly specified or when the `keepAlive` and `maxSockets` options are respectively set to `false` and `Infinity`,\r\n\t\tin which case `Connection: close` will be used.\r\n\r\n\t\tDefault: `false`\r\n\t**/\r\n\t@:optional var keepAlive:Bool;\r\n\r\n\t/**\r\n\t\tWhen using the `keepAlive` option, specifies the [initial delay](https://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay) for TCP Keep-Alive packets.\r\n\t\tIgnored when the `keepAlive` option is `false` or `undefined`.\r\n\r\n\t\tDefault: `1000`.\r\n\t**/\r\n\t@:optional var keepAliveMsecs:Int;\r\n\r\n\t/**\r\n\t\tMaximum number of sockets to allow per host. Each request will use a new socket until the maximum is reached.\r\n\r\n\t\tDefault: `Infinity`.\r\n\t**/\r\n\t@:optional var maxSockets:Int;\r\n\r\n\t/**\r\n\t\tMaximum number of sockets to leave open in a free state. Only relevant if `keepAlive` is set to `true`.\r\n\r\n\t\tDefault: `256`.\r\n\t**/\r\n\t@:optional var maxFreeSockets:Int;\r\n\r\n\t/**\r\n\t\tSocket timeout in milliseconds. This will set the timeout when the socket is created.\r\n\t**/\r\n\t@:optional var timeout:Int;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.buffer;\r\n\r\nimport haxe.io.Bytes;\r\nimport haxe.io.UInt8Array;\r\n#if haxe4\r\nimport js.lib.ArrayBuffer;\r\nimport js.lib.ArrayBufferView;\r\nimport js.lib.Object;\r\nimport js.lib.Uint8Array;\r\n#else\r\nimport js.html.ArrayBuffer;\r\nimport js.html.ArrayBufferView;\r\nimport js.html.Uint8Array;\r\n#end\r\n\r\n/**\r\n\tThe `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.\r\n\r\n\t@see https://nodejs.org/api/buffer.html#buffer_class_buffer\r\n**/\r\n@:jsRequire(\"buffer\", \"Buffer\")\r\nextern class Buffer extends Uint8Array {\r\n\t/**\r\n\t\tAllocates a new buffer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding\r\n\t**/\r\n\t@:deprecated\r\n\t@:overload(function(array:Array<Int>):Void {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Void {})\r\n\t@:overload(function(buffer:UInt8Array):Void {})\r\n\t@:overload(function(size:Int):Void {})\r\n\tfunction new(string:String, ?encoding:String):Void;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\r\n\t**/\r\n\t@:overload(function(size:Int, fill:String, ?encoding:String):Buffer {})\r\n\t@:overload(function(size:Int, fill:Uint8Array):Buffer {})\r\n\t@:overload(function(size:Int, fill:Int):Buffer {})\r\n\tstatic function alloc(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\r\n\t**/\r\n\tstatic function allocUnsafe(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer` of `size` bytes. If `size` is larger than\r\n\t\t`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`\r\n\t\tis thrown. A zero-length `Buffer` is created if `size` is 0.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size\r\n\t**/\r\n\tstatic function allocUnsafeSlow(size:Int):Buffer;\r\n\r\n\t/**\r\n\t\tReturns the actual byte length of a string. This is not the same as\r\n\t\t`String.prototype.length` since that returns the number of characters in\r\n\t\ta string.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding\r\n\t**/\r\n\t#if (haxe_ver >= 3.3)\r\n\t// it need extern SharedArrayBuffer for Node\r\n\t// @:overload(function(string:SharedArrayBuffer):Int {})\r\n\t@:overload(function(string:String, ?encoding:String):Int {})\r\n\t@:overload(function(string:ArrayBufferView):Int {})\r\n\t@:overload(function(string:ArrayBuffer):Int {})\r\n\tstatic function byteLength(string:Buffer):Int;\r\n\t#end\r\n\r\n\t#if (haxe_ver >= 3.3)\r\n\t@:deprecated(\"In haxe 3.3+, use Buffer.byteLength instead!\")\r\n\t#end\r\n\tinline static function _byteLength(string:String, ?encoding:String):Int\r\n\t\treturn untyped Buffer['byteLength'](string, encoding);\r\n\r\n\t/**\r\n\t\tCompares `buf1` to `buf2` typically for the purpose of sorting arrays of\r\n\t\t`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2\r\n\t**/\r\n\t@:native(\"compare\")\r\n\tstatic function compareBuffers(buf1:Uint8Array, buf2:Uint8Array):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength\r\n\t**/\r\n\tstatic function concat<T:Uint8Array>(list:Array<T>, ?totalLength:Int):Buffer;\r\n\r\n\t/**\r\n\t\tAllocates a new `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding\r\n\t**/\r\n\t// it need extern SharedArrayBuffer for node\r\n\t// @:overload(function(arrayBuffer:SharedArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(array:Array<Int>):Buffer {})\r\n\t@:overload(function(arrayBuffer:ArrayBuffer, ?byteOffset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(buffer:Uint8Array):Buffer {})\r\n\t@:overload(function(object:{}, ?offset:Int, ?length:Int):Buffer {})\r\n\t@:overload(function(object:{}, ?encoding:String, ?length:Int):Buffer {})\r\n\tstatic function from(string:String, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tReturns `true` if `obj` is a `Buffer`, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj\r\n\t**/\r\n\tstatic function isBuffer(obj:Dynamic):Bool;\r\n\r\n\t/**\r\n\t\tReturns `true` if `encoding` contains a supported character encoding, or `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding\r\n\t**/\r\n\tstatic function isEncoding(encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tThis is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize\r\n\t**/\r\n\tstatic var poolSize:Int;\r\n\r\n\t// buf[index]\r\n\t// var buffer:ArrayBuffer;\r\n\r\n\t/**\r\n\t\tWhen setting `byteOffset` in `Buffer.from(ArrayBuffer, byteOffset, length)`\r\n\t\tor sometimes when allocating a buffer smaller than `Buffer.poolSize` the\r\n\t\tbuffer doesn't start from a zero offset on the underlying `ArrayBuffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_byteoffset\r\n\t**/\r\n\tstatic var byteOffset(default, null):Int;\r\n\r\n\t/**\r\n\t\tCompares `buf` with `target` and returns a number indicating whether `buf` comes before, after,\r\n\t\tor is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Int {})\r\n\tfunction compare(target:Uint8Array, ?targetStart:Int, ?targetEnd:Int, ?sourceStart:Int, ?sourceEnd:Int):Int;\r\n\r\n\t/**\r\n\t\tCopies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend\r\n\t**/\r\n\t@:overload(function(target:Uint8Array):Void {})\r\n\tfunction copy(target:Uint8Array, ?targetStart:Int, ?sourceStart:Int, ?sourceEnd:Int):Void;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `[index, byte]` pairs from the contents of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_entries\r\n\t**/\r\n\tfunction entries():js.node.Iterator<js.node.KeyValue<Int, Int>>;\r\n\r\n\t/**\r\n\t\tReturns `true` if both `buf` and `otherBuffer` have exactly the same bytes, `false` otherwise.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer\r\n\t**/\r\n\tfunction equals(otherBuffer:Uint8Array):Bool;\r\n\r\n\t/**\r\n\t\tFills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?offset:Int, ?end:Int):Buffer {})\r\n\t@:overload(function(value:Int, ?offset:Int, ?end:Int):Buffer {})\r\n\tfunction fill(value:String, ?offset:Int, ?end:Int, ?encoding:String):Buffer;\r\n\r\n\t/**\r\n\t\tEquivalent to `buf.indexOf() !== -1`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Bool {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Bool {})\r\n\tfunction includes(value:String, ?byteOffset:Int, ?encoding:String):Bool;\r\n\r\n\t/**\r\n\t\tIf `value` is:\r\n\r\n\t\t- a string, `value` is interpreted according to the character encoding in `encoding`.\r\n\t\t- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().\r\n\t\t- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction indexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator of `buf` keys (indices).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_keys\r\n\t**/\r\n\tfunction keys():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tIdentical to `buf.indexOf()`, except the last occurrence of `value` is found\r\n\t\trather than the first occurrence.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding\r\n\t**/\r\n\t@:overload(function(value:Uint8Array, ?byteOffset:Int):Int {})\r\n\t@:overload(function(value:Int, ?byteOffset:Int):Int {})\r\n\tfunction lastIndexOf(value:String, ?byteOffset:Int, ?encoding:String):Int;\r\n\r\n\t// var length(default, null):Int;\r\n\t// these functions need BigInt implementation.\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64be_offset\r\n\t// **/\r\n\t// function readBigInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads a signed 64-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t// \t(`readBigInt64BE()` returns big endian, `readBigInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbigint64le_offset\r\n\t// **/\r\n\t// function readBigInt64LE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64be_offset\r\n\t// **/\r\n\t// function readBigUInt64BE(?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tReads an unsigned 64-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t// \t(`readBigUInt64BE()` returns big endian, `readBigUInt64LE()` returns little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_readbiguint64le_offset\r\n\t// **/\r\n\t// function readBigUInt64LE(?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset\r\n\t**/\r\n\tfunction readDoubleBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 64-bit double from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset\r\n\t**/\r\n\tfunction readDoubleLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset\r\n\t**/\r\n\tfunction readFloatBE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a 32-bit float from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset\r\n\t**/\r\n\tfunction readFloatLE(?offset:Int):Float;\r\n\r\n\t/**\r\n\t\tReads a signed 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\thttps://nodejs.org/api/buffer.html#buffer_buf_readint8_offset\r\n\t**/\r\n\tfunction readInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset\r\n\t**/\r\n\tfunction readInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format\r\n\t\t(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset\r\n\t**/\r\n\tfunction readInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads a signed 32-bit integer from buf at the specified offset with the specified endian format\r\n\t\t(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset\r\n\t**/\r\n\tfunction readInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength\r\n\t**/\r\n\tfunction readIntBE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result\r\n\t\tas a two's complement signed value. Supports up to 48 bits of accuracy.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength\r\n\t**/\r\n\tfunction readIntLE(offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 8-bit integer from `buf` at the specified `offset`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset\r\n\t**/\r\n\tfunction readUInt8(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset\r\n\t**/\r\n\tfunction readUInt16BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset\r\n\t**/\r\n\tfunction readUInt16LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32BE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format\r\n\t\t(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset\r\n\t**/\r\n\tfunction readUInt32LE(?offset:Int):Int;\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_subarray_start_end\r\n\t**/\r\n\t#if haxe4\r\n\tfunction subarray(?start:Int, ?end:Int):Buffer;\r\n\t#else\r\n\toverride function subarray(start:Int, ?end:Int):Buffer;\r\n\t#end\r\n\r\n\t/**\r\n\t\tReturns a new `Buffer` that references the same memory as the original,\r\n\t\tbut offset and cropped by the `start` and `end` indices.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end\r\n\t**/\r\n\tfunction slice(?start:Int, ?end:Int):Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 16-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 2.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap16\r\n\t**/\r\n\tfunction swap16():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of unsigned 32-bit integers and swaps the\r\n\t\tbyte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`\r\n\t\tis not a multiple of 4.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap32\r\n\t**/\r\n\tfunction swap32():Buffer;\r\n\r\n\t/**\r\n\t\tInterprets `buf` as an array of 64-bit numbers and swaps byte order in-place.\r\n\t\tThrows `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_swap64\r\n\t**/\r\n\tfunction swap64():Buffer;\r\n\r\n\t/**\r\n\t\tReturns a JSON representation of `buf`. `JSON.stringify()` implicitly calls\r\n\t\tthis function when stringifying a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tojson\r\n\t**/\r\n\tfunction toJSON():Dynamic;\r\n\r\n\t/**\r\n\t\tDecodes `buf` to a string according to the specified character encoding in `encoding`.\r\n\t\t`start` and `end` may be passed to decode only a subset of `buf`.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end\r\n\t**/\r\n\t@:overload(function(?encoding:String, ?start:Int, ?end:Int):String {})\r\n\tfunction toString():String;\r\n\r\n\t/**\r\n\t\tCreates and returns an iterator for `buf` values (bytes). This function is called automatically\r\n\t\twhen a `Buffer` is used in a `for..of` statement.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_values\r\n\t**/\r\n\tfunction values():js.node.Iterator<Int>;\r\n\r\n\t/**\r\n\t\tWrites `string` to `buf` at `offset` according to the character encoding in `encoding`.\r\n\t\tThe `length` parameter is the number of bytes to write.\r\n\t\tIf `buf` did not contain enough space to fit the entire `string`, only part of string will be written.\r\n\t\tHowever, partially encoded characters will not be written.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding\r\n\t**/\r\n\tfunction write(string:String, ?offset:Int, ?length:Int, ?encoding:String):Int;\r\n\r\n\t// these functions need BigInt Implementation.\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64be_value_offset\r\n\t// **/\r\n\t// function writeBigInt64BE(value:Int, ?offset:Int):BigInt;\r\n\t// /**\r\n\t// \tWrites `value` to `buf` at the specified `offset` with specified endian format (`writeBigInt64BE()` writes big endian, `writeBigInt64LE()` writes little endian).\r\n\t// \t@see https://nodejs.org/api/buffer.html#buffer_buf_writebigint64le_value_offset\r\n\t// **/\r\n\t// function writeBigInt64LE(value:Int, ?offset:Int):BigInt;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset\r\n\t**/\r\n\tfunction writeDoubleBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).\r\n\t\t`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset\r\n\t**/\r\n\tfunction writeDoubleLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset\r\n\t**/\r\n\tfunction writeFloatBE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).\r\n\t\t`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset\r\n\t**/\r\n\tfunction writeFloatLE(value:Float, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid signed 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset\r\n\t**/\r\n\tfunction writeInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset\r\n\t**/\r\n\tfunction writeInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).\r\n\t\t`value` should be a valid signed 16-bit integer.\r\n\t\tBehavior is undefined when value is anything other than a signed 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset\r\n\t**/\r\n\tfunction writeInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset\r\n\t**/\r\n\tfunction writeInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).\r\n\t\t`value` should be a valid signed 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than a signed 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset\r\n\t**/\r\n\tfunction writeInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntBE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `byteLength` bytes of `value` to `buf` at the specified `offset`.\r\n\t\tSupports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength\r\n\t**/\r\n\tfunction writeIntLE(value:Int, offset:Int, byteLength:Int):Int;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset`. `value` should be a valid unsigned 8-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 8-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset\r\n\t**/\r\n\tfunction writeUInt8(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset\r\n\t**/\r\n\tfunction writeUInt16BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 16-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 16-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset\r\n\t**/\r\n\tfunction writeUInt16LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset\r\n\t**/\r\n\tfunction writeUInt32BE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tWrites `value` to `buf` at the specified `offset` with specified endian format\r\n\t\t(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).\r\n\t\t`value` should be a valid unsigned 32-bit integer.\r\n\t\tBehavior is undefined when `value` is anything other than an unsigned 32-bit integer.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset\r\n\t**/\r\n\tfunction writeUInt32LE(value:Int, ?offset:Int):Void;\r\n\r\n\t/**\r\n\t\tDefault: `50`\r\n\r\n\t\tReturns the maximum number of bytes that will be returned when `buf.inspect()` is called.\r\n\t\tThis can be overridden by user modules.\r\n\t\tSee `util.inspect()` for more details on `buf.inspect()` behavior.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes\r\n\t**/\r\n\tstatic var INSPECT_MAX_BYTES(get, set):Int;\r\n\r\n\tprivate static inline function get_INSPECT_MAX_BYTES():Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES;\r\n\t}\r\n\tprivate static inline function set_INSPECT_MAX_BYTES(bytes:Int):Int {\r\n\t\treturn BufferModule.INSPECT_MAX_BYTES = bytes;\r\n\t}\r\n\r\n\t/**\r\n\t\tAn alias for `buffer.constants.MAX_LENGTH`.\r\n\r\n\t\tThis is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength\r\n\t**/\r\n\tstatic var kMaxLength(get, never):Int;\r\n\r\n\tprivate static inline function get_kMaxLength():Int {\r\n\t\treturn BufferModule.kMaxLength;\r\n\t}\r\n\r\n\t/**\r\n\t\tRe-encodes the given `Buffer` or `Uint8Array` instance from one character encoding to another.\r\n\t\tReturns a new `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_transcode_source_fromenc_toenc\r\n\t**/\r\n\tstatic inline function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer {\r\n\t\treturn BufferModule.transcode(source, fromEnc, toEnc);\r\n\t};\r\n\r\n\t/**\r\n\t\t`buffer.constants` is a property on the `buffer` module returned by `require('buffer')`,\r\n\t\tnot on the `Buffer` global or a `Buffer` instance.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants\r\n\t**/\r\n\tstatic var constants(default, never):BufferConstants;\r\n\r\n\tprivate static inline function get_constants():BufferConstants {\r\n\t\treturn BufferModule.constants;\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.\r\n\t\tAny modifications done using the returned object will be reflected in the `this` buffer.\r\n\t**/\r\n\tinline function hxToBytes():Bytes {\r\n\t\treturn Helper.bytesOfBuffer(this);\r\n\t}\r\n\r\n\t/**\r\n\t\tCreate `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.\r\n\t\tAny modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.\r\n\t**/\r\n\tstatic inline function hxFromBytes(b:Bytes):Buffer {\r\n\t\tvar data = @:privateAccess b.b;\r\n\t\treturn Buffer.from(data.buffer, data.byteOffset, b.length);\r\n\t}\r\n}\r\n\r\n@:dce\r\nprivate class Helper {\r\n\tpublic static function bytesOfBuffer(b:Buffer):haxe.io.Bytes untyped {\r\n\t\tvar o = Object.create(haxe.io.Bytes.prototype);\r\n\t\t// the following is basically a haxe.io.Bytes constructor,\r\n\t\t// but using given buffer instead of creating new Uint8Array\r\n\t\to.length = b.byteLength;\r\n\t\to.b = b;\r\n\t\tb.bufferValue = b;\r\n\t\tb.hxBytes = o;\r\n\t\tb.bytes = b;\r\n\t\treturn o;\r\n\t}\r\n}\r\n\r\n@:jsRequire(\"buffer\")\r\nprivate extern class BufferModule {\r\n\tstatic var INSPECT_MAX_BYTES:Int;\r\n\tstatic var kMaxLength(default, never):Int;\r\n\tstatic function transcode(source:Uint8Array, fromEnc:String, toEnc:String):Buffer;\r\n\tstatic var constants(default, never):BufferConstants;\r\n}\r\n\r\ntypedef BufferConstants = {\r\n\t/**\r\n\t\tOn 32-bit architectures, this value is `(2^30)-1` (`~1GB`).\r\n\t\tOn 64-bit architectures, this value is `(2^31)-1` (`~2GB`).\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length\r\n\t**/\r\n\tvar MAX_LENGTH(default, never):Int;\r\n\r\n\t/**\r\n\t\tRepresents the largest `length` that a `string` primitive can have, counted\r\n\t\tin UTF-16 code units.\r\n\r\n\t\t@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_string_length\r\n\t**/\r\n\tvar MAX_STRING_LENGTH(default, never):Int;\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport js.node.http.ClientRequest;\r\nimport js.node.http.IncomingMessage;\r\nimport js.node.http.ServerResponse;\r\nimport js.node.https.*;\r\nimport js.node.url.URL;\r\n\r\n/**\r\n\tHTTPS is the HTTP protocol over TLS/SSL.\r\n\tIn Node.js this is implemented as a separate module.\r\n**/\r\n@:jsRequire(\"https\")\r\nextern class Https {\r\n\t/**\r\n\t\tReturns a new HTTPS web server object.\r\n\t**/\r\n\t#if haxe4\r\n\t@:overload(function(options:HttpsCreateServerOptions, ?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server {})\r\n\tstatic function createServer(?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server;\r\n\t#else\r\n\t@:overload(function(options:HttpsCreateServerOptions, ?requestListener:IncomingMessage->ServerResponse->Void):Server {})\r\n\tstatic function createServer(?requestListener:IncomingMessage->ServerResponse->Void):Server;\r\n\t#end\r\n\r\n\t/**\r\n\t\tLike `Http.get` but for HTTPS.\r\n\r\n\t\t`options` can be an object, a string, or a `URL` object.\r\n\t\tIf `options` is a string, it is automatically parsed with `new URL()`.\r\n\t\tIf it is a `URL` object, it will be automatically converted to an ordinary `options` object.\r\n\t**/\r\n\t@:overload(function(url:URL, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(url:String, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function get(options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n\r\n\t/**\r\n\t\tGlobal instance of `https.Agent` for all HTTPS client requests.\r\n\t**/\r\n\tstatic var globalAgent:Agent;\r\n\r\n\t/**\r\n\t\tMakes a request to a secure web server.\r\n\r\n\t\tThe following additional `options` from `tls.connect()` are also accepted:\r\n\t\t`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`, `honorCipherOrder`, `key`, `passphrase`, `pfx`,\r\n\t\t`rejectUnauthorized`, `secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`.\r\n\r\n\t\t`options` can be an object, a string, or a `URL` object.\r\n\t\tIf `options` is a string, it is automatically parsed with `new URL()`.\r\n\t\tIf it is a `URL` object, it will be automatically converted to an ordinary `options` object.\r\n\t**/\r\n\t@:overload(function(options:URL, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(options:String, ?options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function request(options:HttpsRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n}\r\n\r\ntypedef HttpsCreateServerOptions = {\r\n\t> js.node.Tls.TlsCreateServerOptions,\r\n\t> js.node.tls.SecureContext.SecureContextOptions,\r\n\t> js.node.Http.HttpCreateServerOptions,\r\n}\r\n\r\ntypedef HttpsRequestOptions = {\r\n\t> js.node.Http.HttpRequestOptions,\r\n\t> js.node.Tls.TlsConnectOptions,\r\n\t// TODO: clean those options up\r\n}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.DynamicAccess;\r\nimport haxe.extern.EitherType;\r\nimport js.node.http.*;\r\nimport js.node.net.Socket;\r\nimport js.node.stream.Duplex;\r\nimport js.node.url.URL;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tThe HTTP interfaces in Node are designed to support many features of the protocol\r\n\twhich have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages.\r\n\tThe interface is careful to never buffer entire requests or responses--the user is able to stream data.\r\n\r\n\tHTTP message headers are represented by an object like this:\r\n\t\t{ 'content-length': '123',\r\n\t\t  'content-type': 'text/plain',\r\n\t\t  'connection': 'keep-alive' }\r\n\tKeys are lowercased. Values are not modified.\r\n\r\n\tIn order to support the full spectrum of possible HTTP applications, Node's HTTP API is very low-level.\r\n\tIt deals with stream handling and message parsing only. It parses a message into headers and body but\r\n\tit does not parse the actual headers or the body.\r\n**/\r\n@:jsRequire(\"http\")\r\nextern class Http {\r\n\t/**\r\n\t\tA list of the HTTP methods that are supported by the parser.\r\n\t**/\r\n\tstatic var METHODS:Array<String>;\r\n\r\n\t/**\r\n\t\tA collection of all the standard HTTP response status codes, and the short description of each.\r\n\t\tFor example, `http.STATUS_CODES[404] === 'Not Found'`.\r\n\t**/\r\n\tstatic var STATUS_CODES(default, null):DynamicAccess<String>;\r\n\r\n\t/**\r\n\t\tReturns a new web server object.\r\n\r\n\t\tThe `requestListener` is a function which is automatically added to the `'request'` event.\r\n\t**/\r\n\t#if haxe4\r\n\t@:overload(function(options:HttpCreateServerOptions, ?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server {})\r\n\tstatic function createServer(?requestListener:(request:IncomingMessage, response:ServerResponse) -> Void):Server;\r\n\t#else\r\n\t@:overload(function(options:HttpCreateServerOptions, ?requestListener:IncomingMessage->ServerResponse->Void):Server {})\r\n\tstatic function createServer(?requestListener:IncomingMessage->ServerResponse->Void):Server;\r\n\t#end\r\n\r\n\t/**\r\n\t\tSince most requests are GET requests without bodies, Node.js provides this convenience method.\r\n\t\tThe only difference between this method and `request()` is that it sets the method to GET and calls `end()` automatically.\r\n\t\tThe callback must take care to consume the response data for reasons stated in `http.ClientRequest` section.\r\n\t**/\r\n\t@:overload(function(url:URL, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(url:String, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function get(options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n\r\n\t/**\r\n\t\tGlobal instance of Agent which is used as the default for all http client requests.\r\n\t**/\r\n\tstatic var globalAgent:Agent;\r\n\r\n\tstatic var maxHeaderSize:Int;\r\n\r\n\t/**\r\n\t\tNode.js maintains several connections per server to make HTTP requests.\r\n\t\tThis function allows one to transparently issue requests.\r\n\r\n\t\t`url` can be a string or a URL object.\r\n\t\tIf `url` is a string, it is automatically parsed with `new URL()`.\r\n\t\tIf it is a `URL` object, it will be automatically converted to an ordinary `options` object.\r\n\r\n\t\tIf both `url` and `options` are specified, the objects are merged, with the `options` properties taking precedence.\r\n\r\n\t\tThe optional `callback` parameter will be added as a one-time listener for the `'response'` event.\r\n\r\n\t\t`request()` returns an instance of the `http.ClientRequest` class.\r\n\t\tThe `ClientRequest` instance is a writable stream.\r\n\t\tIf one needs to upload a file with a POST request, then write to the `ClientRequest` object.\r\n\t**/\r\n\t@:overload(function(url:URL, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\t@:overload(function(url:String, ?options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest {})\r\n\tstatic function request(options:HttpRequestOptions, ?callback:IncomingMessage->Void):ClientRequest;\r\n}\r\n\r\ntypedef HttpCreateServerOptions = {\r\n\t/**\r\n\t\tSpecifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.\r\n\r\n\t\tDefault: `js.node.http.IncomingMessage`.\r\n\t**/\r\n\t@:optional var IncomingMessage:Class<Dynamic>;\r\n\r\n\t/**\r\n\t\tSpecifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.\r\n\r\n\t\tDefault: `ServerResponse`.\r\n\t**/\r\n\t@:optional var ServerResponse:Class<Dynamic>;\r\n}\r\n\r\n/**\r\n\tType of the options object passed to `Http.request`.\r\n**/\r\ntypedef HttpRequestOptions = {\r\n\t/**\r\n\t\tControls Agent behavior.\r\n\r\n\t\tPossible values:\r\n\r\n\t\t- `undefined` (default): use http.globalAgent for this host and port.\r\n\t\t- `Agent` object: explicitly use the passed in `Agent`.\r\n\t\t- `false` : causes a new `Agent` with default values to be used.\r\n\t**/\r\n\t@:optional var agent:EitherType<Agent, Bool>;\r\n\r\n\t/**\r\n\t\tBasic authentication i.e. `'user:password'` to compute an Authorization header.\r\n\t**/\r\n\t@:optional var auth:String;\r\n\r\n\t/**\r\n\t\tA function that produces a socket/stream to use for the request when the `agent` option is not used.\r\n\t\tThis can be used to avoid creating a custom `Agent` class just to override the default `createConnection` function.\r\n\t\tSee [agent.createConnection()](https://nodejs.org/api/http.html#http_agent_createconnection_options_callback) for more details.\r\n\t\tAny `Duplex` stream is a valid return value.\r\n\t**/\r\n\t#if haxe4\r\n\t@:optional var createConnection:(options:SocketConnectOptionsTcp, ?callabck:(err:Error, stream:IDuplex) -> Void) -> IDuplex;\r\n\t#else\r\n\t@:optional var createConnection:SocketConnectOptionsTcp->?(Error->IDuplex->Void)->IDuplex;\r\n\t#end\r\n\r\n\t/**\r\n\t\tDefault port for the protocol.\r\n\r\n\t\tDefault: `agent.defaultPort` if an Agent is used, else `undefined`.\r\n\t**/\r\n\t@:optional var defaultPort:Int;\r\n\r\n\t/**\r\n\t\tIP address family to use when resolving `host` or `hostname`.\r\n\t\tValid values are `4` or `6`. When unspecified, both IP v4 and v6 will be used.\r\n\t**/\r\n\t@:optional var family:js.node.Dns.DnsAddressFamily;\r\n\r\n\t/**\r\n\t\tAn object containing request headers.\r\n\t**/\r\n\t@:optional var headers:DynamicAccess<EitherType<String, Array<String>>>;\r\n\r\n\t/**\r\n\t\tA domain name or IP address of the server to issue the request to.\r\n\r\n\t\tDefault: `'localhost'`.\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tAlias for `host`.\r\n\t\tTo support `url.parse()`, hostname will be used if both `host` and `hostname` are specified.\r\n\t**/\r\n\t@:optional var hostname:String;\r\n\r\n\t/**\r\n\t\tLocal interface to bind for network connections.\r\n\t**/\r\n\t@:optional var localAddress:String;\r\n\r\n\t/**\r\n\t\tA string specifying the HTTP request method.\r\n\r\n\t\tDefault: `'GET'`.\r\n\t**/\r\n\t@:optional var method:Method;\r\n\r\n\t/**\r\n\t\tRequest path. Should include query string if any. E.G. `'/index.html?page=12'`.\r\n\t\tAn exception is thrown when the request path contains illegal characters.\r\n\t\tCurrently, only spaces are rejected but that may change in the future.\r\n\r\n\t\tDefault: `'/'`.\r\n\t**/\r\n\t@:optional var path:String;\r\n\r\n\t/**\r\n\t\tPort of remote server.\r\n\r\n\t\tDefault: `defaultPort` if set, else `80`.\r\n\t**/\r\n\t@:optional var port:Int;\r\n\r\n\t/**\r\n\t\tProtocol to use.\r\n\r\n\t\tDefault: `'http:'`.\r\n\t**/\r\n\t@:optional var protocol:String;\r\n\r\n\t/**\r\n\t\tSpecifies whether or not to automatically add the Host header.\r\n\t\tDefaults to `true`.\r\n\t**/\r\n\t@:optional var setHost:Bool;\r\n\r\n\t/**\r\n\t\tUnix Domain Socket (cannot be used if one of host or port is specified, those specify a TCP Socket).\r\n\t**/\r\n\t@:optional var socketPath:String;\r\n\r\n\t/**\r\n\t\tA number specifying the socket timeout in milliseconds.\r\n\t\tThis will set the timeout before the socket is connected.\r\n\t**/\r\n\t@:optional var timeout:Int;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tAn abstract type that represents a Class.\n\n\tSee `Type` for the Haxe Reflection API.\n\n\t@see https://haxe.org/manual/types-class-instance.html\n**/\n@:coreType @:runtimeValue abstract Class<T> {}\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.Buffer;\r\nimport js.node.tls.SecureContext;\r\nimport js.node.tls.SecurePair;\r\nimport js.node.tls.Server;\r\nimport js.node.tls.TLSSocket;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\ntypedef TlsOptionsBase = {\r\n\t/**\r\n\t\tIf true the server will reject any connection which is not authorized with the list of supplied CAs.\r\n\t\tThis option only has an effect if `requestCert` is true.\r\n\t\tDefault: false.\r\n\t**/\r\n\t@:optional var rejectUnauthorized:Bool;\r\n\r\n\t/**\r\n\t\tpossible NPN protocols. (Protocols should be ordered by their priority).\r\n\t**/\r\n\t@:optional var NPNProtocols:EitherType<Array<String>, Buffer>;\r\n}\r\n\r\ntypedef TlsServerOptionsBase = {\r\n\t> TlsOptionsBase,\r\n\r\n\t/**\r\n\t\tIf true the server will request a certificate from clients that connect\r\n\t\tand attempt to verify that certificate.\r\n\t\tDefault: false.\r\n\t**/\r\n\t@:optional var requestCert:Bool;\r\n\r\n\t/**\r\n\t\tA function that will be called if client supports SNI TLS extension.\r\n\t\tTwo argument will be passed to it: `servername`, and `cb`.\r\n\t\tSNICallback should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance.\r\n\t\t(You can use tls.createSecureContext(...) to get proper `SecureContext`).\r\n\t\tIf `SNICallback` wasn't provided - default callback with high-level API will be used.\r\n\t**/\r\n\t@:optional var SNICallback:#if (haxe_ver >= 4)(servername:String, cb:(Error->SecureContext)) -> Void #else String->(Error->SecureContext)->Void #end;\r\n}\r\n\r\ntypedef TlsClientOptionsBase = {\r\n\t> TlsOptionsBase,\r\n\r\n\t/**\r\n\t\tA Buffer instance, containing TLS session.\r\n\t**/\r\n\t@:optional var session:Buffer;\r\n\r\n\t/**\r\n\t\tIf true - OCSP status request extension would be added to client hello,\r\n\t\tand OCSPResponse event will be emitted on socket before establishing secure communication\r\n\t**/\r\n\t@:optional var requestOCSP:Bool;\r\n}\r\n\r\n/**\r\n\tBase structure for options object used in tls methods.\r\n**/\r\ntypedef TlsCreateServerOptions = {\r\n\t> TlsServerOptionsBase,\r\n\t> SecureContextOptions,\r\n\r\n\t/**\r\n\t\tAbort the connection if the SSL/TLS handshake does not finish in this many milliseconds.\r\n\t\tThe default is 120 seconds.\r\n\t\tA 'clientError' is emitted on the `tls.Server` object whenever a handshake times out.\r\n\t**/\r\n\t@:optional var handshakeTimeout:Int;\r\n\r\n\t/**\r\n\t\tAn integer specifying the seconds after which TLS session identifiers\r\n\t\tand TLS session tickets created by the server are timed out.\r\n\t\tSee SSL_CTX_set_timeout for more details.\r\n\t**/\r\n\t@:optional var sessionTimeout:Int;\r\n\r\n\t/**\r\n\t\tA 48-byte `Buffer` instance consisting of 16-byte prefix, 16-byte hmac key, 16-byte AES key.\r\n\t\tYou could use it to accept tls session tickets on multiple instances of tls server.\r\n\r\n\t\tNOTE: Automatically shared between cluster module workers.\r\n\t**/\r\n\t@:optional var ticketKeys:Buffer;\r\n}\r\n\r\ntypedef TlsConnectOptions = {\r\n\t> TlsClientOptionsBase,\r\n\t> SecureContextOptions,\r\n\r\n\t/**\r\n\t\tHost the client should connect to.\r\n\t\tDefaults to 'localhost'\r\n\t**/\r\n\t@:optional var host:String;\r\n\r\n\t/**\r\n\t\tPort the client should connect to\r\n\t**/\r\n\t@:optional var port:Int;\r\n\r\n\t/**\r\n\t\tEstablish secure connection on a given socket rather than creating a new socket.\r\n\t\tIf this option is specified, `host` and `port` are ignored.\r\n\t**/\r\n\t@:optional var socket:js.node.net.Socket;\r\n\r\n\t/**\r\n\t\tCreates unix socket connection to path.\r\n\t\tIf this option is specified, host and port are ignored.\r\n\t**/\r\n\t@:optional var path:String;\r\n\r\n\t/**\r\n\t\tServername for SNI (Server Name Indication) TLS extension.\r\n\t**/\r\n\t@:optional var servername:String;\r\n\r\n\t/**\r\n\t\tAn override for checking server's hostname against the certificate.\r\n\t\tShould return an error if verification fails. Return `js.Lib.undefined` if passing.\r\n\t**/\r\n\t@:optional var checkServerIdentity:String -> {}->Dynamic; // TODO: peer cerficicate structure\r\n\r\n}\r\n\r\n/**\r\n\tThe tls module uses OpenSSL to provide Transport Layer Security\r\n\tand/or Secure Socket Layer: encrypted stream communication.\r\n**/\r\n@:jsRequire(\"tls\")\r\nextern class Tls {\r\n\t/**\r\n\t\trenegotiation limit, default is 3.\r\n\t**/\r\n\tstatic var CLIENT_RENEG_LIMIT:Int;\r\n\r\n\t/**\r\n\t\trenegotiation window in seconds, default is 10 minutes.\r\n\t**/\r\n\tstatic var CLIENT_RENEG_WINDOW:Int;\r\n\r\n\t/**\r\n\t\tSize of slab buffer used by all tls servers and clients. Default: 10 * 1024 * 1024.\r\n\r\n\t\tDon't change the defaults unless you know what you are doing.\r\n\t**/\r\n\tstatic var SLAB_BUFFER_SIZE:Int;\r\n\r\n\t/**\r\n\t\tReturns an array with the names of the supported SSL ciphers.\r\n\t**/\r\n\tstatic function getCiphers():Array<String>;\r\n\r\n\t/**\r\n\t\tCreates a new `Server`.\r\n\t\tThe `connectionListener` argument is automatically set as a listener for the 'secureConnection' event.\r\n\t**/\r\n\tstatic function createServer(options:TlsCreateServerOptions, ?secureConnectionListener:TLSSocket->Void):Server;\r\n\r\n\t/**\r\n\t\tCreates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.\r\n\t\tIf `host` is omitted, it defaults to 'localhost'.\r\n\t**/\r\n\t@:overload(function(port:Int, ?callback:Void->Void):TLSSocket {})\r\n\t@:overload(function(port:Int, options:TlsConnectOptions, ?callback:Void->Void):TLSSocket {})\r\n\t@:overload(function(port:Int, host:String, ?callback:Void->Void):TLSSocket {})\r\n\t@:overload(function(port:Int, host:String, options:TlsConnectOptions, ?callback:Void->Void):TLSSocket {})\r\n\tstatic function connect(options:TlsConnectOptions, ?callback:Void->Void):TLSSocket;\r\n\r\n\t/**\r\n\t\tCreates a credentials object.\r\n\t**/\r\n\tstatic function createSecureContext(?details:SecureContextOptions):SecureContext;\r\n\r\n\t/**\r\n\t\tCreates a new secure pair object with two streams, one of which reads/writes encrypted data,\r\n\t\tand one reads/writes cleartext data.\r\n\t\tGenerally the encrypted one is piped to/from an incoming encrypted data stream,\r\n\t\tand the cleartext one is used as a replacement for the initial encrypted stream.\r\n\t**/\r\n\tstatic function createSecurePair(?context:SecureContext, ?isServer:Bool, ?requestCert:Bool, ?rejectUnauthorized:Bool):SecurePair;\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():Iterator<T> {\n\t\treturn @:privateAccess HxOverrides.iter(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.extern;\n\n/**\n\tAn abstract type allowing values to be either of `T1` or `T2` type.\n\tSupports implicit casts from/to either types.\n\n\tIt is useful for interfacing with external code on dynamic platforms\n\tsuch as JavaScript or Python.\n\n\tOtherwise, use of this type is discouraged.\n\n\t@see <https://haxe.org/manual/lf-externs.html>\n**/\nabstract EitherType<T1, T2>(Dynamic) from T1 to T1 from T2 to T2 {}\n","/*\n * Copyright (C)2005-2018 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n@:native(\"Error\")\nextern class Error {\n\tvar message:String;\n\tvar name:String;\n\tvar stack(default, null):String;\n\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"EvalError\")\nextern class EvalError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"RangeError\")\nextern class RangeError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"ReferenceError\")\nextern class ReferenceError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"SyntaxError\")\nextern class SyntaxError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"TypeError\")\nextern class TypeError extends Error {\n\tfunction new(?message:String):Void;\n}\n\n@:native(\"URIError\")\nextern class URIError extends Error {\n\tfunction new(?message:String):Void;\n}\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.tls;\r\n\r\nimport haxe.extern.EitherType;\r\n\r\ntypedef SecureContextOptions = {\r\n\t/**\r\n\t\tprivate key, certificate and CA certs of the server in PFX or PKCS12 format.\r\n\t**/\r\n\t@:optional var pfx:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tpassphrase for the private key or pfx.\r\n\t**/\r\n\t@:optional var passphrase:String;\r\n\r\n\t/**\r\n\t\tprivate key of the server in PEM format.\r\n\t**/\r\n\t@:optional var key:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tcertificate key of the server in PEM format.\r\n\t**/\r\n\t@:optional var cert:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\ttrusted certificates in PEM format.\r\n\t\tIf this is omitted several well known \"root\" CAs will be used, like VeriSign.\r\n\t\tThese are used to authorize connections.\r\n\t**/\r\n\t@:optional var ca:Array<EitherType<String, Buffer>>;\r\n\r\n\t/**\r\n\t\tPEM encoded CRLs (Certificate Revocation List)\r\n\t**/\r\n\t@:optional var crl:EitherType<String, Array<String>>;\r\n\r\n\t/**\r\n\t\tciphers to use or exclude.\r\n\r\n\t\tTo mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`\r\n\t\toption described below to prioritize the non-CBC cipher.\r\n\r\n\t\tDefaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.\r\n\r\n\t\tConsult the OpenSSL cipher list format documentation for details on the format.\r\n\t\tECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.\r\n\t**/\r\n\t@:optional var ciphers:String;\r\n\r\n\t/**\r\n\t\tnamed curve to use for ECDH key agreement or false to disable ECDH.\r\n\r\n\t\tDefaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.\r\n\t\tOn recent releases, openssl ecparam -list_curves will also display the name and description\r\n\t\tof each available elliptic curve.\r\n\t**/\r\n\t@:optional var ecdhCurve:String;\r\n\r\n\t/**\r\n\t\tDiffie Hellman parameters, required for Perfect Forward Secrecy.\r\n\r\n\t\tUse openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,\r\n\t\totherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.\r\n\t\tIf omitted or invalid, it is silently discarded and DHE ciphers won't be available.\r\n\t**/\r\n\t@:optional var dhparam:EitherType<String, Buffer>;\r\n\r\n\t/**\r\n\t\tThe SSL method to use, e.g. SSLv3_method to force SSL version 3.\r\n\t\tThe possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.\r\n\t**/\r\n\t@:optional var secureProtocol:String;\r\n\r\n\t/**\r\n\t\topaque identifier for session resumption.\r\n\t\tIf `requestCert` is true, the default is MD5 hash value generated from command-line.\r\n\t\tOtherwise, the default is not provided.\r\n\t**/\r\n\t@:optional var sessionIdContext:String;\r\n\r\n\t/**\r\n\t\tWhen choosing a cipher, use the server's preferences instead of the client preferences.\r\n\t\tDefault: true.\r\n\t**/\r\n\t@:optional var honorCipherOrder:Bool;\r\n}\r\n\r\nextern class SecureContext {}\r\n","/*\r\n * Copyright (C)2014-2020 Haxe Foundation\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\npackage js.node.stream;\r\n\r\nimport haxe.extern.EitherType;\r\nimport js.node.events.EventEmitter.Event;\r\nimport js.node.stream.Readable.IReadable;\r\nimport js.node.stream.Writable.IWritable;\r\n#if haxe4\r\nimport js.lib.Error;\r\n#else\r\nimport js.Error;\r\n#end\r\n\r\n/**\r\n\tWritable streams are an abstraction for a destination to which data is written.\r\n\r\n\t@see https://nodejs.org/api/stream.html#stream_writable_streams\r\n**/\r\n@:enum abstract DuplexEvent<T:haxe.Constraints.Function>(Event<T>) to Event<T> {\r\n\t// Writable stream events -------------------------------------------------\r\n\t// var Close:DuplexEvent<Void->Void> = \"close\";\r\n\r\n\t/**\r\n\t\tIf a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted\r\n\t\twhen it is appropriate to resume writing data to the stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_drain\r\n\t**/\r\n\tvar Drain:DuplexEvent<Void->Void> = \"drain\";\r\n\r\n\t// var Error:DuplexEvent<Error->Void> = \"error\";\r\n\r\n\t/**\r\n\t\tThe `'finish'` event is emitted after the stream.end() method has been called,\r\n\t\tand all data has been flushed to the underlying system.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_finish\r\n\t**/\r\n\tvar Finish:DuplexEvent<Void->Void> = \"finish\";\r\n\r\n\t/**\r\n\t\tThe `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,\r\n\t\tadding this writable to its set of destinations.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_pipe\r\n\t**/\r\n\tvar Pipe:DuplexEvent<IReadable->Void> = \"pipe\";\r\n\r\n\t/**\r\n\t\tThe `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,\r\n\t\tremoving this Writable from its set of destinations.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_unpipe\r\n\t**/\r\n\tvar Unpipe:DuplexEvent<IReadable->Void> = \"unpipe\";\r\n\r\n\t// Readable stream events -------------------------------------------------\r\n\t// var Close:DuplexEvent<Void->Void> = \"close\";\r\n\r\n\t/**\r\n\t\tThe `'data'` event is emitted whenever the stream is relinquishing ownership of\r\n\t\ta chunk of data to a consumer. This may occur whenever the stream is switched\r\n\t\tin flowing mode by calling `readable.pipe()`, `readable.resume()`, or by\r\n\t\tattaching a listener callback to the `'data'` event. The `'data'` event will\r\n\t\talso be emitted whenever the `readable.read()` method is called and a chunk of\r\n\t\tdata is available to be returned.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_data\r\n\t**/\r\n\tvar Data:DuplexEvent<Dynamic->Void> = \"data\";\r\n\r\n\t/**\r\n\t\tThe `'end'` event is emitted when there is no more data to be consumed from\r\n\t\tthe stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_end\r\n\t**/\r\n\tvar End:DuplexEvent<Void->Void> = \"end\";\r\n\r\n\t// var Error:DuplexEvent<Error->Void> = \"error\";\r\n\r\n\t/**\r\n\t\tThe `'pause'` event is emitted when `stream.pause()` is called\r\n\t\tand `readableFlowing` is not `false`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_pause\r\n\t**/\r\n\tvar Pause:DuplexEvent<Void->Void> = \"pause\";\r\n\r\n\t/**\r\n\t\tThe `'readable'` event is emitted when there is data available to be read from\r\n\t\tthe stream. In some cases, attaching a listener for the `'readable'` event will\r\n\t\tcause some amount of data to be read into an internal buffer.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_readable\r\n\t**/\r\n\tvar Readable:DuplexEvent<Void->Void> = \"readable\";\r\n\r\n\t/**\r\n\t\tThe `'resume'` event is emitted when `stream.resume()` is\r\n\t\tcalled and `readableFlowing` is not `true`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_resume\r\n\t**/\r\n\tvar Resume:DuplexEvent<Void->Void> = \"resume\";\r\n\r\n\t// Overlapped events ------------------------------------------------------\r\n\r\n\t/**\r\n\t\tThe `'close'` event is emitted when the stream and any of its underlying\r\n\t\tresources (a file descriptor, for example) have been closed.\r\n\t\tThe event indicates that no more events will be emitted, and no further computation will occur.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_close\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_close_1\r\n\t**/\r\n\tvar Close:DuplexEvent<Void->Void> = \"close\";\r\n\r\n\t/**\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_error\r\n\t\t@see https://nodejs.org/api/stream.html#stream_event_error_1\r\n\t**/\r\n\tvar Error:DuplexEvent<Error->Void> = \"error\";\r\n}\r\n\r\n/**\r\n\tDuplex streams are streams that implement both the `Readable` and `Writable` interfaces.\r\n\r\n\t@see https://nodejs.org/api/stream.html#stream_class_stream_duplex\r\n**/\r\n@:jsRequire(\"stream\", \"Duplex\")\r\nextern class Duplex<TSelf:Duplex<TSelf>> extends Readable<TSelf> implements IDuplex {\r\n\t// --------- Writable interface implementation ----------------------------\r\n\r\n\t/**\r\n\t\tThe `writable.cork()` method forces all written data to be buffered in memory.\r\n\t\tThe buffered data will be flushed when either the `stream.uncork()` or `stream.end()` methods are called.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_cork\r\n\t**/\r\n\tfunction cork():Void;\r\n\r\n\t// This field is defined in super class.\r\n\t// function destroy(?error:Error):TSelf;\r\n\t// var destroyed(default, null):Bool;\r\n\r\n\t/**\r\n\t\tCalling the `writable.end()` method signals that no more data will be written to the Writable.\r\n\t\tThe optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.\r\n\t\tIf provided, the optional `callback` function is attached as a listener for the 'finish' event.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback\r\n\t**/\r\n\t@:overload(function(?callback:EitherType<Void->Void, Null<Error>->Void>):Void {})\r\n\tfunction end(chunk:Dynamic, ?encoding:String, ?callback:EitherType<Void->Void, Null<Error>->Void>):Void;\r\n\r\n\t/**\r\n\t\tThe `writable.setDefaultEncoding()` method sets the default `encoding` for a Writable stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_setdefaultencoding_encoding\r\n\t**/\r\n\tfunction setDefaultEncoding(encoding:String):TSelf;\r\n\r\n\t/**\r\n\t\tThe `writable.uncork()` method flushes all data buffered since `stream.cork()` was called.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_uncork\r\n\t**/\r\n\tfunction uncork():Void;\r\n\r\n\t/**\r\n\t\tIs `true` if it is safe to call `writable.write()`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writable\r\n\t**/\r\n\tvar writable(default, null):Bool;\r\n\r\n\t/**\r\n\t\tIs `true` after `writable.end()` has been called. This property\r\n\t\tdoes not indicate whether the data has been flushed, for this use\r\n\t\t`writable.writableFinished` instead.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writableended\r\n\t**/\r\n\tvar writableEnded(default, null):Bool;\r\n\r\n\t/**\r\n\t\tIs set to `true` immediately before the 'finish' event is emitted.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writablefinished\r\n\t**/\r\n\tvar writableFinished(default, null):Bool;\r\n\r\n\t/**\r\n\t\tReturn the value of `highWaterMark` passed when constructing this `Writable`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writablehighwatermark\r\n\t**/\r\n\tvar writablehighWaterMark(default, null):Int;\r\n\r\n\t/**\r\n\t\tThis property contains the number of bytes (or objects) in the queue ready to be written.\r\n\t\tThe value provides introspection data regarding the status of the `highWaterMark`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writablelength\r\n\t**/\r\n\tvar writableLength(default, null):Int;\r\n\r\n\t/**\r\n\t\tGetter for the property `objectMode` of a given `Writable` stream.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writableobjectmode\r\n\t**/\r\n\tvar writableObjectMode(default, null):Bool;\r\n\r\n\t/**\r\n\t\tThe `writable.write()` method writes some data to the stream, and calls the supplied `callback` once the data has been fully handled.\r\n\t\tIf an error occurs, the `callback` may or may not be called with the error as its first argument.\r\n\t\tTo reliably detect write errors, add a listener for the `'error'` event.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback\r\n\t**/\r\n\tfunction write(chunk:Dynamic, ?encoding:String, ?callback:EitherType<Void->Void, Null<Error>->Void>):Bool;\r\n\r\n\t// --------- API for implementing a Writable Stream -----------------------\r\n\t// function new(?options:DuplexNewOptions);\r\n\r\n\t/**\r\n\t\tAll `Writable` stream implementations must provide a `writable._write()` method to send data to the underlying resource.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1\r\n\t**/\r\n\tprivate function _write(chunk:Dynamic, encoding:String, callback:Null<Error>->Void):Void;\r\n\r\n\t/**\r\n\t\tThis function MUST NOT be called by application code directly.\r\n\t\tIt should be implemented by child classes, and called by the internal `Writable` class methods only.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback\r\n\t**/\r\n\tprivate function _writev(chunks:Array<Writable.Chunk>, callback:Null<Error>->Void):Void;\r\n\r\n\t// This field is defined in super class.\r\n\t// private function _destroy(err:Null<Error>, ?callback:Null<Error>->Void):Void;\r\n\r\n\t/**\r\n\t\tThe `_final()` method must not be called directly.\r\n\t\tt may be implemented by child classes, and if so, will be called by the internal `Writable` class methods only.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_final_callback\r\n\t**/\r\n\tprivate function _final(callback:Null<Error>->Void):Void;\r\n\r\n\t// --------- Overlapped interface -----------------------------------------\r\n\r\n\t/**\r\n\t\tDestroy the stream.\r\n\t\tOptionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_destroy_error\r\n\t\t@see https://nodejs.org/api/stream.html#stream_readable_destroy_error\r\n\t**/\r\n\toverride function destroy(?error:Error):TSelf;\r\n\r\n\t// This field is defined in super class.\r\n\t// var destroyed(default, null):Bool;\r\n\r\n\t/**\r\n\t\t@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\r\n\t\t@see https://nodejs.org/api/stream.html#stream_new_stream_readable_options\r\n\t**/\r\n\tfunction new(?options:DuplexNewOptions);\r\n\r\n\t/**\r\n\t\tThe `_destroy()` method is called by `destroy()`.\r\n\t\tIt can be overridden by child classes but it **must not** be called directly.\r\n\r\n\t\t@see https://nodejs.org/api/stream.html#stream_writable_destroy_err_callback\r\n\t\t@see https://nodejs.org/api/stream.html#stream_readable_destroy_err_callback\r\n\t**/\r\n\tprivate override function _destroy(err:Null<Error>, callback:Null<Error>->Void):Void;\r\n\r\n\t// This field is defined in super class.\r\n\t// var isTTY(default, null):Bool;\r\n}\r\n\r\n/**\r\n\tPassed to both `Writable` and `Readable` constructors. Also has the following fields:\r\n\r\n\t@see https://nodejs.org/api/stream.html#stream_new_stream_duplex_options\r\n**/\r\ntypedef DuplexNewOptions = {\r\n\t> Readable.ReadableNewOptions,\r\n\t> Writable.WritableNewOptions,\r\n\r\n\t/**\r\n\t\tIf set to `false`, then the stream will automatically end the writable side when the readable side ends. Default: `true`.\r\n\t**/\r\n\t@:optional var allowHalfOpen:Bool;\r\n\r\n\t/**\r\n\t\tSets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. Default: `false`.\r\n\t**/\r\n\t@:optional var readableObjectMode:Bool;\r\n\r\n\t/**\r\n\t\tSets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. Default: `false`.\r\n\t**/\r\n\t@:optional var writableObjectMode:Bool;\r\n\r\n\t/**\r\n\t\tSets `highWaterMark` for the readable side of the stream. Has no effect if `highWaterMark` is provided.\r\n\t**/\r\n\t@:optional var readableHighWaterMark:Int;\r\n\r\n\t/**\r\n\t\tSets `highWaterMark` for the writable side of the stream. Has no effect if `highWaterMark` is provided.\r\n\t**/\r\n\t@:optional var writableHighWaterMark:Int;\r\n}\r\n\r\n@:remove\r\nextern interface IDuplex extends IReadable extends IWritable {}\r\n"]}