import {Socket} from "net"
import {SocketConnectOptionsTcp} from "./net/Socket"
import {Agent} from "http"
import {Buffer} from "buffer"

export type HttpsCreateServerOptions = {IncomingMessage?: null | any, NPNProtocols?: null | string[] | Buffer, SNICallback?: null | ((servername: string, cb: ((arg0: Error) => SecureContext)) => void), ServerResponse?: null | any, ca?: null | string | Buffer[], cert?: null | string | Buffer, ciphers?: null | string, crl?: null | string | string[], dhparam?: null | string | Buffer, ecdhCurve?: null | string, handshakeTimeout?: null | number, honorCipherOrder?: null | boolean, key?: null | string | Buffer, passphrase?: null | string, pfx?: null | string | Buffer, rejectUnauthorized?: null | boolean, requestCert?: null | boolean, secureProtocol?: null | string, sessionIdContext?: null | string, sessionTimeout?: null | number, ticketKeys?: null | Buffer}

export type HttpsRequestOptions = {NPNProtocols?: null | string[] | Buffer, agent?: null | Agent | boolean, auth?: null | string, ca?: null | string | Buffer[], cert?: null | string | Buffer, checkServerIdentity?: null | ((arg0: string, arg1: {}) => any), ciphers?: null | string, createConnection?: null | ((options: SocketConnectOptionsTcp, callabck?: ((err: Error, stream: IDuplex) => void)) => IDuplex), crl?: null | string | string[], defaultPort?: null | number, dhparam?: null | string | Buffer, ecdhCurve?: null | string, family?: null | number, headers?: null | {[key: string]: string | string[]}, honorCipherOrder?: null | boolean, host?: null | string, hostname?: null | string, key?: null | string | Buffer, localAddress?: null | string, method?: null | string, passphrase?: null | string, path?: null | string, pfx?: null | string | Buffer, port?: null | number, protocol?: null | string, rejectUnauthorized?: null | boolean, requestOCSP?: null | boolean, secureProtocol?: null | string, servername?: null | string, session?: null | Buffer, sessionIdContext?: null | string, setHost?: null | boolean, socket?: null | Socket, socketPath?: null | string, timeout?: null | number}

//# sourceMappingURL=Https.d.ts.map