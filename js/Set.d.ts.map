{"sourceRoot":"","names":[],"mappings":";YAwBa,IAAY,KCUlB,IDVkB","version":3,"file":"Set.d.ts.map","sources":["../../../../../../haxe/versions/4.0.1/std/js/Set.hx","../../../../../../haxe/versions/4.0.1/std/js/lib/Set.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js;\n\n@:deprecated typedef Set<T> = js.lib.Set<T>;\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\nimport js.lib.Map.MapEntry;\nimport js.lib.Iterator;\n\n/**\n\tThe `js.Set` object lets you store unique values of any type, whether\n\tprimitive values or object references.\n\n\tDocumentation [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Set\")\nextern class Set<T> {\n\t/**\n\t\tThe number of values in the `js.Set` object.\n\t**/\n\tvar size(default, null):Int;\n\n\t/**\n\t\tIf an iterable object is passed, all of its elements will be added to\n\t\tthe new `js.Set`.\n\t**/\n\t@:pure function new(?iterable:Any);\n\n\t/**\n\t\tReturns a boolean asserting whether an element is present with the given\n\t\tvalue in the `js.Set` object or not.\n\t**/\n\t@:pure function has(value:T):Bool;\n\n\t/**\n\t\tAppends a new element with the given value to the `js.Set` object.\n\t\tReturns the `js.Set` object.\n\t**/\n\tfunction add(value:T):Set<T>;\n\n\t/**\n\t\tRemoves the element associated to the value and returns the value that\n\t\t`has(value)` would have previously returned.\n\t\t`has(value)` will return `false` afterwards.\n\t**/\n\tfunction delete(value:T):Bool;\n\n\t/**\n\t\tRemoves all elements from the `js.Set` object.\n\t**/\n\tfunction clear():Void;\n\n\t/**\n\t\tCalls `callback` once for each key-value pair present in the `js.Set`\n\t\tobject, in insertion order.\n\n\t\tIf a `thisArg` parameter is provided to forEach, it will be used as the\n\t\t`this` value for each callback.\n\t**/\n\tfunction forEach(callback:(value:T, key:T, set:Set<T>) -> Void, ?thisArg:Any):Void;\n\n\t/**\n\t\tReturns a new `js.lib.Iterator` object that contains the keys for each element\n\t\tin the `js.Set` object in insertion order.\n\t**/\n\tfunction keys():Iterator<T>;\n\n\t/**\n\t\tReturns a new `js.lib.Iterator` object that contains the values for each\n\t\telement in the `js.Set` object in insertion order.\n\t**/\n\tfunction values():Iterator<T>;\n\n\t/**\n\t\tReturns a new `js.lib.Iterator` object that contains an array of\n\t\t`[value, value]` for each element in the `js.Set` object, in insertion\n\t\torder.\n\t\tThis is kept similar to the `js.Map` object, so that each entry has the\n\t\tsame value for its key and value here.\n\t**/\n\tfunction entries():Iterator<MapEntry<T, T>>;\n}\n"]}