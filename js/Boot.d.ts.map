{"sourceRoot":"","names":[],"mappings":";AA2BA;kBACC,iBCiEmC;kBD7DnC,eEHyB,MDgEU;kBDzDnC,gBCyDmC;kBDrD5B,YC0CR;kBDzBC,iBAYgC,UCwBG,SDtBH,WCXG,QD0DnB,uBGjGA,WFwEmB,SDMhB,QCvCgB,QD8Cd,gBGrFL;kBHyHT,gCCjD4B;kBDoE5B,+BCpE4B;kBDgHnC,4BEhLyB,MDgEU;kBDoHnC,4BEpLyB,MDgEU;kBDwHT;CAO1B,0BIjMM;kBJwMN,2BG9MgB;kBHwNhB,uBChJmC;kBDqJnC,2BG7NgB,SF6DjB","version":3,"file":"Boot.d.ts.map","sources":["../../../../../../haxe/versions/4.2.2/std/js/Boot.hx","../../../../../../haxe/versions/4.2.2/std/StdTypes.hx","../../../../../../haxe/versions/4.2.2/std/Class.hx","../../../../../../haxe/versions/4.2.2/std/js/_std/String.hx","../../../../../../haxe/versions/4.2.2/std/js/lib/Function.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js;\n\nimport js.Syntax; // import it here so it's always available in the compiler\n\n@:dox(hide)\nclass Boot {\n\tstatic inline function isClass(o:Dynamic):Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isInterface(o:Class<Dynamic>):Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isInterface\", o.__isInterface__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic):Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\t@:pure static function getClass(o:Null<Dynamic>):Null<Dynamic> {\n\t\tif (o == null) {\n\t\t\treturn null;\n\t\t} else if (Std.isOfType(o, Array)) {\n\t\t\treturn Array;\n\t\t} else {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o, s:String) {\n\t\tuntyped {\n\t\t\tif (o == null)\n\t\t\t\treturn \"null\";\n\t\t\tif (s.length >= 5)\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = js.Syntax.typeof(o);\n\t\t\tif (t == \"function\" && (isClass(o) || isEnum(o)))\n\t\t\t\tt = \"object\";\n\t\t\tswitch (t) {\n\t\t\t\tcase \"object\":\n\t\t\t\t\t#if !js_enums_as_arrays\n\t\t\t\t\t__feature__(\"has_enum\", if (o.__enum__) {\n\t\t\t\t\t\tvar e = $hxEnums[o.__enum__];\n\t\t\t\t\t\tvar con = e.__constructs__[o._hx_index];\n\t\t\t\t\t\tvar n = con._hx_name;\n\t\t\t\t\t\tif (con.__params__) {\n\t\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\t\treturn n + \"(\" + [for (p in (con.__params__ : Array<String>)) __string_rec(o[p], s)].join(\",\") + \")\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn n;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t#end\n\t\t\t\t\tif (js.Syntax.instanceof(o, Array)) {\n\t\t\t\t\t\t#if js_enums_as_arrays\n\t\t\t\t\t\t__feature__(\"has_enum\", if (o.__enum__) {\n\t\t\t\t\t\t\tif (o.length == 2)\n\t\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\t\tvar str = o[0] + \"(\";\n\t\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\t\tfor (i in 2...o.length) {\n\t\t\t\t\t\t\t\tif (i != 2)\n\t\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i], s);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tstr += __string_rec(o[i], s);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t\t});\n\t\t\t\t\t\t#end\n\t\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor (i in 0...o.length)\n\t\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\") + __string_rec(o[i], s);\n\t\t\t\t\t\tstr += \"]\";\n\t\t\t\t\t\treturn str;\n\t\t\t\t\t}\n\t\t\t\t\tvar tostr;\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t\t} catch (e:Dynamic) {\n\t\t\t\t\t\t// strange error on IE\n\t\t\t\t\t\treturn \"???\";\n\t\t\t\t\t}\n\t\t\t\t\tif (tostr != null && tostr != js.Syntax.code(\"Object.toString\") && js.Syntax.typeof(tostr) == \"function\") {\n\t\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\t\tif (s2 != \"[object Object]\")\n\t\t\t\t\t\t\treturn s2;\n\t\t\t\t\t}\n\t\t\t\t\tvar str = \"{\\n\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t\tvar k:String = null;\n\t\t\t\t\tjs.Syntax.code(\"for( {0} in {1} ) {\", k, o);\n\t\t\t\t\tif (hasp && !o.hasOwnProperty(k))\n\t\t\t\t\t\tjs.Syntax.code(\"continue\");\n\t\t\t\t\tif (k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\")\n\t\t\t\t\t\tjs.Syntax.code(\"continue\");\n\t\t\t\t\tif (str.length != 2)\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \" + __string_rec(o[k], s);\n\t\t\t\t\tjs.Syntax.code(\"}\");\n\t\t\t\t\ts = s.substring(1);\n\t\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\t\treturn str;\n\t\t\t\tcase \"function\":\n\t\t\t\t\treturn \"<function>\";\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn o;\n\t\t\t\tdefault:\n\t\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\t@:pure private static function __interfLoop(cc:Dynamic, cl:Dynamic) {\n\t\tif (cc == null)\n\t\t\treturn false;\n\t\tif (cc == cl)\n\t\t\treturn true;\n\t\tvar intf:Dynamic = cc.__interfaces__;\n\t\tif (intf != null\n\t\t\t// ES6 classes inherit statics, so we want to avoid accessing inherited `__interfaces__`\n\t\t\t#if (js_es >= 6) && (cc.__super__ == null || cc.__super__.__interfaces__ != intf) #end\n\t\t) {\n\t\t\tfor (i in 0...intf.length) {\n\t\t\t\tvar i:Dynamic = intf[i];\n\t\t\t\tif (i == cl || __interfLoop(i, cl))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn __interfLoop(cc.__super__, cl);\n\t}\n\n\t@:pure private static function __instanceof(o:Dynamic, cl:Dynamic) {\n\t\tif (cl == null)\n\t\t\treturn false;\n\t\tswitch (cl) {\n\t\t\tcase Int:\n\t\t\t\treturn js.Syntax.typeof(o) == \"number\" && js.Syntax.strictEq(o | 0, o);\n\t\t\tcase Float:\n\t\t\t\treturn js.Syntax.typeof(o) == \"number\";\n\t\t\tcase Bool:\n\t\t\t\treturn js.Syntax.typeof(o) == \"boolean\";\n\t\t\tcase String:\n\t\t\t\treturn js.Syntax.typeof(o) == \"string\";\n\t\t\tcase Array:\n\t\t\t\treturn js.Syntax.instanceof(o, Array) #if js_enums_as_arrays && o.__enum__ == null #end;\n\t\t\tcase Dynamic:\n\t\t\t\treturn o != null;\n\t\t\tdefault:\n\t\t\t\tif (o != null) {\n\t\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\t\tif (js.Syntax.typeof(cl) == \"function\") {\n\t\t\t\t\t\tif (__downcastCheck(o, cl))\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (js.Syntax.typeof(cl) == \"object\" && __isNativeObj(cl)) {\n\t\t\t\t\t\tif (js.Syntax.instanceof(o, cl))\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// do not use isClass/isEnum here\n\t\t\t\tuntyped __feature__(\"Class.*\", if (cl == Class && o.__name__ != null) return true);\n\t\t\t\tuntyped __feature__(\"Enum.*\", if (cl == Enum && o.__ename__ != null) return true);\n\t\t\t\t#if js_enums_as_arrays\n\t\t\t\treturn o.__enum__ == cl;\n\t\t\t\t#else\n\t\t\t\treturn untyped __feature__(\n\t\t\t\t\t\"has_enum\",\n\t\t\t\t\tif (o.__enum__ != null) ($hxEnums[o.__enum__]) == cl else false,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\t#end\n\t\t}\n\t}\n\n\tstatic function __downcastCheck(o:Dynamic, cl:Class<Dynamic>):Bool {\n\t\treturn js.Syntax.instanceof(o, cl) || (isInterface(cl) && inline __implements(o, cl));\n\t}\n\n\tstatic function __implements(o:Dynamic, iface:Class<Dynamic>):Bool {\n\t\treturn __interfLoop(getClass(o), iface);\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o:Dynamic, t:Dynamic) {\n\t\tif (o == null || __instanceof(o, t))\n\t\t\treturn o;\n\t\telse\n\t\t\tthrow \"Cannot cast \" + Std.string(o) + \" to \" + Std.string(t);\n\t}\n\n\tstatic var __toStr:js.lib.Function;\n\n\tstatic function __init__() {\n\t\tBoot.__toStr = (cast {}).toString;\n\t}\n\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name:String = __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn js.Lib.global[cast name];\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tAn abstract type that represents a Class.\n\n\tSee `Type` for the Haxe Reflection API.\n\n\t@see https://haxe.org/manual/types-class-instance.html\n**/\n@:coreType @:runtimeValue abstract Class<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\nimport haxe.extern.Rest;\n\n@:native(\"Function\")\nextern class Function {\n\t/** Specifies the number of arguments expected by the function. **/\n\tvar length(default, never):Int;\n\n\t/** The name of the function. **/\n\tvar name:String;\n\n\t/** Creates a new Function object. **/\n\tfunction new(arg:String, rest:Rest<String>);\n\n\t/** Calls a function and sets its this to the provided value, arguments can be passed as an Array object. **/\n\tfunction apply(thisArg:Dynamic, argsArray:Array<Dynamic>):Dynamic;\n\n\t/** Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are. **/\n\tfunction call(thisArg:Dynamic, args:Rest<Dynamic>):Dynamic;\n\n\t/**\n\t\tCreates a new function which, when called, has its this set to the provided value,\n\t\twith a given sequence of arguments preceding any provided when the new function was called.\n\t**/\n\t@:pure function bind(thisArg:Dynamic, args:Rest<Dynamic>):Function;\n\n\t/** Returns a string representing the source code of the function. **/\n\t@:pure function toString():String;\n}\n"]}