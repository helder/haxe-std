{"sourceRoot":"","names":[],"mappings":";AAuDA,+BA0CC,YCfD,OC7DiB,QF0DhB,oBCGD,OAWoC,SDhCnC,gBCqBD,OC7DiB,QFmEhB,UCND,OAWoC,SDpBnC,cCSD,OC7DiB,QF8ChB,QCeD,OC7DiB;;AF+EjB,uCA8BC,WE7GgB,QFoGhB,WEpGgB,QF8FhB,mBCtBmC,SDcnC,QEtFgB,QFsGhB,SC9BmC,SDiBnC,aEzFgB,QFwFhB,OExFgB;;AF2JjB,iDAKC,gBCnGD,OC7DiB","version":3,"file":"Collator.d.ts.map","sources":["../../../../../../../../haxe/versions/4.2.1/std/js/lib/intl/Collator.hx","../../../../../../../../haxe/versions/4.2.1/std/StdTypes.hx","../../../../../../../../haxe/versions/4.2.1/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib.intl;\n\n/**\n\tThe `Collator` object is a constructor for collators, objects that enable language\n\tsensitive string comparison.\n\n\tDocumentation [Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Intl.Collator\")\nextern class Collator {\n\t@:overload(function(?locales:Array<String>, ?options:CollatorOptions):Void {})\n\t@:pure function new(?locales:String, ?options:CollatorOptions);\n\n\t/**\n\t\tGetter function that compares two strings according to the sort order of this `Collator` object.\n\t */\n\t@:pure function compare(string1:String, string2:String):Int;\n\n\t/**\n\t\tReturns a new object with properties reflecting the locale and collation options computed\n\t\tduring initialization of the object.\n\t */\n\t@:pure function resolvedOptions():CollatorResolvedOptions;\n\n\t/**\n\t\tReturns an array containing those of the provided locales that are supported\n\t\twithout having to fall back to the runtime's default locale.\n\t\t@param locales A string with a BCP 47 language tag, or an array of such strings.\n\t**/\n\t@:overload(function(locales:Array<String>, ?options:CollatorSupportedLocalesOfOptions):Array<String> {})\n\t@:pure static function supportedLocalesOf(locales:String, ?options:CollatorSupportedLocalesOfOptions):Array<String>;\n}\n\ntypedef CollatorOptions = {\n\t/**\n\t\tThe locale matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t\tFor information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).\n\t**/\n\tvar ?localeMatcher:LocaleMatcher;\n\n\t/**\n\t\tWhether the comparison is for sorting or for searching for matching strings.\n\t\tThe default is `Sort`.\n\t**/\n\tvar ?usage:Usage;\n\n\t/**\n\t\tWhich differences in the strings should lead to non-zero result values.\n\t\tThe default is `Variant` for usage `Sort`; it's locale dependent for usage `Search`.\n\t**/\n\tvar ?sensitivity:Sensitivity;\n\n\t/**\n\t\tWhether punctuation should be ignored.\n\t\tThe default is `false`.\n\t**/\n\tvar ?ignorePunctuation:Bool;\n\n\t/**\n\t\tWhether numeric collation should be used, such that \"1\" < \"2\" < \"10\".\n\t\tThe default is `false`.\n\t\tThis option can be set through an `options` property or through a Unicode extension key;\n\t\tif both are provided, the `options` property takes precedence.\n\t\tImplementations are not required to support this property.\n\t**/\n\tvar ?numeric:Bool;\n\n\t/**\n\t\tWhether upper case or lower case should sort first.\n\t\tThe default is \"false\".\n\t\tThis option can be set through an options property or through a Unicode extension key;\n\t\tif both are provided, the `options` property takes precedence.\n\t\tImplementations are not required to support this property.\n\t**/\n\tvar ?caseFirst:String;\n}\n\ntypedef CollatorResolvedOptions = {\n\t/**\n\t\tThe BCP 47 language tag for the locale actually used.\n\t\tIf any Unicode extension values were requested in the input BCP 47 language tag\n\t\tthat led to this locale, the key-value pairs that were requested and are supported\n\t\tfor this locale are included in `locale`.\n\t**/\n\tfinal locale:String;\n\n\tfinal usage:Usage;\n\tfinal sensitivity:Sensitivity;\n\n\t/**\n\t\tThe values provided for these properties in the `options` argument or filled in as defaults.\n\t**/\n\tfinal ignorePunctuation:Bool;\n\n\t/**\n\t\the value requested using the Unicode extension key `\"co\"`, if it is supported for `Locale`,\n\t\tor `Default`.\n\t**/\n\tfinal collation:Collation;\n\n\tfinal numeric:Bool;\n\n\t/**\n\t\tThe values requested for these properties in the options argument or using the\n\t\tUnicode extension keys `\"kn\"` and `\"kf\"` or filled in as defaults.\n\t\tIf the implementation does not support these properties, they are omitted.\n\t**/\n\tfinal caseFirst:CaseFirst;\n}\n\nenum abstract Usage(String) {\n\tvar Sort = \"sort\";\n\tvar Search = \"search\";\n}\n\nenum abstract Sensitivity(String) {\n\t/**\n\t\tOnly strings that differ in base letters compare as unequal.\n\t\tExamples: a ≠ b, a = á, a = A.\n\t**/\n\tvar Base = \"base\";\n\n\t/**\n\t\tOnly strings that differ in base letters or accents and other diacritic marks compare as unequal.\n\t\tExamples: a ≠ b, a ≠ á, a = A.\n\t**/\n\tvar Accent = \"accent\";\n\n\t/**\n\t\tOnly strings that differ in base letters or case compare as unequal.\n\t\tExamples: a ≠ b, a = á, a ≠ A.\n\t**/\n\tvar Case = \"case\";\n\n\t/**\n\t\tStrings that differ in base letters, accents and other diacritic marks, or case compare as unequal.\n\t\tOther differences may also be taken into consideration.\n\t\tExamples: a ≠ b, a ≠ á, a ≠ A.\n\t**/\n\tvar Variant = \"variant\";\n}\n\nenum abstract CaseFirst(String) {\n\tvar Upper = \"upper\";\n\tvar Lower = \"lower\";\n\tvar False = \"false\";\n}\n\nenum abstract Collation(String) {\n\tvar Locale = \"locale\";\n\tvar Default = \"default\";\n}\n\ntypedef CollatorSupportedLocalesOfOptions = {\n\t/**\n\t\tThe locale matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t */\n\tvar ?localeMatcher:LocaleMatcher;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}