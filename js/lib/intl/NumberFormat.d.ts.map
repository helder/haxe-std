{"sourceRoot":"","names":[],"mappings":";AA4DA,mCAoBC,WCED,OC7DiB,QFiEhB,kBCJD,OC7DiB,QF6ChB,gBCgBD,OC7DiB,QFgGhB,wBCnCD,OAtBoC,QDqEnC,2BC/CD,OAtBoC,QD+CnC,wBCzBD,OAtBoC,QDsCnC,uBChBD,OAtBoC,QD+DnC,2BCzCD,OAtBoC,QDYnC,QCUD,OC7DiB,QFuEhB,cCVD,OAWoC;;ADuCpC,0CAoBC,UEnIgB,QFyIhB,iBEzIgB,QFqHhB,QErHgB,QFmJhB,uBC5GmC,QDoHnC,0BCpHmC,QDqGnC,uBCrGmC,QDoGnC,sBCpGmC,QD8GnC,0BC9GmC,QDmFnC,iBE1HgB,QF4HhB,OE5HgB,QFiIhB,aEjIgB;;AFgMjB,gCACC,MEjMgB,QFkMhB,OElMgB;;AF+PjB,qDAKC,gBCvMD,OC7DiB","version":3,"file":"NumberFormat.d.ts.map","sources":["../../../../../../../../haxe/versions/4.1.3/std/js/lib/intl/NumberFormat.hx","../../../../../../../../haxe/versions/4.1.3/std/StdTypes.hx","../../../../../../../../haxe/versions/4.1.3/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib.intl;\n\n/**\n\tThe `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.\n\n\tDocumentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Intl.NumberFormat\")\nextern class NumberFormat {\n\t@:overload(function(?locales:Array<String>, ?options:NumberFormatOptions):Void {})\n\t@:pure function new(?locales:String, ?options:NumberFormatOptions);\n\n\t/**\n\t\tGetter function that formats a number according to the locale\n\t\tand formatting options of this `NumberFormat` object.\n\t**/\n\t@:pure function format(number:Float):String;\n\n\t/**\n\t\tReturns an `Array` of objects representing the number string in parts\n\t\tthat can be used for custom locale-aware formatting.\n\t**/\n\t@:pure function formatToParts(?number:Float):Array<NumberFormatPart>;\n\n\t/**\n\t\tReturns a new object with properties reflecting the locale and collation options\n\t\tcomputed during initialization of the object.\n\t**/\n\t@:pure function resolvedOptions():NumberFormatResolvedOption;\n\n\t/**\n\t\tReturns an array containing those of the provided locales that are supported\n\t\twithout having to fall back to the runtime's default locale.\n\t**/\n\t@:overload(function(locales:Array<String>, ?options:NumberFormatSupportedLocalesOfOptions):Array<String> {})\n\t@:pure static function supportedLocalesOf(locales:String, ?options:NumberFormatSupportedLocalesOfOptions):Array<String>;\n}\n\ntypedef NumberFormatOptions = {\n\t/**\n\t\tThe locale matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t\tFor information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).\n\t**/\n\tvar ?localeMatcher:LocaleMatcher;\n\n\t/**\n\t\tThe formatting style to use.\n\t\tThe default is `Decimal`.\n\t**/\n\tvar ?style:NumberFormatStyle;\n\n\t/**\n\t\tThe currency to use in currency formatting. Possible values are the ISO 4217 currency codes,\n\t\tsuch as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see the\n\t\t[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).\n\t\tThere is no default value; if the style is \"currency\", the currency property must be provided.\n\t**/\n\tvar ?currency:String;\n\n\t/**\n\t\tHow to display the currency in currency formatting.\n\t\tThe default is `Symbol`.\n\t**/\n\tvar ?currencyDisplay:CurrencyDisplay;\n\n\t/**\n\t\tWhether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.\n\t\tThe default is `true`.\n\t**/\n\tvar ?useGrouping:Bool;\n\n\t/**\n\t\tThe minimum number of integer digits to use.\n\t\tPossible values are from 1 to 21; the default is 1.\n\t**/\n\tvar ?minimumIntegerDigits:Int;\n\n\t/**\n\t\tThe minimum number of fraction digits to use.\n\t\tPossible values are from 0 to 20; the default for plain number and percent formatting is 0;\n\t\tthe default for currency formatting is the number of minor unit digits provided by the\n\t\t[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)\n\t\t(2 if the list doesn't provide that information).\n\t**/\n\tvar ?minimumFractionDigits:Int;\n\n\t/**\n\t\tThe maximum number of fraction digits to use.\n\t\tPossible values are from 0 to 20; the default for plain number formatting is the larger of\n\t\tminimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits\n\t\tand the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)\n\t\t(2 if the list doesn't provide that information); the default for percent formatting is the larger of\n\t\tminimumFractionDigits and 0.\n\t**/\n\tvar ?maximumFractionDigits:Int;\n\n\t/**\n\t\tThe minimum number of significant digits to use.\n\t\tPossible values are from 1 to 21; the default is 1.\n\t**/\n\tvar ?minimumSignificantDigits:Int;\n\n\t/**\n\t\tThe maximum number of significant digits to use.\n\t\tPossible values are from 1 to 21; the default is 21.\n\t**/\n\tvar ?maximumSignificantDigits:Int;\n}\n\ntypedef NumberFormatResolvedOption = {\n\t/**\n\t\tThe BCP 47 language tag for the locale actually used. If any Unicode extension values were\n\t\trequested in the input BCP 47 language tag that led to this locale, the key-value pairs that\n\t\twere requested and are supported for this locale are included in `locale`.\n\t**/\n\tfinal locale:String;\n\n\t/**\n\t\tThe value requested using the Unicode extension key `\"nu\"` or filled in as a default.\n\t**/\n\tfinal numberingSystem:String;\n\n\tfinal style:NumberFormatStyle;\n\n\t/**\n\t\tThe values provided for these properties in the `options` argument or filled in as defaults.\n\t**/\n\tfinal useGrouping:String;\n\n\tfinal currency:String;\n\n\t/**\n\t\tThe values provided for these properties in the `options` argument or filled in as defaults.\n\t\tThese properties are only present if `style` is `\"currency\"`.\n\t**/\n\tfinal currencyDisplay:String;\n\n\tfinal minimumIntegerDigits:Int;\n\tfinal minimumFractionDigits:Int;\n\n\t/**\n\t\tThe values provided for these properties in the `options` argument or filled in as defaults.\n\t\tThese properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`\n\t\twas provided in the `options` argument.\n\t**/\n\tfinal maximumFractionDigits:Int;\n\n\tfinal minimumSignificantDigits:Int;\n\n\t/**\n\t\tThe values provided for these properties in the `options` argument or filled in as defaults.\n\t\tThese properties are present only if at least one of them was provided in the `options` argument.\n\t**/\n\tfinal maximumSignificantDigits:Int;\n}\n\nenum abstract NumberFormatStyle(String) {\n\t/**\n\t\tplain number formatting\n\t**/\n\tvar Decimal = \"decimal\";\n\n\t/**\n\t\tcurrency formatting\n\t**/\n\tvar Currency = \"currency\";\n\n\t/**\n\t\tpercent formatting\n\t**/\n\tvar Percent = \"percent\";\n}\n\nenum abstract CurrencyDisplay(String) {\n\t/**\n\t\tTo use a localized currency symbol such as €.\n\t**/\n\tvar Symbol = \"symbol\";\n\n\t/**\n\t\tTo use the ISO currency code.\n\t**/\n\tvar Code = \"code\";\n\n\t/**\n\t\tTo use a localized currency name such as \"dollar\".\n\t**/\n\tvar Name = \"name\";\n}\n\ntypedef NumberFormatPart = {\n\tfinal type:NumberFormatPartType;\n\tfinal value:String;\n}\n\nenum abstract NumberFormatPartType(String) {\n\t/**\n\t\tThe currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\" depending\n\t\ton how currencyDisplay is specified.\n\t**/\n\tvar Currency = \"currency\";\n\n\t/**\n\t\tThe decimal separator string (\".\").\n\t**/\n\tvar Decimal = \"decimal\";\n\n\t/**\n\t\tThe fraction number.\n\t**/\n\tvar Fraction = \"fraction\";\n\n\t/**\n\t\tThe group separator string (\",\").\n\t**/\n\tvar group = \"group\";\n\n\t/**\n\t\tThe Infinity string (\"∞\").\n\t**/\n\tvar infinity = \"infinity\";\n\n\t/**\n\t\tThe integer number.\n\t**/\n\tvar integer = \"integer\";\n\n\t/**\n\t\tAny literal strings or whitespace in the formatted number.\n\t**/\n\tvar literal = \"literal\";\n\n\t/**\n\t\tThe minus sign string (\"-\").\n\t**/\n\tvar minusSign = \"minusSign\";\n\n\t/**\n\t\tThe NaN string (\"NaN\").\n\t**/\n\tvar nan = \"nan\";\n\n\t/**\n\t\tThe plus sign string (\"+\").\n\t**/\n\tvar plusSign = \"plusSign\";\n\n\t/**\n\t\tThe percent sign string (\"%\").\n\t**/\n\tvar percentSign = \"percentSign\";\n}\n\ntypedef NumberFormatSupportedLocalesOfOptions = {\n\t/**\n\t\tThe locale matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t */\n\tvar ?localeMatcher:LocaleMatcher;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}