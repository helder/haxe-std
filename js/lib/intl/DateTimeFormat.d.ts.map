{"sourceRoot":"","names":[],"mappings":";AA+DA,qCA0DC,MCvCD,OC7DiB,QFqFhB,MCxBD,OC7DiB,QF2EhB,gBCdD,OC7DiB,QFyGhB,OC5CD,OC7DiB,QF8DhB,SCDD,OAWoC,SDJnC,YCPD,OC7DiB,QF+ChB,gBCcD,OC7DiB,QF8GhB,SCjDD,OC7DiB,QF+FhB,QClCD,OC7DiB,QFmHhB,SCtDD,OC7DiB,QFuDhB,WCMD,OC7DiB,QFwHhB,eC3DD,OC7DiB,QFgFhB,UCnBD,OC7DiB,QF0FhB,OC7BD,OC7DiB;;AF2HjB,6CAWC,UEtIgB,QF8JhB,KE9JgB,QF2JhB,KE3JgB,QF+JhB,ME/JgB,QFwJhB,QChFmC,SDyDnC,QEjIgB,QFgKhB,QEhKgB,QF6JhB,OE7JgB,QF2IhB,iBE3IgB,QFiKhB,QEjKgB,QFmJhB,UCtFD,OC7DiB,QFyKhB,cEzKgB,QF0JhB,SE1JgB,QF4JhB,ME5JgB;;AFwSjB,kCACC,MEzSgB,QF0ShB,OE1SgB;;AFsWjB,uDAKC,gBC9SD,OC7DiB","version":3,"file":"DateTimeFormat.d.ts.map","sources":["../../../../../../../../haxe/versions/4.1.3/std/js/lib/intl/DateTimeFormat.hx","../../../../../../../../haxe/versions/4.1.3/std/StdTypes.hx","../../../../../../../../haxe/versions/4.1.3/std/js/_std/String.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib.intl;\n\n/**\n\tThe `DateTimeFormat` object is a constructor for objects that enable language-sensitive\n\tdate and time formatting.\n\n\tDocumentation [DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Intl.DateTimeFormat\")\nextern class DateTimeFormat {\n\t@:overload(function(?locales:Array<String>, ?options:DateTimeFormatOptions):Void {})\n\t@:pure function new(?locales:String, ?options:DateTimeFormatOptions);\n\n\t/**\n\t\tGetter function that formats a date according to the locale and formatting options\n\t\tof this `DateTimeFormat` object.\n\t**/\n\t@:overload(function(date:js.lib.Date):String {})\n\t@:pure function format(date:Date):String;\n\n\t/**\n\t\tReturns an `Array` of objects representing the date string in parts that can be used\n\t\tfor custom locale-aware formatting.\n\t**/\n\t@:overload(function(date:js.lib.Date):Array<DateTimeFormatPart> {})\n\t@:pure function formatToParts(date:Date):Array<DateTimeFormatPart>;\n\n\t/**\n\t\tReturns a new object with properties reflecting the locale and formatting options\n\t\tcomputed during initialization of the object.\n\t**/\n\t@:pure function resolvedOptions():DateTimeFormatResolvedOptions;\n\n\t/**\n\t\tReturns an array containing those of the provided locales that are supported\n\t\twithout having to fall back to the runtime's default locale.\n\t**/\n\t@:overload(function(locales:Array<String>, ?options:DateTimeFormatSupportedLocalesOfOptions):Array<String> {})\n\t@:pure static function supportedLocalesOf(locales:String, ?options:DateTimeFormatSupportedLocalesOfOptions):Array<String>;\n}\n\ntypedef DateTimeFormatOptions = {\n\t/**\n\t\tThe locale matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t**/\n\tvar ?localeMatcher:LocaleMatcher;\n\n\t/**\n\t\tThe time zone to use. The only value implementations must recognize is `\"UTC\"`;\n\t\tthe default is the runtime's default time zone. Implementations may also recognize\n\t\tthe time zone names of the [IANA time zone database](https://www.iana.org/time-zones),\n\t\tsuch as `\"Asia/Shanghai\"`, `\"Asia/Kolkata\"`, `\"America/New_York\"`.\n\t**/\n\tvar ?timeZone:String;\n\n\t/**\n\t\tWhether to use 12-hour time (as opposed to 24-hour time).\n\t\tThe default is locale dependent.\n\t\tThis option overrides the hc language tag and/or the `hourCycle` option in case both are present.\n\t**/\n\tvar ?hour12:Bool;\n\n\t/**\n\t\tThe hour cycle to use. This option overrides the `hc` language tag, if both are present,\n\t\tand the `Hour12` option takes precedence in case both options have been specified.\n\t**/\n\tvar ?hourCycle:HourCycle;\n\n\t/**\n\t\tThe format matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t\tSee the following paragraphs for information about the use of this property.\n\t**/\n\tvar ?formatMatcher:FormatMatcher;\n\n\t/**\n\t\tThe representation of the weekday.\n\t**/\n\tvar ?weekday:WeekdayRepresentation;\n\n\t/**\n\t\tThe representation of the era.\n\t**/\n\tvar ?era:EraRepresentation;\n\n\t/**\n\t\tThe representation of the year.\n\t**/\n\tvar ?year:YearRepresentation;\n\n\t/**\n\t\tThe representation of the month.\n\t**/\n\tvar ?month:MonthRepresentation;\n\n\t/**\n\t\tThe representation of the day.\n\t**/\n\tvar ?day:DayRepresentation;\n\n\t/**\n\t\tThe representation of the hour.\n\t**/\n\tvar ?hour:HourRepresentation;\n\n\t/**\n\t\tThe representation of the minute.\n\t**/\n\tvar ?minute:MinuteRepresentation;\n\n\t/**\n\t\tThe representation of the second.\n\t**/\n\tvar ?second:SecondRepresentation;\n\n\t/**\n\t\tThe representation of the time zone name.\n\t**/\n\tvar ?timeZoneName:TimeZoneName;\n}\n\ntypedef DateTimeFormatResolvedOptions = {\n\t/**\n\t\tThe BCP 47 language tag for the locale actually used.\n\t\tIf any Unicode extension values were requested in the input BCP 47 language tag that led to this locale,\n\t\tthe key-value pairs that were requested and are supported for this locale are included in `locale`.\n\t**/\n\tfinal locale:String;\n\n\t/**\n\t\tE.g. \"gregory\"\n\t**/\n\tfinal calendar:String;\n\n\t/**\n\t\tThe values requested using the Unicode extension keys \"ca\" and \"nu\" or filled in as default values.\n\t**/\n\tfinal numberingSystem:String;\n\n\t/**\n\t\tThe value provided for this property in the options argument; `undefined` (representing the runtime's\n\t\tdefault time zone) if none was provided.\n\t\tWarning: Applications should not rely on `undefined` being returned, as future versions may return\n\t\ta String value identifying the runtimeâ€™s default time zone instead.\n\t**/\n\tfinal timeZone:Null<String>;\n\n\t/**\n\t\tThe value provided for this property in the `options` argument or filled in as a default.\n\t**/\n\tfinal hour12:Bool;\n\n\tfinal weekday:WeekdayRepresentation;\n\tfinal era:EraRepresentation;\n\tfinal year:YearRepresentation;\n\tfinal month:MonthRepresentation;\n\tfinal day:DayRepresentation;\n\tfinal hour:HourRepresentation;\n\tfinal minute:MinuteRepresentation;\n\tfinal second:SecondRepresentation;\n\n\t/**\n\t\tThe values resulting from format matching between the corresponding properties in the `options` argument\n\t\tand the available combinations and representations for date-time formatting in the selected locale.\n\t\tSome of these properties may not be present, indicating that the corresponding components will not be\n\t\trepresented in formatted output.\n\t**/\n\tfinal timeZoneName:TimeZoneName;\n}\n\nenum abstract HourCycle(String) {\n\tvar H11 = \"h11\";\n\tvar H12 = \"h12\";\n\tvar H23 = \"h23\";\n\tvar H24 = \"h24\";\n}\n\nenum abstract FormatMatcher(String) {\n\tvar Basic = \"basic\";\n\tvar BestFit = \"best fit\";\n}\n\nenum abstract WeekdayRepresentation(String) {\n\t/**\n\t\t(e.g., Thursday)\n\t */\n\tvar Long = \"long\";\n\n\t/**\n\t\t(e.g., Thu)\n\t */\n\tvar Short = \"short\";\n\n\t/**\n\t\t(e.g., T). Two weekdays may have the same narrow style for some locales (e.g. Tuesday's narrow style is also T).\n\t */\n\tvar Narrow = \"narrow\";\n}\n\nenum abstract EraRepresentation(String) {\n\t/**\n\t\t(e.g., Anno Domini)\n\t */\n\tvar Long = \"long\";\n\n\t/**\n\t\t(e.g., AD)\n\t */\n\tvar Short = \"short\";\n\n\t/**\n\t\t(e.g., A)\n\t */\n\tvar Narrow = \"narrow\";\n}\n\nenum abstract YearRepresentation(String) {\n\t/**\n\t\t(e.g., 2012)\n\t**/\n\tvar Numeric = \"numeric\";\n\n\t/**\n\t\t(e.g., 12)\n\t**/\n\tvar TwoDigit = \"2-digit\";\n}\n\nenum abstract MonthRepresentation(String) {\n\t/**\n\t\t(e.g., 2)\n\t**/\n\tvar Numeric = \"numeric\";\n\n\t/**\n\t\t(e.g., 02)\n\t**/\n\tvar TwoDigit = \"2-digit\";\n\n\t/**\n\t\t(e.g., March)\n\t**/\n\tvar Long = \"long\";\n\n\t/**\n\t\t(e.g., Mar)\n\t**/\n\tvar Short = \"short\";\n\n\t/**\n\t\t(e.g., M). Two months may have the same narrow style for some locales (e.g. May's narrow style is also M).\n\t**/\n\tvar Narrow = \"narrow\";\n}\n\nenum abstract DayRepresentation(String) {\n\t/**\n\t\t(e.g., 1)\n\t**/\n\tvar Numeric = \"numeric\";\n\n\t/**\n\t\t(e.g., 01)\n\t**/\n\tvar TwoDigit = \"2-digit\";\n}\n\nenum abstract HourRepresentation(String) {\n\tvar Numeric = \"numeric\";\n\tvar TwoDigit = \"2-digit\";\n}\n\nenum abstract MinuteRepresentation(String) {\n\tvar Numeric = \"numeric\";\n\tvar TwoDigit = \"2-digit\";\n}\n\nenum abstract SecondRepresentation(String) {\n\tvar Numeric = \"numeric\";\n\tvar TwoDigit = \"2-digit\";\n}\n\nenum abstract TimeZoneName(String) {\n\t/**\n\t\t(e.g., British Summer Time)\n\t**/\n\tvar Long = \"long\";\n\n\t/**\n\t\t(e.g., GMT+1)\n\t**/\n\tvar Short = \"short\";\n}\n\ntypedef DateTimeFormatPart = {\n\tvar type(default, never):DateTimeFormatPartType;\n\tvar value(default, never):String;\n}\n\nenum abstract DateTimeFormatPartType(String) {\n\t/**\n\t\tThe string used for the day, for example \"17\".\n\t**/\n\tvar Day = \"day\";\n\n\t/**\n\t\tThe string used for the day period, for example, \"AM\" or \"PM\".\n\t**/\n\tvar DayPeriod = \"dayPeriod\";\n\n\t/**\n\t\tThe string used for the era, for example \"BC\" or \"AD\".\n\t**/\n\tvar Era = \"era\";\n\n\t/**\n\t\tThe string used for the hour, for example \"3\" or \"03\".\n\t**/\n\tvar Hour = \"hour\";\n\n\t/**\n\t\tThe string used for separating date and time values, for example \"/\", \",\", \"o'clock\", \"de\", etc.\n\t**/\n\tvar Literal = \"literal\";\n\n\t/**\n\t\tThe string used for the minute, for example \"00\".\n\t**/\n\tvar Minute = \"minute\";\n\n\t/**\n\t\tThe string used for the month, for example \"12\".\n\t**/\n\tvar Month = \"month\";\n\n\t/**\n\t\tThe string used for the second, for example \"07\" or \"42\".\n\t**/\n\tvar Second = \"second\";\n\n\t/**\n\t\tThe string used for the name of the time zone, for example \"UTC\".\n\t**/\n\tvar TimeZoneName = \"timeZoneName\";\n\n\t/**\n\t\tThe string used for the weekday, for example \"M\", \"Monday\", or \"Montag\".\n\t**/\n\tvar Weekday = \"weekday\";\n\n\t/**\n\t\tThe string used for the year, for example \"2012\" or \"96\".\n\t**/\n\tvar Year = \"year\";\n}\n\ntypedef DateTimeFormatSupportedLocalesOfOptions = {\n\t/**\n\t\tThe locale matching algorithm to use.\n\t\tThe default is `BestFit`.\n\t */\n\tvar ?localeMatcher:LocaleMatcher;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// standard Haxe types\n\n/**\n\tThe standard `Void` type. Only `null` values can be of the type `Void`.\n\n\t@see https://haxe.org/manual/types-void.html\n**/\n#if jvm\n@:runtimeValue\n#end\n@:coreType abstract Void {}\n\n/**\n\tThe standard `Float` type, this is a double-precision IEEE 64bit float.\n\n\tOn static targets, `null` cannot be assigned to Float. If this is necessary,\n\t`Null<Float>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseFloat` converts a `String` to a `Float`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Float {}\n\n/**\n\tThe standard `Int` type. Its precision depends on the platform.\n\n\tOn static targets, `null` cannot be assigned to `Int`. If this is necessary,\n\t`Null<Int>` can be used instead.\n\n\t`Std.int` converts a `Float` to an `Int`, rounded towards 0.\n\t`Std.parseInt` converts a `String` to an `Int`.\n\n\t@see https://haxe.org/manual/types-basic-types.html\n\t@see https://haxe.org/manual/std-math-integer-math.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Int to Float {}\n\n#if (java || cs || hl || cpp)\n/**\n\tSingle-precision IEEE 32bit float (4-byte).\n**/\n@:coreType @:notNull @:runtimeValue abstract Single to Float from Float {}\n#end\n\n/**\n\t`Null<T>` is a wrapper that can be used to make the basic types `Int`,\n\t`Float` and `Bool` nullable on static targets.\n\n\tIf null safety is enabled, only types wrapped in `Null<T>` are nullable.\n\n\tOtherwise, it has no effect on non-basic-types, but it can be useful as a way to document\n\tthat `null` is an acceptable value for a method argument, return value or variable.\n\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:forward\n@:coreType\nabstract Null<T> from T to T {}\n\n/**\n\tThe standard Boolean type, which can either be `true` or `false`.\n\n\tOn static targets, `null` cannot be assigned to `Bool`. If this is necessary,\n\t`Null<Bool>` can be used instead.\n\n\t@see https://haxe.org/manual/types-bool.html\n\t@see https://haxe.org/manual/types-nullability.html\n**/\n@:coreType @:notNull @:runtimeValue abstract Bool {}\n\n/**\n\t`Dynamic` is a special type which is compatible with all other types.\n\n\tUse of `Dynamic` should be minimized as it prevents several compiler\n\tchecks and optimizations. See `Any` type for a safer alternative for\n\trepresenting values of any type.\n\n\t@see https://haxe.org/manual/types-dynamic.html\n**/\n@:coreType @:runtimeValue abstract Dynamic<T> {}\n\n/**\n\tAn `Iterator` is a structure that permits iteration over elements of type `T`.\n\n\tAny class with matching `hasNext()` and `next()` fields is considered an `Iterator`\n\tand can then be used e.g. in `for`-loops. This makes it easy to implement\n\tcustom iterators.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterator<T> = {\n\t/**\n\t\tReturns `false` if the iteration is complete, `true` otherwise.\n\n\t\tUsually iteration is considered to be complete if all elements of the\n\t\tunderlying data structure were handled through calls to `next()`. However,\n\t\tin custom iterators any logic may be used to determine the completion\n\t\tstate.\n\t**/\n\tfunction hasNext():Bool;\n\n\t/**\n\t\tReturns the current item of the `Iterator` and advances to the next one.\n\n\t\tThis method is not required to check `hasNext()` first. A call to this\n\t\tmethod while `hasNext()` is `false` yields unspecified behavior.\n\n\t\tOn the other hand, iterators should not require a call to `hasNext()`\n\t\tbefore the first call to `next()` if an element is available.\n\t**/\n\tfunction next():T;\n}\n\n/**\n\tAn `Iterable` is a data structure which has an `iterator()` method.\n\tSee `Lambda` for generic functions on iterable structures.\n\n\t@see https://haxe.org/manual/lf-iterators.html\n**/\ntypedef Iterable<T> = {\n\tfunction iterator():Iterator<T>;\n}\n\n/**\n\tA `KeyValueIterator` is an `Iterator` that has a key and a value.\n**/\ntypedef KeyValueIterator<K, V> = Iterator<{key:K, value:V}>;\n\n/**\n\tA `KeyValueIterable` is a data structure which has a `keyValueIterator()`\n\tmethod to iterate over key-value-pairs.\n**/\ntypedef KeyValueIterable<K, V> = {\n\tfunction keyValueIterator():KeyValueIterator<K, V>;\n}\n\n/**\n\t`ArrayAccess` is used to indicate a class that can be accessed using brackets.\n\tThe type parameter represents the type of the elements stored.\n\n\tThis interface should be used for externs only. Haxe does not support custom\n\tarray access on classes. However, array access can be implemented for\n\tabstract types.\n\n\t@see https://haxe.org/manual/types-abstract-array-access.html\n**/\nextern interface ArrayAccess<T> {}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default, null):Int;\n\n\t@:pure function new(string:String):Void;\n\t@:pure function toUpperCase():String;\n\t@:pure function toLowerCase():String;\n\t@:pure function charAt(index:Int):String;\n\t@:pure function indexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function lastIndexOf(str:String, ?startIndex:Int):Int;\n\t@:pure function split(delimiter:String):Array<String>;\n\t@:pure function toString():String;\n\t@:pure function substring(startIndex:Int, ?endIndex:Int):String;\n\n\t@:pure inline function charCodeAt(index:Int):Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr(pos:Int, ?len:Int):String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode(code:Int):String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\n\tstatic function __init__():Void {\n\t\tuntyped __feature__('String.fromCharCode',\n\t\t\tjs.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n}\n"]}