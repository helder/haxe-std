{"sourceRoot":"","names":[],"mappings":"QAKA;ACmPA;;;CACC;;;CACA;;;CAEA,sBACC;SAAO,MAAK;;CAEb,wBACC;EAAO,aAAK","version":3,"file":"Object.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.0/github/2408778ccba83def22930ef9595d1639043c1dc2/src/genes/Register.hx","../../../../../../../haxe/versions/4.1.2/std/js/lib/Object.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\nimport haxe.extern.Rest;\nimport haxe.DynamicAccess;\n\n/**\n\tThe `js.lib.Object` constructor creates an object wrapper.\n\n\tDocumentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Object\")\nextern class Object {\n\t/**\n\t\tCopies the values of all enumerable own properties from one or more\n\t\tsource objects to a target object.\n\t**/\n\tstatic function assign<T:{}>(target:T, sources:Rest<{}>):T;\n\n\t/**\n\t\tCreates a new object with the specified prototype object and properties.\n\t**/\n\t@:pure static function create<T>(proto:{}, ?propertiesObject:DynamicAccess<ObjectPropertyDescriptor>):T;\n\n\t/**\n\t\tAdds the named properties described by the given descriptors to an object.\n\t**/\n\tstatic function defineProperties<T:{}>(obj:T, props:DynamicAccess<ObjectPropertyDescriptor>):T;\n\n\t/**\n\t\tAdds the named property described by a given descriptor to an object.\n\t**/\n\tstatic function defineProperty<T:{}>(obj:T, prop:String, descriptor:ObjectPropertyDescriptor):T;\n\n\t/**\n\t\tReturns an array containing all of the [key, value] pairs of a given\n\t\tobject's own enumerable string properties.\n\t**/\n\t@:pure static function entries(obj:{}):Array<ObjectEntry>;\n\n\t/**\n\t\tFreezes an object: other code can't delete or change any properties.\n\t**/\n\tstatic function freeze<T:{}>(obj:T):T;\n\n\t/**\n\t\tReturns a new object from an iterable of key-value pairs\n\t\t(reverses Object.entries).\n\t**/\n\t@:pure static function fromEntries<T:{}>(iterable:Any):T;\n\n\t/**\n\t\tReturns a property descriptor for a named property on an object.\n\t**/\n\t@:pure static function getOwnPropertyDescriptor(obj:{}, prop:String):Null<ObjectPropertyDescriptor>;\n\n\t/**\n\t\tReturns an array containing the names of all of the given object's own\n\t\tenumerable and non-enumerable properties.\n\t**/\n\t@:pure static function getOwnPropertyNames(obj:{}):Array<String>;\n\n\t/**\n\t\tReturns an array of all symbol properties found directly upon a given object.\n\t**/\n\t@:pure static function getOwnPropertySymbols(obj:{}):Array<Symbol>;\n\n\t/**\n\t\tReturns the prototype of the specified object.\n\t**/\n\t@:pure static function getPrototypeOf<TProto:{}>(obj:{}):Null<TProto>;\n\n\t/**\n\t\tCompares if two values are the same value. Equates all NaN values\n\t\t(which differs from both Abstract Equality Comparison and\n\t\tStrict Equality Comparison).\n\t**/\n\t@:pure static function is<T>(value1:T, value2:T):Bool;\n\n\t/**\n\t\tDetermines if extending of an object is allowed.\n\t**/\n\t@:pure static function isExtensible(obj:{}):Bool;\n\n\t/**\n\t\tDetermines if an object was frozen.\n\t**/\n\t@:pure static function isFrozen(obj:{}):Bool;\n\n\t/**\n\t\tDetermines if an object is sealed.\n\t**/\n\t@:pure static function isSealed(obj:{}):Bool;\n\n\t/**\n\t\tReturns an array containing the names of all of the given object's own\n\t\tenumerable string properties.\n\t**/\n\t@:pure static function keys(obj:{}):Array<String>;\n\n\t/**\n\t\tPrevents any extensions of an object.\n\t**/\n\tstatic function preventExtensions<T:{}>(obj:T):T;\n\n\t/**\n\t\tPrevents other code from deleting properties of an object.\n\t**/\n\tstatic function seal<T:{}>(obj:T):T;\n\n\t/**\n\t\tSets the prototype (i.e., the internal Prototype property).\n\t**/\n\tstatic function setPrototypeOf<T:{}>(obj:T, prototype:Null<{}>):T;\n\n\t/**\n\t\tReturns an array containing the values that correspond to all of\n\t\ta given object's own enumerable string properties.\n\t**/\n\t@:pure static function values(obj:{}):Array<Any>;\n\n\t/**\n\t\tAllows the addition of properties to all objects of type Object.\n\t**/\n\tstatic var prototype(default, never):ObjectPrototype;\n\n\t/**\n\t\tThe Object constructor creates an object wrapper.\n\t**/\n\t@:pure function new(?value:Any);\n}\n\n/**\n\tType for\n\t@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>\n**/\ntypedef ObjectPrototype = {\n\t/**\n\t\tReturns a boolean indicating whether an object contains the specified\n\t\tproperty as a direct property of that object and not inherited through\n\t\tthe prototype chain.\n\t**/\n\tvar hasOwnProperty(default, never):Function;\n\n\t/**\n\t\tReturns a boolean indicating whether the object this method is called\n\t\tupon is in the prototype chain of the specified object.\n\t**/\n\tvar isPrototypeOf(default, never):Function;\n\n\t/**\n\t\tReturns a boolean indicating if the internal enumerable attribute is set.\n\t**/\n\tvar propertyIsEnumerable(default, never):Function;\n\n\t/**\n\t\tCalls `toString()`.\n\t**/\n\tvar toLocaleString(default, never):Function;\n\n\t/**\n\t\tReturns a string representation of the object.\n\t**/\n\tvar toString(default, never):Function;\n\n\t/**\n\t\tReturns the primitive value of the specified object.\n\t**/\n\tvar valueOf(default, never):Function;\n}\n\n/**\n\t@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>\n**/\ntypedef ObjectPropertyDescriptor = {\n\t/**\n\t\t`true` if and only if the type of this property descriptor may be\n\t\tchanged and if the property may be deleted from the corresponding object.\n\n\t\tDefaults to `false`.\n\t**/\n\tvar ?configurable:Bool;\n\n\t/**\n\t\t`true` if and only if this property shows up during enumeration of the\n\t\tproperties on the corresponding object.\n\n\t\tDefaults to `false`.\n\t**/\n\tvar ?enumerable:Bool;\n\n\t/**\n\t\tThe value associated with the property.\n\t\tCan be any valid JavaScript value (number, object, function, etc).\n\t**/\n\tvar ?value:Any;\n\n\t/**\n\t\t`true` if and only if the value associated with the property may be\n\t\tchanged with an assignment operator.\n\n\t\tDefaults to `false`.\n\t**/\n\tvar ?writable:Bool;\n\n\t/**\n\t\tA function which serves as a getter for the property, or `undefined` if\n\t\tthere is no getter. When the property is accessed, this function is\n\t\tcalled without arguments and with `this` set to the object through which\n\t\tthe property is accessed (this may not be the object on which the\n\t\tproperty is defined due to inheritance).\n\t\tThe return value will be used as the value of the property.\n\t**/\n\tvar ?get:Void->Any;\n\n\t/**\n\t\tA function which serves as a setter for the property, or undefined if\n\t\tthere is no setter. When the property is assigned to, this function\n\t\tis called with one argument (the value being assigned to the property)\n\t\tand with `this` set to the object through which the property is assigned.\n\t**/\n\tvar ?set:Any->Void;\n}\n\n/**\n\tKey/value access helper for `js.lib.Object.entries()`.\n**/\nabstract ObjectEntry(Array<Any>) {\n\tpublic var key(get, never):String;\n\tpublic var value(get, never):Any;\n\n\tinline function get_key():String\n\t\treturn this[0];\n\n\tinline function get_value():Any\n\t\treturn this[1];\n}\n"]}