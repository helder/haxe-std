{"sourceRoot":"","names":[],"mappings":"QAKA;;ACuGA;AAAA;CACC;;;CACA;;;CAEA,sBACC;EAAA,OAAO,MAAK;;CAEb,wBACC;EAAA,OAAO,MAAK","version":3,"file":"Map.js.map","sources":["../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.0.3/std/js/lib/Map.hx"],"sourcesContent":["package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\nimport js.lib.Iterator;\n\n/**\n\tThe (native) JavaScript Map object holds key-value pairs.\n\tAny value (both objects and primitive values) may be used as either a key\n\tor a value.\n\n\tDocumentation [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Map\")\nextern class Map<K, V> {\n\t/**\n\t\tThe number of key/value pairs in the `js.Map` object.\n\t**/\n\tvar size(default, null):Int;\n\n\t/**\n\t\tAn Array or other iterable object whose elements are key-value pairs\n\t\t(arrays with two elements, e.g. `[[ 1, 'one' ],[ 2, 'two' ]]`).\n\t\tEach key-value pair is added to the new `js.Map`;\n\t\tnull values are treated as undefined.\n\t**/\n\t@:pure function new(?iterable:Any);\n\n\t/**\n\t\tA boolean asserting whether a value has been associated to the key in\n\t\tthe `js.Map` object or not.\n\t**/\n\t@:pure function has(key:K):Bool;\n\n\t/**\n\t\tThe value associated to the key, or `null` if there is none.\n\t**/\n\t@:pure function get(key:K):Null<V>;\n\n\t/**\n\t\tSets the value for the key in the Map object.\n\t\tReturns the `js.Map` object.\n\t**/\n\tfunction set(key:K, value:V):Map<K, V>;\n\n\t/**\n\t\tReturns `true` if an element in the `js.Map` object existed and has been\n\t\tremoved, or `false` if the element does not exist.\n\t\t`has(key)` will return `false` afterwards.\n\t**/\n\tfunction delete(key:K):Bool;\n\n\t/**\n\t\tRemoves all key/value pairs from the Map object.\n\t**/\n\tfunction clear():Void;\n\n\t/**\n\t\tCalls `callback` once for each key-value pair present in the `js.Map`\n\t\tobject, in insertion order.\n\n\t\tIf a `thisArg` parameter is provided to forEach, it will be used as the\n\t\t`this` value for each callback.\n\t**/\n\tfunction forEach(callback:(value:V, key:K, map:Map<K, V>) -> Void, ?thisArg:Any):Void;\n\n\t/**\n\t\tReturns a new `Iterator` object that contains the keys for each element\n\t\tin the `js.Map` object in insertion order.\n\t**/\n\tfunction keys():Iterator<K>;\n\n\t/**\n\t\tReturns a new `Iterator` object that contains the values for each\n\t\telement in the `js.Map` object in insertion order.\n\t**/\n\tfunction values():Iterator<V>;\n\n\t/**\n\t\tReturns a new `Iterator` object that contains an array of `MapEntry`\n\t\tfor each element in the `js.Map` object in insertion order.\n\t**/\n\tfunction entries():Iterator<MapEntry<K, V>>;\n}\n\n/**\n\tKey/value access helper for `js.Map.entries()` and `js.Set.entries()`.\n**/\nabstract MapEntry<K, V>(Array<Any>) {\n\tpublic var key(get, never):K;\n\tpublic var value(get, never):V;\n\n\tinline function get_key():K\n\t\treturn this[0];\n\n\tinline function get_value():V\n\t\treturn this[1];\n}\n"]}