{"sourceRoot":"","names":[],"mappings":";AA+Ga,qBAAiB,GAAG,KCtF1B","version":3,"file":"Map.d.ts.map","sources":["../../../../../../../haxe/versions/4.2.1/std/js/lib/Map.hx","../../../../../../../haxe/versions/4.2.1/std/js/_std/Array.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n/**\n\tThe (native) JavaScript Map object holds key-value pairs.\n\tAny value (both objects and primitive values) may be used as either a key\n\tor a value.\n\n\tDocumentation [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Map\")\nextern class Map<K, V> {\n\t/**\n\t\tThe number of key/value pairs in the `js.Map` object.\n\t**/\n\tvar size(default, null):Int;\n\n\t/**\n\t\tAn Array or other iterable object whose elements are key-value pairs\n\t\t(arrays with two elements, e.g. `[[ 1, 'one' ],[ 2, 'two' ]]`).\n\t\tEach key-value pair is added to the new `js.Map`;\n\t\tnull values are treated as undefined.\n\t**/\n\t@:pure function new(?iterable:Any);\n\n\t/**\n\t\tA boolean asserting whether a value has been associated to the key in\n\t\tthe `js.Map` object or not.\n\t**/\n\t@:pure function has(key:K):Bool;\n\n\t/**\n\t\tThe value associated to the key, or `null` if there is none.\n\t**/\n\t@:pure function get(key:K):Null<V>;\n\n\t/**\n\t\tSets the value for the key in the Map object.\n\t\tReturns the `js.Map` object.\n\t**/\n\tfunction set(key:K, value:V):Map<K, V>;\n\n\t/**\n\t\tReturns `true` if an element in the `js.Map` object existed and has been\n\t\tremoved, or `false` if the element does not exist.\n\t\t`has(key)` will return `false` afterwards.\n\t**/\n\tfunction delete(key:K):Bool;\n\n\t/**\n\t\tRemoves all key/value pairs from the Map object.\n\t**/\n\tfunction clear():Void;\n\n\t/**\n\t\tCalls `callback` once for each key-value pair present in the `js.Map`\n\t\tobject, in insertion order.\n\n\t\tIf a `thisArg` parameter is provided to forEach, it will be used as the\n\t\t`this` value for each callback.\n\t**/\n\tfunction forEach(callback:(value:V, key:K, map:Map<K, V>) -> Void, ?thisArg:Any):Void;\n\n\t/**\n\t\tReturns a new `Iterator` object that contains the keys for each element\n\t\tin the `js.Map` object in insertion order.\n\t**/\n\tfunction keys():js.lib.Iterator<K>;\n\n\t/**\n\t\tReturns a new `Iterator` object that contains the values for each\n\t\telement in the `js.Map` object in insertion order.\n\t**/\n\tfunction values():js.lib.Iterator<V>;\n\n\t/**\n\t\tReturns a new `Iterator` object that contains an array of `KeyValue`\n\t\tfor each element in the `js.Map` object in insertion order.\n\t**/\n\tfunction entries():js.lib.Iterator<KeyValue<K, V>>;\n\n\tinline function iterator():js.lib.HaxeIterator<V> {\n\t\treturn new HaxeIterator(this.values());\n\t}\n\n\tinline function keyValueIterator():HaxeIterator<KeyValue<K, V>> {\n\t\treturn new HaxeIterator(this.entries());\n\t}\n}\n\n@:deprecated typedef MapEntry<K, V> = KeyValue<K, V>;","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.ArrayKeyValueIterator;\n\n@:coreApi\nextern class Array<T> {\n\tvar length(default, null):Int;\n\n\tfunction new():Void;\n\tfunction concat(a:Array<T>):Array<T>;\n\tfunction join(sep:String):String;\n\tfunction pop():Null<T>;\n\tfunction push(x:T):Int;\n\tfunction reverse():Void;\n\tfunction shift():Null<T>;\n\tfunction slice(pos:Int, ?end:Int):Array<T>;\n\tfunction sort(f:T->T->Int):Void;\n\tfunction splice(pos:Int, len:Int):Array<T>;\n\tfunction toString():String;\n\tfunction unshift(x:T):Void;\n\n\tinline function insert(pos:Int, x:T):Void {\n\t\t(cast this).splice(pos, 0, x);\n\t}\n\n\tinline function remove(x:T):Bool {\n\t\treturn @:privateAccess HxOverrides.remove(this, x);\n\t}\n\n\tinline function contains(x:T):Bool {\n\t\t#if (js_es >= 6)\n\t\treturn (cast this).includes(x);\n\t\t#else\n\t\treturn this.indexOf(x) != -1;\n\t\t#end\n\t}\n\n\t#if (js_es >= 5)\n\t@:pure function indexOf(x:T, ?fromIndex:Int):Int;\n\t@:pure function lastIndexOf(x:T, ?fromIndex:Int):Int;\n\t#else\n\tinline function indexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.indexOf(this, x, (fromIndex != null) ? fromIndex : 0);\n\t}\n\n\tinline function lastIndexOf(x:T, ?fromIndex:Int):Int {\n\t\treturn @:privateAccess HxOverrides.lastIndexOf(this, x, (fromIndex != null) ? fromIndex : length - 1);\n\t}\n\t#end\n\n\t@:pure\n\tinline function copy():Array<T> {\n\t\treturn (cast this).slice();\n\t}\n\n\t@:runtime inline function map<S>(f:T->S):Array<S> {\n\t\tvar result:Array<S> = js.Syntax.construct(Array, length);\n\t\tfor(i in 0...length) {\n\t\t\tresult[i] = f(this[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@:runtime inline function filter(f:T->Bool):Array<T> {\n\t\treturn [for (v in this) if (f(v)) v];\n\t}\n\n\t@:runtime inline function iterator():haxe.iterators.ArrayIterator<T> {\n\t\treturn new haxe.iterators.ArrayIterator(this);\n\t}\n\n\t@:runtime inline function keyValueIterator():ArrayKeyValueIterator<T> {\n\t\treturn new ArrayKeyValueIterator(this);\n\t}\n\n\tinline function resize(len:Int):Void {\n\t\tthis.length = len;\n\t}\n}\n"]}