{"sourceRoot":"","names":[],"mappings":"QA4BA;QCvBA;;;;;ACwGA;AAAA;CAKC,SALD,CAGa;EAAA,AAAZ,aAAY,EAGX;EAAA,WAAW,IACX;EAAA,cAAc,iBAAiB;;CAGhC,UACC;EAAA,AAAO;;CAGR,OACC,CACM;EAAA,uBACE;EAAA;EAAA;EAAA,yCAFR;EAAA,AAAO,QACD,YACE","version":3,"file":"Set.js.map","sources":["../../../../../../../haxe/haxe_libraries/helder.set/0.3.0/github/a98405984aad14238c7e478404c338c231a12ecb/src/js/lib/HaxeIterator.hx","../../../../../../../haxe/haxe_libraries/genes/0.3.2/github/c0832e2c0971599e5139e57795981c7a450426d6/src/genes/Register.hx","../../../../../../../haxe/versions/4.1.0/std/js/lib/Set.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n/**\n  `HaxeIterator` wraps a JavaScript native iterator object to enable for-in iteration in haxe.\n  It can be used directly: `new HaxeIterator(jsIterator)` or via using: `using HaxeIterator`.\n**/\nclass HaxeIterator<T> {\n  final jsIterator: js.lib.Iterator<T>;\n  var lastStep: js.lib.Iterator.IteratorStep<T>;\n\n  public inline function new(jsIterator: js.lib.Iterator<T>) {\n    this.jsIterator = jsIterator;\n    lastStep = jsIterator.next();\n  }\n\n  public inline function hasNext(): Bool {\n    return !lastStep.done;\n  }\n\n  public inline function next(): T {\n    var v = lastStep.value;\n    lastStep = jsIterator.next();\n    return v;\n  }\n\n  public static inline function iterator<T>(jsIterator: js.lib.Iterator<T>) {\n    return new HaxeIterator(jsIterator);\n  }\n}\n","package genes;\n\nimport js.lib.Object;\nimport js.Syntax;\n\nclass Register {\n  @:keep @:native(\"$global\")\n  public static final _global = js.Syntax.code('typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this');\n\n  static final globals = {}\n\n  @:keep public static function global(name) {\n    return untyped globals[name] ? globals[name] : globals[name] = {};\n  }\n\n  @:keep public static function createStatic<T>(obj: {}, name: String,\n      get: () -> T) {\n    var value: T = null;\n    inline function init() {\n      if (get != null) {\n        value = get();\n        get = null;\n      }\n    }\n    Object.defineProperty(obj, name, {\n      enumerable: true,\n      get: () -> {\n        init();\n        return value;\n      },\n      set: v -> {\n        init();\n        value = v;\n      }\n    });\n  }\n\n  @:keep public static function iter<T>(a: Array<T>): Iterator<T> {\n    return untyped if (!Array.isArray(a))\n      js.Syntax.code('a.iterator()')\n    else untyped {\n      cur: 0,\n      arr: a,\n      hasNext: function() {\n        return __this__.cur < __this__.arr.length;\n      },\n      next: function() {\n        return __this__.arr[__this__.cur++];\n      }\n    }\n  }\n\n  @:keep public static function extend(superClass) {\n    Syntax.code('\n      function res() {\n        this.new.apply(this, arguments)\n      }\n      Object.setPrototypeOf(res.prototype, superClass.prototype)\n      return res\n    ');\n  }\n\n  @:keep public static function inherits(resolve, defer = false) {\n    Syntax.code('\n      function res() {\n        if (defer && resolve && res.__init__) res.__init__()\n        this.new.apply(this, arguments)\n      }\n      if (!defer) {\n        if (resolve && resolve.__init__) {\n          defer = true\n          res.__init__ = () => {\n            resolve.__init__()\n            Object.setPrototypeOf(res.prototype, resolve.prototype)\n            res.__init__ = undefined\n          } \n        } else if (resolve) {\n          Object.setPrototypeOf(res.prototype, resolve.prototype)\n        }\n      } else {\n        res.__init__ = () => {\n          const superClass = resolve()\n          if (superClass.__init__) superClass.__init__()\n          Object.setPrototypeOf(res.prototype, superClass.prototype)\n          res.__init__ = undefined\n        } \n      }\n      return res\n    ');\n  }\n\n  static var fid = 0;\n\n  @:keep public static function bind(o: Dynamic, m: Dynamic) {\n    if (m == null)\n      return null;\n    if (m.__id__ == null)\n      m.__id__ = fid++;\n    var f = null;\n    if (o.hx__closures__ == null)\n      o.hx__closures__ = {}\n    else\n      f = o.hx__closures__[m.__id__];\n    if (f == null) {\n      f = m.bind(o);\n      o.hx__closures__[m.__id__] = f;\n    }\n    return f;\n  }\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\n/**\n\tThe `js.Set` object lets you store unique values of any type, whether\n\tprimitive values or object references.\n\n\tDocumentation [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n**/\n@:native(\"Set\")\nextern class Set<T> {\n\t/**\n\t\tThe number of values in the `js.Set` object.\n\t**/\n\tvar size(default, null):Int;\n\n\t/**\n\t\tIf an iterable object is passed, all of its elements will be added to\n\t\tthe new `js.Set`.\n\t**/\n\t@:pure function new(?iterable:Any);\n\n\t/**\n\t\tReturns a boolean asserting whether an element is present with the given\n\t\tvalue in the `js.Set` object or not.\n\t**/\n\t@:pure function has(value:T):Bool;\n\n\t/**\n\t\tAppends a new element with the given value to the `js.Set` object.\n\t\tReturns the `js.Set` object.\n\t**/\n\tfunction add(value:T):Set<T>;\n\n\t/**\n\t\tRemoves the element associated to the value and returns the value that\n\t\t`has(value)` would have previously returned.\n\t\t`has(value)` will return `false` afterwards.\n\t**/\n\tfunction delete(value:T):Bool;\n\n\t/**\n\t\tRemoves all elements from the `js.Set` object.\n\t**/\n\tfunction clear():Void;\n\n\t/**\n\t\tCalls `callback` once for each key-value pair present in the `js.Set`\n\t\tobject, in insertion order.\n\n\t\tIf a `thisArg` parameter is provided to forEach, it will be used as the\n\t\t`this` value for each callback.\n\t**/\n\tfunction forEach(callback:(value:T, key:T, set:Set<T>) -> Void, ?thisArg:Any):Void;\n\n\t/**\n\t\tReturns a new `js.lib.Iterator` object that contains the keys for each element\n\t\tin the `js.Set` object in insertion order.\n\t**/\n\tfunction keys():js.lib.Iterator<T>;\n\n\t/**\n\t\tReturns a new `js.lib.Iterator` object that contains the values for each\n\t\telement in the `js.Set` object in insertion order.\n\t**/\n\tfunction values():js.lib.Iterator<T>;\n\n\t/**\n\t\tReturns a new `js.lib.Iterator` object that contains an array of\n\t\t`[value, value]` for each element in the `js.Set` object, in insertion\n\t\torder.\n\t\tThis is kept similar to the `js.Map` object, so that each entry has the\n\t\tsame value for its key and value here.\n\t**/\n\tfunction entries():js.lib.Iterator<KeyValue<T, T>>;\n\n\tinline function iterator():HaxeIterator<T> {\n\t\treturn new HaxeIterator(this.values());\n\t}\n\n\tinline function keyValueIterator():SetKeyValueIterator<T> {\n\t\treturn new SetKeyValueIterator(this);\n\t}\n}\n\n/**\n\tkey => value iterator for js.lib.Set, tracking the entry index for the key to match the behavior of haxe.ds.List\n**/\nclass SetKeyValueIterator<T> {\n\tfinal set:js.lib.Set<T>;\n\tfinal values:HaxeIterator<T>;\n\tvar index = 0;\n\n\tpublic inline function new(set:js.lib.Set<T>) {\n\t\tthis.set = set;\n\t\tthis.values = new HaxeIterator(set.values());\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn values.hasNext();\n\t}\n\n\tpublic inline function next():{key:Int, value:T} {\n\t\treturn {\n\t\t\tkey: index++,\n\t\t\tvalue: values.next(),\n\t\t};\n\t}\n}\n"]}