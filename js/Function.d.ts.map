{"sourceRoot":"","names":[],"mappings":";YAwBa,WCGN","version":3,"file":"Function.d.ts.map","sources":["../../../../../../haxe/versions/4.0.0/std/js/Function.hx","../../../../../../haxe/versions/4.0.0/std/js/lib/Function.hx"],"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js;\n\n@:deprecated typedef Function = js.lib.Function;\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage js.lib;\n\nimport haxe.extern.Rest;\n\n@:native(\"Function\")\nextern class Function {\n\t/** Specifies the number of arguments expected by the function. **/\n\tvar length(default, never):Int;\n\n\t/** The name of the function. **/\n\tvar name:String;\n\n\t/** Creates a new Function object. **/\n\tfunction new(arg:String, rest:Rest<String>);\n\n\t/** Calls a function and sets its this to the provided value, arguments can be passed as an Array object. **/\n\tfunction apply(thisArg:Dynamic, argsArray:Array<Dynamic>):Dynamic;\n\n\t/** Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are. **/\n\tfunction call(thisArg:Dynamic, args:Rest<Dynamic>):Dynamic;\n\n\t/**\n\t\tCreates a new function which, when called, has its this set to the provided value,\n\t\twith a given sequence of arguments preceding any provided when the new function was called.\n\t**/\n\t@:pure function bind(thisArg:Dynamic, args:Rest<Dynamic>):Function;\n\n\t/** Returns a string representing the source code of the function. **/\n\t@:pure function toString():String;\n}\n"]}